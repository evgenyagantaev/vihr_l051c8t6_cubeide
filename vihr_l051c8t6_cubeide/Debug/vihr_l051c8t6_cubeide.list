
vihr_l051c8t6_cubeide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afe4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002558  0800b0a4  0800b0a4  0001b0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5fc  0800d5fc  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5fc  0800d5fc  0001d5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d604  0800d604  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d604  0800d604  0001d604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d608  0800d608  0001d608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800d60c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  20000208  0800d814  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000994  0800d814  00020994  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b71c  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b7a  00000000  00000000  0003b94c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a0  00000000  00000000  0003f4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010a0  00000000  00000000  00040768  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001574e  00000000  00000000  00041808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013e4e  00000000  00000000  00056f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078a7a  00000000  00000000  0006ada4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e381e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b24  00000000  00000000  000e389c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000208 	.word	0x20000208
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b08c 	.word	0x0800b08c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000020c 	.word	0x2000020c
 8000104:	0800b08c 	.word	0x0800b08c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f000 fff1 	bl	80013fc <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 ff49 	bl	80012bc <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 ffe3 	bl	80013fc <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ffd9 	bl	80013fc <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff6b 	bl	8001334 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff61 	bl	8001334 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_uldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d111      	bne.n	80004a8 <__aeabi_uldivmod+0x28>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d10f      	bne.n	80004a8 <__aeabi_uldivmod+0x28>
 8000488:	2900      	cmp	r1, #0
 800048a:	d100      	bne.n	800048e <__aeabi_uldivmod+0xe>
 800048c:	2800      	cmp	r0, #0
 800048e:	d002      	beq.n	8000496 <__aeabi_uldivmod+0x16>
 8000490:	2100      	movs	r1, #0
 8000492:	43c9      	mvns	r1, r1
 8000494:	1c08      	adds	r0, r1, #0
 8000496:	b407      	push	{r0, r1, r2}
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <__aeabi_uldivmod+0x24>)
 800049a:	a102      	add	r1, pc, #8	; (adr r1, 80004a4 <__aeabi_uldivmod+0x24>)
 800049c:	1840      	adds	r0, r0, r1
 800049e:	9002      	str	r0, [sp, #8]
 80004a0:	bd03      	pop	{r0, r1, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	ffffff5d 	.word	0xffffff5d
 80004a8:	b403      	push	{r0, r1}
 80004aa:	4668      	mov	r0, sp
 80004ac:	b501      	push	{r0, lr}
 80004ae:	9802      	ldr	r0, [sp, #8]
 80004b0:	f000 f824 	bl	80004fc <__udivmoddi4>
 80004b4:	9b01      	ldr	r3, [sp, #4]
 80004b6:	469e      	mov	lr, r3
 80004b8:	b002      	add	sp, #8
 80004ba:	bc0c      	pop	{r2, r3}
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			; (mov r8, r8)

080004c0 <__aeabi_d2uiz>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	2200      	movs	r2, #0
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <__aeabi_d2uiz+0x38>)
 80004c6:	0004      	movs	r4, r0
 80004c8:	000d      	movs	r5, r1
 80004ca:	f7ff ffcf 	bl	800046c <__aeabi_dcmpge>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	d104      	bne.n	80004dc <__aeabi_d2uiz+0x1c>
 80004d2:	0020      	movs	r0, r4
 80004d4:	0029      	movs	r1, r5
 80004d6:	f001 fdb3 	bl	8002040 <__aeabi_d2iz>
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <__aeabi_d2uiz+0x38>)
 80004de:	2200      	movs	r2, #0
 80004e0:	0020      	movs	r0, r4
 80004e2:	0029      	movs	r1, r5
 80004e4:	f001 fa64 	bl	80019b0 <__aeabi_dsub>
 80004e8:	f001 fdaa 	bl	8002040 <__aeabi_d2iz>
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	061b      	lsls	r3, r3, #24
 80004f0:	469c      	mov	ip, r3
 80004f2:	4460      	add	r0, ip
 80004f4:	e7f1      	b.n	80004da <__aeabi_d2uiz+0x1a>
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	41e00000 	.word	0x41e00000

080004fc <__udivmoddi4>:
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	464f      	mov	r7, r9
 8000500:	4646      	mov	r6, r8
 8000502:	46d6      	mov	lr, sl
 8000504:	b5c0      	push	{r6, r7, lr}
 8000506:	0004      	movs	r4, r0
 8000508:	b082      	sub	sp, #8
 800050a:	000d      	movs	r5, r1
 800050c:	4691      	mov	r9, r2
 800050e:	4698      	mov	r8, r3
 8000510:	428b      	cmp	r3, r1
 8000512:	d82f      	bhi.n	8000574 <__udivmoddi4+0x78>
 8000514:	d02c      	beq.n	8000570 <__udivmoddi4+0x74>
 8000516:	4641      	mov	r1, r8
 8000518:	4648      	mov	r0, r9
 800051a:	f001 fe51 	bl	80021c0 <__clzdi2>
 800051e:	0029      	movs	r1, r5
 8000520:	0006      	movs	r6, r0
 8000522:	0020      	movs	r0, r4
 8000524:	f001 fe4c 	bl	80021c0 <__clzdi2>
 8000528:	1a33      	subs	r3, r6, r0
 800052a:	469c      	mov	ip, r3
 800052c:	3b20      	subs	r3, #32
 800052e:	469a      	mov	sl, r3
 8000530:	d500      	bpl.n	8000534 <__udivmoddi4+0x38>
 8000532:	e076      	b.n	8000622 <__udivmoddi4+0x126>
 8000534:	464b      	mov	r3, r9
 8000536:	4652      	mov	r2, sl
 8000538:	4093      	lsls	r3, r2
 800053a:	001f      	movs	r7, r3
 800053c:	464b      	mov	r3, r9
 800053e:	4662      	mov	r2, ip
 8000540:	4093      	lsls	r3, r2
 8000542:	001e      	movs	r6, r3
 8000544:	42af      	cmp	r7, r5
 8000546:	d828      	bhi.n	800059a <__udivmoddi4+0x9e>
 8000548:	d025      	beq.n	8000596 <__udivmoddi4+0x9a>
 800054a:	4653      	mov	r3, sl
 800054c:	1ba4      	subs	r4, r4, r6
 800054e:	41bd      	sbcs	r5, r7
 8000550:	2b00      	cmp	r3, #0
 8000552:	da00      	bge.n	8000556 <__udivmoddi4+0x5a>
 8000554:	e07b      	b.n	800064e <__udivmoddi4+0x152>
 8000556:	2200      	movs	r2, #0
 8000558:	2300      	movs	r3, #0
 800055a:	9200      	str	r2, [sp, #0]
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	2301      	movs	r3, #1
 8000560:	4652      	mov	r2, sl
 8000562:	4093      	lsls	r3, r2
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2301      	movs	r3, #1
 8000568:	4662      	mov	r2, ip
 800056a:	4093      	lsls	r3, r2
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	e018      	b.n	80005a2 <__udivmoddi4+0xa6>
 8000570:	4282      	cmp	r2, r0
 8000572:	d9d0      	bls.n	8000516 <__udivmoddi4+0x1a>
 8000574:	2200      	movs	r2, #0
 8000576:	2300      	movs	r3, #0
 8000578:	9200      	str	r2, [sp, #0]
 800057a:	9301      	str	r3, [sp, #4]
 800057c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <__udivmoddi4+0x8a>
 8000582:	601c      	str	r4, [r3, #0]
 8000584:	605d      	str	r5, [r3, #4]
 8000586:	9800      	ldr	r0, [sp, #0]
 8000588:	9901      	ldr	r1, [sp, #4]
 800058a:	b002      	add	sp, #8
 800058c:	bc1c      	pop	{r2, r3, r4}
 800058e:	4690      	mov	r8, r2
 8000590:	4699      	mov	r9, r3
 8000592:	46a2      	mov	sl, r4
 8000594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000596:	42a3      	cmp	r3, r4
 8000598:	d9d7      	bls.n	800054a <__udivmoddi4+0x4e>
 800059a:	2200      	movs	r2, #0
 800059c:	2300      	movs	r3, #0
 800059e:	9200      	str	r2, [sp, #0]
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	4663      	mov	r3, ip
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d0e9      	beq.n	800057c <__udivmoddi4+0x80>
 80005a8:	07fb      	lsls	r3, r7, #31
 80005aa:	4698      	mov	r8, r3
 80005ac:	4641      	mov	r1, r8
 80005ae:	0872      	lsrs	r2, r6, #1
 80005b0:	430a      	orrs	r2, r1
 80005b2:	087b      	lsrs	r3, r7, #1
 80005b4:	4666      	mov	r6, ip
 80005b6:	e00e      	b.n	80005d6 <__udivmoddi4+0xda>
 80005b8:	42ab      	cmp	r3, r5
 80005ba:	d101      	bne.n	80005c0 <__udivmoddi4+0xc4>
 80005bc:	42a2      	cmp	r2, r4
 80005be:	d80c      	bhi.n	80005da <__udivmoddi4+0xde>
 80005c0:	1aa4      	subs	r4, r4, r2
 80005c2:	419d      	sbcs	r5, r3
 80005c4:	2001      	movs	r0, #1
 80005c6:	1924      	adds	r4, r4, r4
 80005c8:	416d      	adcs	r5, r5
 80005ca:	2100      	movs	r1, #0
 80005cc:	3e01      	subs	r6, #1
 80005ce:	1824      	adds	r4, r4, r0
 80005d0:	414d      	adcs	r5, r1
 80005d2:	2e00      	cmp	r6, #0
 80005d4:	d006      	beq.n	80005e4 <__udivmoddi4+0xe8>
 80005d6:	42ab      	cmp	r3, r5
 80005d8:	d9ee      	bls.n	80005b8 <__udivmoddi4+0xbc>
 80005da:	3e01      	subs	r6, #1
 80005dc:	1924      	adds	r4, r4, r4
 80005de:	416d      	adcs	r5, r5
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d1f8      	bne.n	80005d6 <__udivmoddi4+0xda>
 80005e4:	9800      	ldr	r0, [sp, #0]
 80005e6:	9901      	ldr	r1, [sp, #4]
 80005e8:	4653      	mov	r3, sl
 80005ea:	1900      	adds	r0, r0, r4
 80005ec:	4169      	adcs	r1, r5
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	db23      	blt.n	800063a <__udivmoddi4+0x13e>
 80005f2:	002b      	movs	r3, r5
 80005f4:	4652      	mov	r2, sl
 80005f6:	40d3      	lsrs	r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	4664      	mov	r4, ip
 80005fc:	40e2      	lsrs	r2, r4
 80005fe:	001c      	movs	r4, r3
 8000600:	4653      	mov	r3, sl
 8000602:	0015      	movs	r5, r2
 8000604:	2b00      	cmp	r3, #0
 8000606:	db2d      	blt.n	8000664 <__udivmoddi4+0x168>
 8000608:	0026      	movs	r6, r4
 800060a:	4657      	mov	r7, sl
 800060c:	40be      	lsls	r6, r7
 800060e:	0033      	movs	r3, r6
 8000610:	0026      	movs	r6, r4
 8000612:	4667      	mov	r7, ip
 8000614:	40be      	lsls	r6, r7
 8000616:	0032      	movs	r2, r6
 8000618:	1a80      	subs	r0, r0, r2
 800061a:	4199      	sbcs	r1, r3
 800061c:	9000      	str	r0, [sp, #0]
 800061e:	9101      	str	r1, [sp, #4]
 8000620:	e7ac      	b.n	800057c <__udivmoddi4+0x80>
 8000622:	4662      	mov	r2, ip
 8000624:	2320      	movs	r3, #32
 8000626:	1a9b      	subs	r3, r3, r2
 8000628:	464a      	mov	r2, r9
 800062a:	40da      	lsrs	r2, r3
 800062c:	4661      	mov	r1, ip
 800062e:	0013      	movs	r3, r2
 8000630:	4642      	mov	r2, r8
 8000632:	408a      	lsls	r2, r1
 8000634:	0017      	movs	r7, r2
 8000636:	431f      	orrs	r7, r3
 8000638:	e780      	b.n	800053c <__udivmoddi4+0x40>
 800063a:	4662      	mov	r2, ip
 800063c:	2320      	movs	r3, #32
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	002a      	movs	r2, r5
 8000642:	4666      	mov	r6, ip
 8000644:	409a      	lsls	r2, r3
 8000646:	0023      	movs	r3, r4
 8000648:	40f3      	lsrs	r3, r6
 800064a:	4313      	orrs	r3, r2
 800064c:	e7d4      	b.n	80005f8 <__udivmoddi4+0xfc>
 800064e:	4662      	mov	r2, ip
 8000650:	2320      	movs	r3, #32
 8000652:	2100      	movs	r1, #0
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	2200      	movs	r2, #0
 8000658:	9100      	str	r1, [sp, #0]
 800065a:	9201      	str	r2, [sp, #4]
 800065c:	2201      	movs	r2, #1
 800065e:	40da      	lsrs	r2, r3
 8000660:	9201      	str	r2, [sp, #4]
 8000662:	e780      	b.n	8000566 <__udivmoddi4+0x6a>
 8000664:	2320      	movs	r3, #32
 8000666:	4662      	mov	r2, ip
 8000668:	0026      	movs	r6, r4
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	40de      	lsrs	r6, r3
 800066e:	002f      	movs	r7, r5
 8000670:	46b0      	mov	r8, r6
 8000672:	4666      	mov	r6, ip
 8000674:	40b7      	lsls	r7, r6
 8000676:	4646      	mov	r6, r8
 8000678:	003b      	movs	r3, r7
 800067a:	4333      	orrs	r3, r6
 800067c:	e7c8      	b.n	8000610 <__udivmoddi4+0x114>
 800067e:	46c0      	nop			; (mov r8, r8)

08000680 <__aeabi_dadd>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	4646      	mov	r6, r8
 8000686:	46d6      	mov	lr, sl
 8000688:	000c      	movs	r4, r1
 800068a:	0309      	lsls	r1, r1, #12
 800068c:	b5c0      	push	{r6, r7, lr}
 800068e:	0a49      	lsrs	r1, r1, #9
 8000690:	0f47      	lsrs	r7, r0, #29
 8000692:	005e      	lsls	r6, r3, #1
 8000694:	4339      	orrs	r1, r7
 8000696:	031f      	lsls	r7, r3, #12
 8000698:	0fdb      	lsrs	r3, r3, #31
 800069a:	469c      	mov	ip, r3
 800069c:	0065      	lsls	r5, r4, #1
 800069e:	0a7b      	lsrs	r3, r7, #9
 80006a0:	0f57      	lsrs	r7, r2, #29
 80006a2:	431f      	orrs	r7, r3
 80006a4:	0d6d      	lsrs	r5, r5, #21
 80006a6:	0fe4      	lsrs	r4, r4, #31
 80006a8:	0d76      	lsrs	r6, r6, #21
 80006aa:	46a1      	mov	r9, r4
 80006ac:	00c0      	lsls	r0, r0, #3
 80006ae:	46b8      	mov	r8, r7
 80006b0:	00d2      	lsls	r2, r2, #3
 80006b2:	1bab      	subs	r3, r5, r6
 80006b4:	4564      	cmp	r4, ip
 80006b6:	d07b      	beq.n	80007b0 <__aeabi_dadd+0x130>
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	dd5f      	ble.n	800077c <__aeabi_dadd+0xfc>
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d000      	beq.n	80006c2 <__aeabi_dadd+0x42>
 80006c0:	e0a4      	b.n	800080c <__aeabi_dadd+0x18c>
 80006c2:	003e      	movs	r6, r7
 80006c4:	4316      	orrs	r6, r2
 80006c6:	d100      	bne.n	80006ca <__aeabi_dadd+0x4a>
 80006c8:	e112      	b.n	80008f0 <__aeabi_dadd+0x270>
 80006ca:	1e5e      	subs	r6, r3, #1
 80006cc:	2e00      	cmp	r6, #0
 80006ce:	d000      	beq.n	80006d2 <__aeabi_dadd+0x52>
 80006d0:	e19e      	b.n	8000a10 <__aeabi_dadd+0x390>
 80006d2:	1a87      	subs	r7, r0, r2
 80006d4:	4643      	mov	r3, r8
 80006d6:	42b8      	cmp	r0, r7
 80006d8:	4180      	sbcs	r0, r0
 80006da:	2501      	movs	r5, #1
 80006dc:	1ac9      	subs	r1, r1, r3
 80006de:	4240      	negs	r0, r0
 80006e0:	1a09      	subs	r1, r1, r0
 80006e2:	020b      	lsls	r3, r1, #8
 80006e4:	d400      	bmi.n	80006e8 <__aeabi_dadd+0x68>
 80006e6:	e131      	b.n	800094c <__aeabi_dadd+0x2cc>
 80006e8:	0249      	lsls	r1, r1, #9
 80006ea:	0a4e      	lsrs	r6, r1, #9
 80006ec:	2e00      	cmp	r6, #0
 80006ee:	d100      	bne.n	80006f2 <__aeabi_dadd+0x72>
 80006f0:	e16e      	b.n	80009d0 <__aeabi_dadd+0x350>
 80006f2:	0030      	movs	r0, r6
 80006f4:	f001 fd46 	bl	8002184 <__clzsi2>
 80006f8:	0003      	movs	r3, r0
 80006fa:	3b08      	subs	r3, #8
 80006fc:	2b1f      	cmp	r3, #31
 80006fe:	dd00      	ble.n	8000702 <__aeabi_dadd+0x82>
 8000700:	e161      	b.n	80009c6 <__aeabi_dadd+0x346>
 8000702:	2220      	movs	r2, #32
 8000704:	0039      	movs	r1, r7
 8000706:	1ad2      	subs	r2, r2, r3
 8000708:	409e      	lsls	r6, r3
 800070a:	40d1      	lsrs	r1, r2
 800070c:	409f      	lsls	r7, r3
 800070e:	430e      	orrs	r6, r1
 8000710:	429d      	cmp	r5, r3
 8000712:	dd00      	ble.n	8000716 <__aeabi_dadd+0x96>
 8000714:	e151      	b.n	80009ba <__aeabi_dadd+0x33a>
 8000716:	1b5d      	subs	r5, r3, r5
 8000718:	1c6b      	adds	r3, r5, #1
 800071a:	2b1f      	cmp	r3, #31
 800071c:	dd00      	ble.n	8000720 <__aeabi_dadd+0xa0>
 800071e:	e17c      	b.n	8000a1a <__aeabi_dadd+0x39a>
 8000720:	2120      	movs	r1, #32
 8000722:	1ac9      	subs	r1, r1, r3
 8000724:	003d      	movs	r5, r7
 8000726:	0030      	movs	r0, r6
 8000728:	408f      	lsls	r7, r1
 800072a:	4088      	lsls	r0, r1
 800072c:	40dd      	lsrs	r5, r3
 800072e:	1e79      	subs	r1, r7, #1
 8000730:	418f      	sbcs	r7, r1
 8000732:	0031      	movs	r1, r6
 8000734:	2207      	movs	r2, #7
 8000736:	4328      	orrs	r0, r5
 8000738:	40d9      	lsrs	r1, r3
 800073a:	2500      	movs	r5, #0
 800073c:	4307      	orrs	r7, r0
 800073e:	403a      	ands	r2, r7
 8000740:	2a00      	cmp	r2, #0
 8000742:	d009      	beq.n	8000758 <__aeabi_dadd+0xd8>
 8000744:	230f      	movs	r3, #15
 8000746:	403b      	ands	r3, r7
 8000748:	2b04      	cmp	r3, #4
 800074a:	d005      	beq.n	8000758 <__aeabi_dadd+0xd8>
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	42bb      	cmp	r3, r7
 8000750:	41bf      	sbcs	r7, r7
 8000752:	427f      	negs	r7, r7
 8000754:	19c9      	adds	r1, r1, r7
 8000756:	001f      	movs	r7, r3
 8000758:	020b      	lsls	r3, r1, #8
 800075a:	d400      	bmi.n	800075e <__aeabi_dadd+0xde>
 800075c:	e226      	b.n	8000bac <__aeabi_dadd+0x52c>
 800075e:	1c6a      	adds	r2, r5, #1
 8000760:	4bc6      	ldr	r3, [pc, #792]	; (8000a7c <__aeabi_dadd+0x3fc>)
 8000762:	0555      	lsls	r5, r2, #21
 8000764:	0d6d      	lsrs	r5, r5, #21
 8000766:	429a      	cmp	r2, r3
 8000768:	d100      	bne.n	800076c <__aeabi_dadd+0xec>
 800076a:	e106      	b.n	800097a <__aeabi_dadd+0x2fa>
 800076c:	4ac4      	ldr	r2, [pc, #784]	; (8000a80 <__aeabi_dadd+0x400>)
 800076e:	08ff      	lsrs	r7, r7, #3
 8000770:	400a      	ands	r2, r1
 8000772:	0753      	lsls	r3, r2, #29
 8000774:	0252      	lsls	r2, r2, #9
 8000776:	433b      	orrs	r3, r7
 8000778:	0b12      	lsrs	r2, r2, #12
 800077a:	e08e      	b.n	800089a <__aeabi_dadd+0x21a>
 800077c:	2b00      	cmp	r3, #0
 800077e:	d000      	beq.n	8000782 <__aeabi_dadd+0x102>
 8000780:	e0b8      	b.n	80008f4 <__aeabi_dadd+0x274>
 8000782:	1c6b      	adds	r3, r5, #1
 8000784:	055b      	lsls	r3, r3, #21
 8000786:	0d5b      	lsrs	r3, r3, #21
 8000788:	2b01      	cmp	r3, #1
 800078a:	dc00      	bgt.n	800078e <__aeabi_dadd+0x10e>
 800078c:	e130      	b.n	80009f0 <__aeabi_dadd+0x370>
 800078e:	1a87      	subs	r7, r0, r2
 8000790:	4643      	mov	r3, r8
 8000792:	42b8      	cmp	r0, r7
 8000794:	41b6      	sbcs	r6, r6
 8000796:	1acb      	subs	r3, r1, r3
 8000798:	4276      	negs	r6, r6
 800079a:	1b9e      	subs	r6, r3, r6
 800079c:	0233      	lsls	r3, r6, #8
 800079e:	d500      	bpl.n	80007a2 <__aeabi_dadd+0x122>
 80007a0:	e14c      	b.n	8000a3c <__aeabi_dadd+0x3bc>
 80007a2:	003b      	movs	r3, r7
 80007a4:	4333      	orrs	r3, r6
 80007a6:	d1a1      	bne.n	80006ec <__aeabi_dadd+0x6c>
 80007a8:	2200      	movs	r2, #0
 80007aa:	2400      	movs	r4, #0
 80007ac:	2500      	movs	r5, #0
 80007ae:	e070      	b.n	8000892 <__aeabi_dadd+0x212>
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	dc00      	bgt.n	80007b6 <__aeabi_dadd+0x136>
 80007b4:	e0e5      	b.n	8000982 <__aeabi_dadd+0x302>
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_dadd+0x13c>
 80007ba:	e083      	b.n	80008c4 <__aeabi_dadd+0x244>
 80007bc:	4eaf      	ldr	r6, [pc, #700]	; (8000a7c <__aeabi_dadd+0x3fc>)
 80007be:	42b5      	cmp	r5, r6
 80007c0:	d060      	beq.n	8000884 <__aeabi_dadd+0x204>
 80007c2:	2680      	movs	r6, #128	; 0x80
 80007c4:	0436      	lsls	r6, r6, #16
 80007c6:	4337      	orrs	r7, r6
 80007c8:	46b8      	mov	r8, r7
 80007ca:	2b38      	cmp	r3, #56	; 0x38
 80007cc:	dc00      	bgt.n	80007d0 <__aeabi_dadd+0x150>
 80007ce:	e13e      	b.n	8000a4e <__aeabi_dadd+0x3ce>
 80007d0:	4643      	mov	r3, r8
 80007d2:	4313      	orrs	r3, r2
 80007d4:	001f      	movs	r7, r3
 80007d6:	1e7a      	subs	r2, r7, #1
 80007d8:	4197      	sbcs	r7, r2
 80007da:	183f      	adds	r7, r7, r0
 80007dc:	4287      	cmp	r7, r0
 80007de:	4180      	sbcs	r0, r0
 80007e0:	4240      	negs	r0, r0
 80007e2:	1809      	adds	r1, r1, r0
 80007e4:	020b      	lsls	r3, r1, #8
 80007e6:	d400      	bmi.n	80007ea <__aeabi_dadd+0x16a>
 80007e8:	e0b0      	b.n	800094c <__aeabi_dadd+0x2cc>
 80007ea:	4ba4      	ldr	r3, [pc, #656]	; (8000a7c <__aeabi_dadd+0x3fc>)
 80007ec:	3501      	adds	r5, #1
 80007ee:	429d      	cmp	r5, r3
 80007f0:	d100      	bne.n	80007f4 <__aeabi_dadd+0x174>
 80007f2:	e0c3      	b.n	800097c <__aeabi_dadd+0x2fc>
 80007f4:	4aa2      	ldr	r2, [pc, #648]	; (8000a80 <__aeabi_dadd+0x400>)
 80007f6:	087b      	lsrs	r3, r7, #1
 80007f8:	400a      	ands	r2, r1
 80007fa:	2101      	movs	r1, #1
 80007fc:	400f      	ands	r7, r1
 80007fe:	431f      	orrs	r7, r3
 8000800:	0851      	lsrs	r1, r2, #1
 8000802:	07d3      	lsls	r3, r2, #31
 8000804:	2207      	movs	r2, #7
 8000806:	431f      	orrs	r7, r3
 8000808:	403a      	ands	r2, r7
 800080a:	e799      	b.n	8000740 <__aeabi_dadd+0xc0>
 800080c:	4e9b      	ldr	r6, [pc, #620]	; (8000a7c <__aeabi_dadd+0x3fc>)
 800080e:	42b5      	cmp	r5, r6
 8000810:	d038      	beq.n	8000884 <__aeabi_dadd+0x204>
 8000812:	2680      	movs	r6, #128	; 0x80
 8000814:	0436      	lsls	r6, r6, #16
 8000816:	4337      	orrs	r7, r6
 8000818:	46b8      	mov	r8, r7
 800081a:	2b38      	cmp	r3, #56	; 0x38
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x1a0>
 800081e:	e0dc      	b.n	80009da <__aeabi_dadd+0x35a>
 8000820:	2b1f      	cmp	r3, #31
 8000822:	dc00      	bgt.n	8000826 <__aeabi_dadd+0x1a6>
 8000824:	e130      	b.n	8000a88 <__aeabi_dadd+0x408>
 8000826:	001e      	movs	r6, r3
 8000828:	4647      	mov	r7, r8
 800082a:	3e20      	subs	r6, #32
 800082c:	40f7      	lsrs	r7, r6
 800082e:	46bc      	mov	ip, r7
 8000830:	2b20      	cmp	r3, #32
 8000832:	d004      	beq.n	800083e <__aeabi_dadd+0x1be>
 8000834:	2640      	movs	r6, #64	; 0x40
 8000836:	1af3      	subs	r3, r6, r3
 8000838:	4646      	mov	r6, r8
 800083a:	409e      	lsls	r6, r3
 800083c:	4332      	orrs	r2, r6
 800083e:	0017      	movs	r7, r2
 8000840:	4663      	mov	r3, ip
 8000842:	1e7a      	subs	r2, r7, #1
 8000844:	4197      	sbcs	r7, r2
 8000846:	431f      	orrs	r7, r3
 8000848:	e0cc      	b.n	80009e4 <__aeabi_dadd+0x364>
 800084a:	2b00      	cmp	r3, #0
 800084c:	d100      	bne.n	8000850 <__aeabi_dadd+0x1d0>
 800084e:	e204      	b.n	8000c5a <__aeabi_dadd+0x5da>
 8000850:	4643      	mov	r3, r8
 8000852:	4313      	orrs	r3, r2
 8000854:	d100      	bne.n	8000858 <__aeabi_dadd+0x1d8>
 8000856:	e159      	b.n	8000b0c <__aeabi_dadd+0x48c>
 8000858:	074b      	lsls	r3, r1, #29
 800085a:	08c0      	lsrs	r0, r0, #3
 800085c:	4318      	orrs	r0, r3
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	08c9      	lsrs	r1, r1, #3
 8000862:	031b      	lsls	r3, r3, #12
 8000864:	4219      	tst	r1, r3
 8000866:	d008      	beq.n	800087a <__aeabi_dadd+0x1fa>
 8000868:	4645      	mov	r5, r8
 800086a:	08ed      	lsrs	r5, r5, #3
 800086c:	421d      	tst	r5, r3
 800086e:	d104      	bne.n	800087a <__aeabi_dadd+0x1fa>
 8000870:	4643      	mov	r3, r8
 8000872:	08d0      	lsrs	r0, r2, #3
 8000874:	0759      	lsls	r1, r3, #29
 8000876:	4308      	orrs	r0, r1
 8000878:	0029      	movs	r1, r5
 800087a:	0f42      	lsrs	r2, r0, #29
 800087c:	00c9      	lsls	r1, r1, #3
 800087e:	4d7f      	ldr	r5, [pc, #508]	; (8000a7c <__aeabi_dadd+0x3fc>)
 8000880:	4311      	orrs	r1, r2
 8000882:	00c0      	lsls	r0, r0, #3
 8000884:	074b      	lsls	r3, r1, #29
 8000886:	08ca      	lsrs	r2, r1, #3
 8000888:	497c      	ldr	r1, [pc, #496]	; (8000a7c <__aeabi_dadd+0x3fc>)
 800088a:	08c0      	lsrs	r0, r0, #3
 800088c:	4303      	orrs	r3, r0
 800088e:	428d      	cmp	r5, r1
 8000890:	d068      	beq.n	8000964 <__aeabi_dadd+0x2e4>
 8000892:	0312      	lsls	r2, r2, #12
 8000894:	056d      	lsls	r5, r5, #21
 8000896:	0b12      	lsrs	r2, r2, #12
 8000898:	0d6d      	lsrs	r5, r5, #21
 800089a:	2100      	movs	r1, #0
 800089c:	0312      	lsls	r2, r2, #12
 800089e:	0018      	movs	r0, r3
 80008a0:	0b13      	lsrs	r3, r2, #12
 80008a2:	0d0a      	lsrs	r2, r1, #20
 80008a4:	0512      	lsls	r2, r2, #20
 80008a6:	431a      	orrs	r2, r3
 80008a8:	4b76      	ldr	r3, [pc, #472]	; (8000a84 <__aeabi_dadd+0x404>)
 80008aa:	052d      	lsls	r5, r5, #20
 80008ac:	4013      	ands	r3, r2
 80008ae:	432b      	orrs	r3, r5
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	07e4      	lsls	r4, r4, #31
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	4323      	orrs	r3, r4
 80008b8:	0019      	movs	r1, r3
 80008ba:	bc1c      	pop	{r2, r3, r4}
 80008bc:	4690      	mov	r8, r2
 80008be:	4699      	mov	r9, r3
 80008c0:	46a2      	mov	sl, r4
 80008c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c4:	003e      	movs	r6, r7
 80008c6:	4316      	orrs	r6, r2
 80008c8:	d012      	beq.n	80008f0 <__aeabi_dadd+0x270>
 80008ca:	1e5e      	subs	r6, r3, #1
 80008cc:	2e00      	cmp	r6, #0
 80008ce:	d000      	beq.n	80008d2 <__aeabi_dadd+0x252>
 80008d0:	e100      	b.n	8000ad4 <__aeabi_dadd+0x454>
 80008d2:	1887      	adds	r7, r0, r2
 80008d4:	4287      	cmp	r7, r0
 80008d6:	4180      	sbcs	r0, r0
 80008d8:	4441      	add	r1, r8
 80008da:	4240      	negs	r0, r0
 80008dc:	1809      	adds	r1, r1, r0
 80008de:	2501      	movs	r5, #1
 80008e0:	020b      	lsls	r3, r1, #8
 80008e2:	d533      	bpl.n	800094c <__aeabi_dadd+0x2cc>
 80008e4:	2502      	movs	r5, #2
 80008e6:	e785      	b.n	80007f4 <__aeabi_dadd+0x174>
 80008e8:	4664      	mov	r4, ip
 80008ea:	0033      	movs	r3, r6
 80008ec:	4641      	mov	r1, r8
 80008ee:	0010      	movs	r0, r2
 80008f0:	001d      	movs	r5, r3
 80008f2:	e7c7      	b.n	8000884 <__aeabi_dadd+0x204>
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d000      	beq.n	80008fa <__aeabi_dadd+0x27a>
 80008f8:	e0da      	b.n	8000ab0 <__aeabi_dadd+0x430>
 80008fa:	000c      	movs	r4, r1
 80008fc:	4304      	orrs	r4, r0
 80008fe:	d0f3      	beq.n	80008e8 <__aeabi_dadd+0x268>
 8000900:	1c5c      	adds	r4, r3, #1
 8000902:	d100      	bne.n	8000906 <__aeabi_dadd+0x286>
 8000904:	e19f      	b.n	8000c46 <__aeabi_dadd+0x5c6>
 8000906:	4c5d      	ldr	r4, [pc, #372]	; (8000a7c <__aeabi_dadd+0x3fc>)
 8000908:	42a6      	cmp	r6, r4
 800090a:	d100      	bne.n	800090e <__aeabi_dadd+0x28e>
 800090c:	e12f      	b.n	8000b6e <__aeabi_dadd+0x4ee>
 800090e:	43db      	mvns	r3, r3
 8000910:	2b38      	cmp	r3, #56	; 0x38
 8000912:	dd00      	ble.n	8000916 <__aeabi_dadd+0x296>
 8000914:	e166      	b.n	8000be4 <__aeabi_dadd+0x564>
 8000916:	2b1f      	cmp	r3, #31
 8000918:	dd00      	ble.n	800091c <__aeabi_dadd+0x29c>
 800091a:	e183      	b.n	8000c24 <__aeabi_dadd+0x5a4>
 800091c:	2420      	movs	r4, #32
 800091e:	0005      	movs	r5, r0
 8000920:	1ae4      	subs	r4, r4, r3
 8000922:	000f      	movs	r7, r1
 8000924:	40dd      	lsrs	r5, r3
 8000926:	40d9      	lsrs	r1, r3
 8000928:	40a0      	lsls	r0, r4
 800092a:	4643      	mov	r3, r8
 800092c:	40a7      	lsls	r7, r4
 800092e:	1a5b      	subs	r3, r3, r1
 8000930:	1e44      	subs	r4, r0, #1
 8000932:	41a0      	sbcs	r0, r4
 8000934:	4698      	mov	r8, r3
 8000936:	432f      	orrs	r7, r5
 8000938:	4338      	orrs	r0, r7
 800093a:	1a17      	subs	r7, r2, r0
 800093c:	42ba      	cmp	r2, r7
 800093e:	4192      	sbcs	r2, r2
 8000940:	4643      	mov	r3, r8
 8000942:	4252      	negs	r2, r2
 8000944:	1a99      	subs	r1, r3, r2
 8000946:	4664      	mov	r4, ip
 8000948:	0035      	movs	r5, r6
 800094a:	e6ca      	b.n	80006e2 <__aeabi_dadd+0x62>
 800094c:	2207      	movs	r2, #7
 800094e:	403a      	ands	r2, r7
 8000950:	2a00      	cmp	r2, #0
 8000952:	d000      	beq.n	8000956 <__aeabi_dadd+0x2d6>
 8000954:	e6f6      	b.n	8000744 <__aeabi_dadd+0xc4>
 8000956:	074b      	lsls	r3, r1, #29
 8000958:	08ca      	lsrs	r2, r1, #3
 800095a:	4948      	ldr	r1, [pc, #288]	; (8000a7c <__aeabi_dadd+0x3fc>)
 800095c:	08ff      	lsrs	r7, r7, #3
 800095e:	433b      	orrs	r3, r7
 8000960:	428d      	cmp	r5, r1
 8000962:	d196      	bne.n	8000892 <__aeabi_dadd+0x212>
 8000964:	0019      	movs	r1, r3
 8000966:	4311      	orrs	r1, r2
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x2ec>
 800096a:	e19e      	b.n	8000caa <__aeabi_dadd+0x62a>
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	0309      	lsls	r1, r1, #12
 8000970:	430a      	orrs	r2, r1
 8000972:	0312      	lsls	r2, r2, #12
 8000974:	0b12      	lsrs	r2, r2, #12
 8000976:	4d41      	ldr	r5, [pc, #260]	; (8000a7c <__aeabi_dadd+0x3fc>)
 8000978:	e78f      	b.n	800089a <__aeabi_dadd+0x21a>
 800097a:	0015      	movs	r5, r2
 800097c:	2200      	movs	r2, #0
 800097e:	2300      	movs	r3, #0
 8000980:	e78b      	b.n	800089a <__aeabi_dadd+0x21a>
 8000982:	2b00      	cmp	r3, #0
 8000984:	d000      	beq.n	8000988 <__aeabi_dadd+0x308>
 8000986:	e0c7      	b.n	8000b18 <__aeabi_dadd+0x498>
 8000988:	1c6b      	adds	r3, r5, #1
 800098a:	055f      	lsls	r7, r3, #21
 800098c:	0d7f      	lsrs	r7, r7, #21
 800098e:	2f01      	cmp	r7, #1
 8000990:	dc00      	bgt.n	8000994 <__aeabi_dadd+0x314>
 8000992:	e0f1      	b.n	8000b78 <__aeabi_dadd+0x4f8>
 8000994:	4d39      	ldr	r5, [pc, #228]	; (8000a7c <__aeabi_dadd+0x3fc>)
 8000996:	42ab      	cmp	r3, r5
 8000998:	d100      	bne.n	800099c <__aeabi_dadd+0x31c>
 800099a:	e0b9      	b.n	8000b10 <__aeabi_dadd+0x490>
 800099c:	1885      	adds	r5, r0, r2
 800099e:	000a      	movs	r2, r1
 80009a0:	4285      	cmp	r5, r0
 80009a2:	4189      	sbcs	r1, r1
 80009a4:	4442      	add	r2, r8
 80009a6:	4249      	negs	r1, r1
 80009a8:	1851      	adds	r1, r2, r1
 80009aa:	2207      	movs	r2, #7
 80009ac:	07cf      	lsls	r7, r1, #31
 80009ae:	086d      	lsrs	r5, r5, #1
 80009b0:	432f      	orrs	r7, r5
 80009b2:	0849      	lsrs	r1, r1, #1
 80009b4:	403a      	ands	r2, r7
 80009b6:	001d      	movs	r5, r3
 80009b8:	e6c2      	b.n	8000740 <__aeabi_dadd+0xc0>
 80009ba:	2207      	movs	r2, #7
 80009bc:	4930      	ldr	r1, [pc, #192]	; (8000a80 <__aeabi_dadd+0x400>)
 80009be:	1aed      	subs	r5, r5, r3
 80009c0:	4031      	ands	r1, r6
 80009c2:	403a      	ands	r2, r7
 80009c4:	e6bc      	b.n	8000740 <__aeabi_dadd+0xc0>
 80009c6:	003e      	movs	r6, r7
 80009c8:	3828      	subs	r0, #40	; 0x28
 80009ca:	4086      	lsls	r6, r0
 80009cc:	2700      	movs	r7, #0
 80009ce:	e69f      	b.n	8000710 <__aeabi_dadd+0x90>
 80009d0:	0038      	movs	r0, r7
 80009d2:	f001 fbd7 	bl	8002184 <__clzsi2>
 80009d6:	3020      	adds	r0, #32
 80009d8:	e68e      	b.n	80006f8 <__aeabi_dadd+0x78>
 80009da:	4643      	mov	r3, r8
 80009dc:	4313      	orrs	r3, r2
 80009de:	001f      	movs	r7, r3
 80009e0:	1e7a      	subs	r2, r7, #1
 80009e2:	4197      	sbcs	r7, r2
 80009e4:	1bc7      	subs	r7, r0, r7
 80009e6:	42b8      	cmp	r0, r7
 80009e8:	4180      	sbcs	r0, r0
 80009ea:	4240      	negs	r0, r0
 80009ec:	1a09      	subs	r1, r1, r0
 80009ee:	e678      	b.n	80006e2 <__aeabi_dadd+0x62>
 80009f0:	000e      	movs	r6, r1
 80009f2:	003b      	movs	r3, r7
 80009f4:	4306      	orrs	r6, r0
 80009f6:	4313      	orrs	r3, r2
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	d161      	bne.n	8000ac0 <__aeabi_dadd+0x440>
 80009fc:	2e00      	cmp	r6, #0
 80009fe:	d000      	beq.n	8000a02 <__aeabi_dadd+0x382>
 8000a00:	e0f4      	b.n	8000bec <__aeabi_dadd+0x56c>
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0x388>
 8000a06:	e11b      	b.n	8000c40 <__aeabi_dadd+0x5c0>
 8000a08:	4664      	mov	r4, ip
 8000a0a:	0039      	movs	r1, r7
 8000a0c:	0010      	movs	r0, r2
 8000a0e:	e739      	b.n	8000884 <__aeabi_dadd+0x204>
 8000a10:	4f1a      	ldr	r7, [pc, #104]	; (8000a7c <__aeabi_dadd+0x3fc>)
 8000a12:	42bb      	cmp	r3, r7
 8000a14:	d07a      	beq.n	8000b0c <__aeabi_dadd+0x48c>
 8000a16:	0033      	movs	r3, r6
 8000a18:	e6ff      	b.n	800081a <__aeabi_dadd+0x19a>
 8000a1a:	0030      	movs	r0, r6
 8000a1c:	3d1f      	subs	r5, #31
 8000a1e:	40e8      	lsrs	r0, r5
 8000a20:	2b20      	cmp	r3, #32
 8000a22:	d003      	beq.n	8000a2c <__aeabi_dadd+0x3ac>
 8000a24:	2140      	movs	r1, #64	; 0x40
 8000a26:	1acb      	subs	r3, r1, r3
 8000a28:	409e      	lsls	r6, r3
 8000a2a:	4337      	orrs	r7, r6
 8000a2c:	1e7b      	subs	r3, r7, #1
 8000a2e:	419f      	sbcs	r7, r3
 8000a30:	2207      	movs	r2, #7
 8000a32:	4307      	orrs	r7, r0
 8000a34:	403a      	ands	r2, r7
 8000a36:	2100      	movs	r1, #0
 8000a38:	2500      	movs	r5, #0
 8000a3a:	e789      	b.n	8000950 <__aeabi_dadd+0x2d0>
 8000a3c:	1a17      	subs	r7, r2, r0
 8000a3e:	4643      	mov	r3, r8
 8000a40:	42ba      	cmp	r2, r7
 8000a42:	41b6      	sbcs	r6, r6
 8000a44:	1a59      	subs	r1, r3, r1
 8000a46:	4276      	negs	r6, r6
 8000a48:	1b8e      	subs	r6, r1, r6
 8000a4a:	4664      	mov	r4, ip
 8000a4c:	e64e      	b.n	80006ec <__aeabi_dadd+0x6c>
 8000a4e:	2b1f      	cmp	r3, #31
 8000a50:	dd00      	ble.n	8000a54 <__aeabi_dadd+0x3d4>
 8000a52:	e0ad      	b.n	8000bb0 <__aeabi_dadd+0x530>
 8000a54:	2620      	movs	r6, #32
 8000a56:	4647      	mov	r7, r8
 8000a58:	1af6      	subs	r6, r6, r3
 8000a5a:	40b7      	lsls	r7, r6
 8000a5c:	46b9      	mov	r9, r7
 8000a5e:	0017      	movs	r7, r2
 8000a60:	46b2      	mov	sl, r6
 8000a62:	40df      	lsrs	r7, r3
 8000a64:	464e      	mov	r6, r9
 8000a66:	433e      	orrs	r6, r7
 8000a68:	0037      	movs	r7, r6
 8000a6a:	4656      	mov	r6, sl
 8000a6c:	40b2      	lsls	r2, r6
 8000a6e:	1e56      	subs	r6, r2, #1
 8000a70:	41b2      	sbcs	r2, r6
 8000a72:	4317      	orrs	r7, r2
 8000a74:	4642      	mov	r2, r8
 8000a76:	40da      	lsrs	r2, r3
 8000a78:	1889      	adds	r1, r1, r2
 8000a7a:	e6ae      	b.n	80007da <__aeabi_dadd+0x15a>
 8000a7c:	000007ff 	.word	0x000007ff
 8000a80:	ff7fffff 	.word	0xff7fffff
 8000a84:	800fffff 	.word	0x800fffff
 8000a88:	2620      	movs	r6, #32
 8000a8a:	4647      	mov	r7, r8
 8000a8c:	1af6      	subs	r6, r6, r3
 8000a8e:	40b7      	lsls	r7, r6
 8000a90:	46b9      	mov	r9, r7
 8000a92:	0017      	movs	r7, r2
 8000a94:	46b2      	mov	sl, r6
 8000a96:	40df      	lsrs	r7, r3
 8000a98:	464e      	mov	r6, r9
 8000a9a:	433e      	orrs	r6, r7
 8000a9c:	0037      	movs	r7, r6
 8000a9e:	4656      	mov	r6, sl
 8000aa0:	40b2      	lsls	r2, r6
 8000aa2:	1e56      	subs	r6, r2, #1
 8000aa4:	41b2      	sbcs	r2, r6
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	4642      	mov	r2, r8
 8000aaa:	40da      	lsrs	r2, r3
 8000aac:	1a89      	subs	r1, r1, r2
 8000aae:	e799      	b.n	80009e4 <__aeabi_dadd+0x364>
 8000ab0:	4c7f      	ldr	r4, [pc, #508]	; (8000cb0 <__aeabi_dadd+0x630>)
 8000ab2:	42a6      	cmp	r6, r4
 8000ab4:	d05b      	beq.n	8000b6e <__aeabi_dadd+0x4ee>
 8000ab6:	2480      	movs	r4, #128	; 0x80
 8000ab8:	0424      	lsls	r4, r4, #16
 8000aba:	425b      	negs	r3, r3
 8000abc:	4321      	orrs	r1, r4
 8000abe:	e727      	b.n	8000910 <__aeabi_dadd+0x290>
 8000ac0:	2e00      	cmp	r6, #0
 8000ac2:	d10c      	bne.n	8000ade <__aeabi_dadd+0x45e>
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dadd+0x44a>
 8000ac8:	e0cb      	b.n	8000c62 <__aeabi_dadd+0x5e2>
 8000aca:	4664      	mov	r4, ip
 8000acc:	0039      	movs	r1, r7
 8000ace:	0010      	movs	r0, r2
 8000ad0:	4d77      	ldr	r5, [pc, #476]	; (8000cb0 <__aeabi_dadd+0x630>)
 8000ad2:	e6d7      	b.n	8000884 <__aeabi_dadd+0x204>
 8000ad4:	4f76      	ldr	r7, [pc, #472]	; (8000cb0 <__aeabi_dadd+0x630>)
 8000ad6:	42bb      	cmp	r3, r7
 8000ad8:	d018      	beq.n	8000b0c <__aeabi_dadd+0x48c>
 8000ada:	0033      	movs	r3, r6
 8000adc:	e675      	b.n	80007ca <__aeabi_dadd+0x14a>
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d014      	beq.n	8000b0c <__aeabi_dadd+0x48c>
 8000ae2:	074b      	lsls	r3, r1, #29
 8000ae4:	08c0      	lsrs	r0, r0, #3
 8000ae6:	4318      	orrs	r0, r3
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	08c9      	lsrs	r1, r1, #3
 8000aec:	031b      	lsls	r3, r3, #12
 8000aee:	4219      	tst	r1, r3
 8000af0:	d007      	beq.n	8000b02 <__aeabi_dadd+0x482>
 8000af2:	08fc      	lsrs	r4, r7, #3
 8000af4:	421c      	tst	r4, r3
 8000af6:	d104      	bne.n	8000b02 <__aeabi_dadd+0x482>
 8000af8:	0779      	lsls	r1, r7, #29
 8000afa:	08d0      	lsrs	r0, r2, #3
 8000afc:	4308      	orrs	r0, r1
 8000afe:	46e1      	mov	r9, ip
 8000b00:	0021      	movs	r1, r4
 8000b02:	464c      	mov	r4, r9
 8000b04:	0f42      	lsrs	r2, r0, #29
 8000b06:	00c9      	lsls	r1, r1, #3
 8000b08:	4311      	orrs	r1, r2
 8000b0a:	00c0      	lsls	r0, r0, #3
 8000b0c:	4d68      	ldr	r5, [pc, #416]	; (8000cb0 <__aeabi_dadd+0x630>)
 8000b0e:	e6b9      	b.n	8000884 <__aeabi_dadd+0x204>
 8000b10:	001d      	movs	r5, r3
 8000b12:	2200      	movs	r2, #0
 8000b14:	2300      	movs	r3, #0
 8000b16:	e6c0      	b.n	800089a <__aeabi_dadd+0x21a>
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d15b      	bne.n	8000bd4 <__aeabi_dadd+0x554>
 8000b1c:	000d      	movs	r5, r1
 8000b1e:	4305      	orrs	r5, r0
 8000b20:	d100      	bne.n	8000b24 <__aeabi_dadd+0x4a4>
 8000b22:	e6e2      	b.n	80008ea <__aeabi_dadd+0x26a>
 8000b24:	1c5d      	adds	r5, r3, #1
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dadd+0x4aa>
 8000b28:	e0b0      	b.n	8000c8c <__aeabi_dadd+0x60c>
 8000b2a:	4d61      	ldr	r5, [pc, #388]	; (8000cb0 <__aeabi_dadd+0x630>)
 8000b2c:	42ae      	cmp	r6, r5
 8000b2e:	d01f      	beq.n	8000b70 <__aeabi_dadd+0x4f0>
 8000b30:	43db      	mvns	r3, r3
 8000b32:	2b38      	cmp	r3, #56	; 0x38
 8000b34:	dc71      	bgt.n	8000c1a <__aeabi_dadd+0x59a>
 8000b36:	2b1f      	cmp	r3, #31
 8000b38:	dd00      	ble.n	8000b3c <__aeabi_dadd+0x4bc>
 8000b3a:	e096      	b.n	8000c6a <__aeabi_dadd+0x5ea>
 8000b3c:	2520      	movs	r5, #32
 8000b3e:	000f      	movs	r7, r1
 8000b40:	1aed      	subs	r5, r5, r3
 8000b42:	40af      	lsls	r7, r5
 8000b44:	46b9      	mov	r9, r7
 8000b46:	0007      	movs	r7, r0
 8000b48:	46aa      	mov	sl, r5
 8000b4a:	40df      	lsrs	r7, r3
 8000b4c:	464d      	mov	r5, r9
 8000b4e:	433d      	orrs	r5, r7
 8000b50:	002f      	movs	r7, r5
 8000b52:	4655      	mov	r5, sl
 8000b54:	40a8      	lsls	r0, r5
 8000b56:	40d9      	lsrs	r1, r3
 8000b58:	1e45      	subs	r5, r0, #1
 8000b5a:	41a8      	sbcs	r0, r5
 8000b5c:	4488      	add	r8, r1
 8000b5e:	4307      	orrs	r7, r0
 8000b60:	18bf      	adds	r7, r7, r2
 8000b62:	4297      	cmp	r7, r2
 8000b64:	4192      	sbcs	r2, r2
 8000b66:	4251      	negs	r1, r2
 8000b68:	4441      	add	r1, r8
 8000b6a:	0035      	movs	r5, r6
 8000b6c:	e63a      	b.n	80007e4 <__aeabi_dadd+0x164>
 8000b6e:	4664      	mov	r4, ip
 8000b70:	0035      	movs	r5, r6
 8000b72:	4641      	mov	r1, r8
 8000b74:	0010      	movs	r0, r2
 8000b76:	e685      	b.n	8000884 <__aeabi_dadd+0x204>
 8000b78:	000b      	movs	r3, r1
 8000b7a:	4303      	orrs	r3, r0
 8000b7c:	2d00      	cmp	r5, #0
 8000b7e:	d000      	beq.n	8000b82 <__aeabi_dadd+0x502>
 8000b80:	e663      	b.n	800084a <__aeabi_dadd+0x1ca>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0f5      	beq.n	8000b72 <__aeabi_dadd+0x4f2>
 8000b86:	4643      	mov	r3, r8
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_dadd+0x50e>
 8000b8c:	e67a      	b.n	8000884 <__aeabi_dadd+0x204>
 8000b8e:	1887      	adds	r7, r0, r2
 8000b90:	4287      	cmp	r7, r0
 8000b92:	4180      	sbcs	r0, r0
 8000b94:	2207      	movs	r2, #7
 8000b96:	4441      	add	r1, r8
 8000b98:	4240      	negs	r0, r0
 8000b9a:	1809      	adds	r1, r1, r0
 8000b9c:	403a      	ands	r2, r7
 8000b9e:	020b      	lsls	r3, r1, #8
 8000ba0:	d400      	bmi.n	8000ba4 <__aeabi_dadd+0x524>
 8000ba2:	e6d5      	b.n	8000950 <__aeabi_dadd+0x2d0>
 8000ba4:	4b43      	ldr	r3, [pc, #268]	; (8000cb4 <__aeabi_dadd+0x634>)
 8000ba6:	3501      	adds	r5, #1
 8000ba8:	4019      	ands	r1, r3
 8000baa:	e5c9      	b.n	8000740 <__aeabi_dadd+0xc0>
 8000bac:	0038      	movs	r0, r7
 8000bae:	e669      	b.n	8000884 <__aeabi_dadd+0x204>
 8000bb0:	001e      	movs	r6, r3
 8000bb2:	4647      	mov	r7, r8
 8000bb4:	3e20      	subs	r6, #32
 8000bb6:	40f7      	lsrs	r7, r6
 8000bb8:	46bc      	mov	ip, r7
 8000bba:	2b20      	cmp	r3, #32
 8000bbc:	d004      	beq.n	8000bc8 <__aeabi_dadd+0x548>
 8000bbe:	2640      	movs	r6, #64	; 0x40
 8000bc0:	1af3      	subs	r3, r6, r3
 8000bc2:	4646      	mov	r6, r8
 8000bc4:	409e      	lsls	r6, r3
 8000bc6:	4332      	orrs	r2, r6
 8000bc8:	0017      	movs	r7, r2
 8000bca:	4663      	mov	r3, ip
 8000bcc:	1e7a      	subs	r2, r7, #1
 8000bce:	4197      	sbcs	r7, r2
 8000bd0:	431f      	orrs	r7, r3
 8000bd2:	e602      	b.n	80007da <__aeabi_dadd+0x15a>
 8000bd4:	4d36      	ldr	r5, [pc, #216]	; (8000cb0 <__aeabi_dadd+0x630>)
 8000bd6:	42ae      	cmp	r6, r5
 8000bd8:	d0ca      	beq.n	8000b70 <__aeabi_dadd+0x4f0>
 8000bda:	2580      	movs	r5, #128	; 0x80
 8000bdc:	042d      	lsls	r5, r5, #16
 8000bde:	425b      	negs	r3, r3
 8000be0:	4329      	orrs	r1, r5
 8000be2:	e7a6      	b.n	8000b32 <__aeabi_dadd+0x4b2>
 8000be4:	4308      	orrs	r0, r1
 8000be6:	1e41      	subs	r1, r0, #1
 8000be8:	4188      	sbcs	r0, r1
 8000bea:	e6a6      	b.n	800093a <__aeabi_dadd+0x2ba>
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dadd+0x572>
 8000bf0:	e648      	b.n	8000884 <__aeabi_dadd+0x204>
 8000bf2:	1a87      	subs	r7, r0, r2
 8000bf4:	4643      	mov	r3, r8
 8000bf6:	42b8      	cmp	r0, r7
 8000bf8:	41b6      	sbcs	r6, r6
 8000bfa:	1acb      	subs	r3, r1, r3
 8000bfc:	4276      	negs	r6, r6
 8000bfe:	1b9e      	subs	r6, r3, r6
 8000c00:	0233      	lsls	r3, r6, #8
 8000c02:	d54b      	bpl.n	8000c9c <__aeabi_dadd+0x61c>
 8000c04:	1a17      	subs	r7, r2, r0
 8000c06:	4643      	mov	r3, r8
 8000c08:	42ba      	cmp	r2, r7
 8000c0a:	4192      	sbcs	r2, r2
 8000c0c:	1a59      	subs	r1, r3, r1
 8000c0e:	4252      	negs	r2, r2
 8000c10:	1a89      	subs	r1, r1, r2
 8000c12:	2207      	movs	r2, #7
 8000c14:	4664      	mov	r4, ip
 8000c16:	403a      	ands	r2, r7
 8000c18:	e592      	b.n	8000740 <__aeabi_dadd+0xc0>
 8000c1a:	4301      	orrs	r1, r0
 8000c1c:	000f      	movs	r7, r1
 8000c1e:	1e79      	subs	r1, r7, #1
 8000c20:	418f      	sbcs	r7, r1
 8000c22:	e79d      	b.n	8000b60 <__aeabi_dadd+0x4e0>
 8000c24:	001c      	movs	r4, r3
 8000c26:	000f      	movs	r7, r1
 8000c28:	3c20      	subs	r4, #32
 8000c2a:	40e7      	lsrs	r7, r4
 8000c2c:	2b20      	cmp	r3, #32
 8000c2e:	d003      	beq.n	8000c38 <__aeabi_dadd+0x5b8>
 8000c30:	2440      	movs	r4, #64	; 0x40
 8000c32:	1ae3      	subs	r3, r4, r3
 8000c34:	4099      	lsls	r1, r3
 8000c36:	4308      	orrs	r0, r1
 8000c38:	1e41      	subs	r1, r0, #1
 8000c3a:	4188      	sbcs	r0, r1
 8000c3c:	4338      	orrs	r0, r7
 8000c3e:	e67c      	b.n	800093a <__aeabi_dadd+0x2ba>
 8000c40:	2200      	movs	r2, #0
 8000c42:	2400      	movs	r4, #0
 8000c44:	e625      	b.n	8000892 <__aeabi_dadd+0x212>
 8000c46:	1a17      	subs	r7, r2, r0
 8000c48:	4643      	mov	r3, r8
 8000c4a:	42ba      	cmp	r2, r7
 8000c4c:	4192      	sbcs	r2, r2
 8000c4e:	1a59      	subs	r1, r3, r1
 8000c50:	4252      	negs	r2, r2
 8000c52:	1a89      	subs	r1, r1, r2
 8000c54:	4664      	mov	r4, ip
 8000c56:	0035      	movs	r5, r6
 8000c58:	e543      	b.n	80006e2 <__aeabi_dadd+0x62>
 8000c5a:	4641      	mov	r1, r8
 8000c5c:	0010      	movs	r0, r2
 8000c5e:	4d14      	ldr	r5, [pc, #80]	; (8000cb0 <__aeabi_dadd+0x630>)
 8000c60:	e610      	b.n	8000884 <__aeabi_dadd+0x204>
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	2400      	movs	r4, #0
 8000c66:	0312      	lsls	r2, r2, #12
 8000c68:	e680      	b.n	800096c <__aeabi_dadd+0x2ec>
 8000c6a:	001d      	movs	r5, r3
 8000c6c:	000f      	movs	r7, r1
 8000c6e:	3d20      	subs	r5, #32
 8000c70:	40ef      	lsrs	r7, r5
 8000c72:	46bc      	mov	ip, r7
 8000c74:	2b20      	cmp	r3, #32
 8000c76:	d003      	beq.n	8000c80 <__aeabi_dadd+0x600>
 8000c78:	2540      	movs	r5, #64	; 0x40
 8000c7a:	1aeb      	subs	r3, r5, r3
 8000c7c:	4099      	lsls	r1, r3
 8000c7e:	4308      	orrs	r0, r1
 8000c80:	0007      	movs	r7, r0
 8000c82:	4663      	mov	r3, ip
 8000c84:	1e78      	subs	r0, r7, #1
 8000c86:	4187      	sbcs	r7, r0
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e769      	b.n	8000b60 <__aeabi_dadd+0x4e0>
 8000c8c:	1887      	adds	r7, r0, r2
 8000c8e:	4297      	cmp	r7, r2
 8000c90:	419b      	sbcs	r3, r3
 8000c92:	4441      	add	r1, r8
 8000c94:	425b      	negs	r3, r3
 8000c96:	18c9      	adds	r1, r1, r3
 8000c98:	0035      	movs	r5, r6
 8000c9a:	e5a3      	b.n	80007e4 <__aeabi_dadd+0x164>
 8000c9c:	003b      	movs	r3, r7
 8000c9e:	4333      	orrs	r3, r6
 8000ca0:	d0ce      	beq.n	8000c40 <__aeabi_dadd+0x5c0>
 8000ca2:	2207      	movs	r2, #7
 8000ca4:	0031      	movs	r1, r6
 8000ca6:	403a      	ands	r2, r7
 8000ca8:	e652      	b.n	8000950 <__aeabi_dadd+0x2d0>
 8000caa:	2300      	movs	r3, #0
 8000cac:	001a      	movs	r2, r3
 8000cae:	e5f4      	b.n	800089a <__aeabi_dadd+0x21a>
 8000cb0:	000007ff 	.word	0x000007ff
 8000cb4:	ff7fffff 	.word	0xff7fffff

08000cb8 <__aeabi_ddiv>:
 8000cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cba:	4657      	mov	r7, sl
 8000cbc:	46de      	mov	lr, fp
 8000cbe:	464e      	mov	r6, r9
 8000cc0:	4645      	mov	r5, r8
 8000cc2:	b5e0      	push	{r5, r6, r7, lr}
 8000cc4:	4683      	mov	fp, r0
 8000cc6:	0007      	movs	r7, r0
 8000cc8:	030e      	lsls	r6, r1, #12
 8000cca:	0048      	lsls	r0, r1, #1
 8000ccc:	b085      	sub	sp, #20
 8000cce:	4692      	mov	sl, r2
 8000cd0:	001c      	movs	r4, r3
 8000cd2:	0b36      	lsrs	r6, r6, #12
 8000cd4:	0d40      	lsrs	r0, r0, #21
 8000cd6:	0fcd      	lsrs	r5, r1, #31
 8000cd8:	2800      	cmp	r0, #0
 8000cda:	d100      	bne.n	8000cde <__aeabi_ddiv+0x26>
 8000cdc:	e09d      	b.n	8000e1a <__aeabi_ddiv+0x162>
 8000cde:	4b95      	ldr	r3, [pc, #596]	; (8000f34 <__aeabi_ddiv+0x27c>)
 8000ce0:	4298      	cmp	r0, r3
 8000ce2:	d039      	beq.n	8000d58 <__aeabi_ddiv+0xa0>
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	00f6      	lsls	r6, r6, #3
 8000ce8:	041b      	lsls	r3, r3, #16
 8000cea:	431e      	orrs	r6, r3
 8000cec:	4a92      	ldr	r2, [pc, #584]	; (8000f38 <__aeabi_ddiv+0x280>)
 8000cee:	0f7b      	lsrs	r3, r7, #29
 8000cf0:	4333      	orrs	r3, r6
 8000cf2:	4699      	mov	r9, r3
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	4463      	add	r3, ip
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	2600      	movs	r6, #0
 8000d00:	00ff      	lsls	r7, r7, #3
 8000d02:	9302      	str	r3, [sp, #8]
 8000d04:	0323      	lsls	r3, r4, #12
 8000d06:	0b1b      	lsrs	r3, r3, #12
 8000d08:	4698      	mov	r8, r3
 8000d0a:	0063      	lsls	r3, r4, #1
 8000d0c:	0fe4      	lsrs	r4, r4, #31
 8000d0e:	4652      	mov	r2, sl
 8000d10:	0d5b      	lsrs	r3, r3, #21
 8000d12:	9401      	str	r4, [sp, #4]
 8000d14:	d100      	bne.n	8000d18 <__aeabi_ddiv+0x60>
 8000d16:	e0b3      	b.n	8000e80 <__aeabi_ddiv+0x1c8>
 8000d18:	4986      	ldr	r1, [pc, #536]	; (8000f34 <__aeabi_ddiv+0x27c>)
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_ddiv+0x68>
 8000d1e:	e09e      	b.n	8000e5e <__aeabi_ddiv+0x1a6>
 8000d20:	4642      	mov	r2, r8
 8000d22:	00d1      	lsls	r1, r2, #3
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	0412      	lsls	r2, r2, #16
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	4651      	mov	r1, sl
 8000d2c:	0f49      	lsrs	r1, r1, #29
 8000d2e:	4311      	orrs	r1, r2
 8000d30:	468b      	mov	fp, r1
 8000d32:	4981      	ldr	r1, [pc, #516]	; (8000f38 <__aeabi_ddiv+0x280>)
 8000d34:	4652      	mov	r2, sl
 8000d36:	468c      	mov	ip, r1
 8000d38:	9900      	ldr	r1, [sp, #0]
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1acb      	subs	r3, r1, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	00d2      	lsls	r2, r2, #3
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	002b      	movs	r3, r5
 8000d46:	4063      	eors	r3, r4
 8000d48:	469a      	mov	sl, r3
 8000d4a:	2e0f      	cmp	r6, #15
 8000d4c:	d900      	bls.n	8000d50 <__aeabi_ddiv+0x98>
 8000d4e:	e105      	b.n	8000f5c <__aeabi_ddiv+0x2a4>
 8000d50:	4b7a      	ldr	r3, [pc, #488]	; (8000f3c <__aeabi_ddiv+0x284>)
 8000d52:	00b6      	lsls	r6, r6, #2
 8000d54:	599b      	ldr	r3, [r3, r6]
 8000d56:	469f      	mov	pc, r3
 8000d58:	465b      	mov	r3, fp
 8000d5a:	4333      	orrs	r3, r6
 8000d5c:	4699      	mov	r9, r3
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_ddiv+0xaa>
 8000d60:	e0b8      	b.n	8000ed4 <__aeabi_ddiv+0x21c>
 8000d62:	2302      	movs	r3, #2
 8000d64:	2608      	movs	r6, #8
 8000d66:	2700      	movs	r7, #0
 8000d68:	9000      	str	r0, [sp, #0]
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	e7ca      	b.n	8000d04 <__aeabi_ddiv+0x4c>
 8000d6e:	46cb      	mov	fp, r9
 8000d70:	003a      	movs	r2, r7
 8000d72:	9902      	ldr	r1, [sp, #8]
 8000d74:	9501      	str	r5, [sp, #4]
 8000d76:	9b01      	ldr	r3, [sp, #4]
 8000d78:	469a      	mov	sl, r3
 8000d7a:	2902      	cmp	r1, #2
 8000d7c:	d027      	beq.n	8000dce <__aeabi_ddiv+0x116>
 8000d7e:	2903      	cmp	r1, #3
 8000d80:	d100      	bne.n	8000d84 <__aeabi_ddiv+0xcc>
 8000d82:	e280      	b.n	8001286 <__aeabi_ddiv+0x5ce>
 8000d84:	2901      	cmp	r1, #1
 8000d86:	d044      	beq.n	8000e12 <__aeabi_ddiv+0x15a>
 8000d88:	496d      	ldr	r1, [pc, #436]	; (8000f40 <__aeabi_ddiv+0x288>)
 8000d8a:	9b00      	ldr	r3, [sp, #0]
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	4463      	add	r3, ip
 8000d90:	001c      	movs	r4, r3
 8000d92:	2c00      	cmp	r4, #0
 8000d94:	dd38      	ble.n	8000e08 <__aeabi_ddiv+0x150>
 8000d96:	0753      	lsls	r3, r2, #29
 8000d98:	d000      	beq.n	8000d9c <__aeabi_ddiv+0xe4>
 8000d9a:	e213      	b.n	80011c4 <__aeabi_ddiv+0x50c>
 8000d9c:	08d2      	lsrs	r2, r2, #3
 8000d9e:	465b      	mov	r3, fp
 8000da0:	01db      	lsls	r3, r3, #7
 8000da2:	d509      	bpl.n	8000db8 <__aeabi_ddiv+0x100>
 8000da4:	4659      	mov	r1, fp
 8000da6:	4b67      	ldr	r3, [pc, #412]	; (8000f44 <__aeabi_ddiv+0x28c>)
 8000da8:	4019      	ands	r1, r3
 8000daa:	468b      	mov	fp, r1
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	00c9      	lsls	r1, r1, #3
 8000db0:	468c      	mov	ip, r1
 8000db2:	9b00      	ldr	r3, [sp, #0]
 8000db4:	4463      	add	r3, ip
 8000db6:	001c      	movs	r4, r3
 8000db8:	4b63      	ldr	r3, [pc, #396]	; (8000f48 <__aeabi_ddiv+0x290>)
 8000dba:	429c      	cmp	r4, r3
 8000dbc:	dc07      	bgt.n	8000dce <__aeabi_ddiv+0x116>
 8000dbe:	465b      	mov	r3, fp
 8000dc0:	0564      	lsls	r4, r4, #21
 8000dc2:	075f      	lsls	r7, r3, #29
 8000dc4:	025b      	lsls	r3, r3, #9
 8000dc6:	4317      	orrs	r7, r2
 8000dc8:	0b1b      	lsrs	r3, r3, #12
 8000dca:	0d62      	lsrs	r2, r4, #21
 8000dcc:	e002      	b.n	8000dd4 <__aeabi_ddiv+0x11c>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	2700      	movs	r7, #0
 8000dd2:	4a58      	ldr	r2, [pc, #352]	; (8000f34 <__aeabi_ddiv+0x27c>)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	031b      	lsls	r3, r3, #12
 8000dd8:	0b1c      	lsrs	r4, r3, #12
 8000dda:	0d0b      	lsrs	r3, r1, #20
 8000ddc:	051b      	lsls	r3, r3, #20
 8000dde:	4323      	orrs	r3, r4
 8000de0:	0514      	lsls	r4, r2, #20
 8000de2:	4a5a      	ldr	r2, [pc, #360]	; (8000f4c <__aeabi_ddiv+0x294>)
 8000de4:	0038      	movs	r0, r7
 8000de6:	4013      	ands	r3, r2
 8000de8:	431c      	orrs	r4, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	0064      	lsls	r4, r4, #1
 8000dee:	07db      	lsls	r3, r3, #31
 8000df0:	0864      	lsrs	r4, r4, #1
 8000df2:	431c      	orrs	r4, r3
 8000df4:	0021      	movs	r1, r4
 8000df6:	b005      	add	sp, #20
 8000df8:	bc3c      	pop	{r2, r3, r4, r5}
 8000dfa:	4690      	mov	r8, r2
 8000dfc:	4699      	mov	r9, r3
 8000dfe:	46a2      	mov	sl, r4
 8000e00:	46ab      	mov	fp, r5
 8000e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e04:	2201      	movs	r2, #1
 8000e06:	4252      	negs	r2, r2
 8000e08:	2301      	movs	r3, #1
 8000e0a:	1b1b      	subs	r3, r3, r4
 8000e0c:	2b38      	cmp	r3, #56	; 0x38
 8000e0e:	dc00      	bgt.n	8000e12 <__aeabi_ddiv+0x15a>
 8000e10:	e1ad      	b.n	800116e <__aeabi_ddiv+0x4b6>
 8000e12:	2200      	movs	r2, #0
 8000e14:	2300      	movs	r3, #0
 8000e16:	2700      	movs	r7, #0
 8000e18:	e7dc      	b.n	8000dd4 <__aeabi_ddiv+0x11c>
 8000e1a:	465b      	mov	r3, fp
 8000e1c:	4333      	orrs	r3, r6
 8000e1e:	4699      	mov	r9, r3
 8000e20:	d05e      	beq.n	8000ee0 <__aeabi_ddiv+0x228>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_ddiv+0x170>
 8000e26:	e18a      	b.n	800113e <__aeabi_ddiv+0x486>
 8000e28:	0030      	movs	r0, r6
 8000e2a:	f001 f9ab 	bl	8002184 <__clzsi2>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	3b0b      	subs	r3, #11
 8000e32:	2b1c      	cmp	r3, #28
 8000e34:	dd00      	ble.n	8000e38 <__aeabi_ddiv+0x180>
 8000e36:	e17b      	b.n	8001130 <__aeabi_ddiv+0x478>
 8000e38:	221d      	movs	r2, #29
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	465a      	mov	r2, fp
 8000e3e:	0001      	movs	r1, r0
 8000e40:	40da      	lsrs	r2, r3
 8000e42:	3908      	subs	r1, #8
 8000e44:	408e      	lsls	r6, r1
 8000e46:	0013      	movs	r3, r2
 8000e48:	465f      	mov	r7, fp
 8000e4a:	4333      	orrs	r3, r6
 8000e4c:	4699      	mov	r9, r3
 8000e4e:	408f      	lsls	r7, r1
 8000e50:	4b3f      	ldr	r3, [pc, #252]	; (8000f50 <__aeabi_ddiv+0x298>)
 8000e52:	2600      	movs	r6, #0
 8000e54:	1a1b      	subs	r3, r3, r0
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	9302      	str	r3, [sp, #8]
 8000e5c:	e752      	b.n	8000d04 <__aeabi_ddiv+0x4c>
 8000e5e:	4641      	mov	r1, r8
 8000e60:	4653      	mov	r3, sl
 8000e62:	430b      	orrs	r3, r1
 8000e64:	493b      	ldr	r1, [pc, #236]	; (8000f54 <__aeabi_ddiv+0x29c>)
 8000e66:	469b      	mov	fp, r3
 8000e68:	468c      	mov	ip, r1
 8000e6a:	9b00      	ldr	r3, [sp, #0]
 8000e6c:	4463      	add	r3, ip
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	465b      	mov	r3, fp
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d13b      	bne.n	8000eee <__aeabi_ddiv+0x236>
 8000e76:	2302      	movs	r3, #2
 8000e78:	2200      	movs	r2, #0
 8000e7a:	431e      	orrs	r6, r3
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	e761      	b.n	8000d44 <__aeabi_ddiv+0x8c>
 8000e80:	4643      	mov	r3, r8
 8000e82:	4313      	orrs	r3, r2
 8000e84:	469b      	mov	fp, r3
 8000e86:	d037      	beq.n	8000ef8 <__aeabi_ddiv+0x240>
 8000e88:	4643      	mov	r3, r8
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_ddiv+0x1d8>
 8000e8e:	e162      	b.n	8001156 <__aeabi_ddiv+0x49e>
 8000e90:	4640      	mov	r0, r8
 8000e92:	f001 f977 	bl	8002184 <__clzsi2>
 8000e96:	0003      	movs	r3, r0
 8000e98:	3b0b      	subs	r3, #11
 8000e9a:	2b1c      	cmp	r3, #28
 8000e9c:	dd00      	ble.n	8000ea0 <__aeabi_ddiv+0x1e8>
 8000e9e:	e153      	b.n	8001148 <__aeabi_ddiv+0x490>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	4641      	mov	r1, r8
 8000ea4:	3a08      	subs	r2, #8
 8000ea6:	4091      	lsls	r1, r2
 8000ea8:	4688      	mov	r8, r1
 8000eaa:	211d      	movs	r1, #29
 8000eac:	1acb      	subs	r3, r1, r3
 8000eae:	4651      	mov	r1, sl
 8000eb0:	40d9      	lsrs	r1, r3
 8000eb2:	000b      	movs	r3, r1
 8000eb4:	4641      	mov	r1, r8
 8000eb6:	430b      	orrs	r3, r1
 8000eb8:	469b      	mov	fp, r3
 8000eba:	4653      	mov	r3, sl
 8000ebc:	4093      	lsls	r3, r2
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	9b00      	ldr	r3, [sp, #0]
 8000ec2:	4925      	ldr	r1, [pc, #148]	; (8000f58 <__aeabi_ddiv+0x2a0>)
 8000ec4:	469c      	mov	ip, r3
 8000ec6:	4460      	add	r0, ip
 8000ec8:	0003      	movs	r3, r0
 8000eca:	468c      	mov	ip, r1
 8000ecc:	4463      	add	r3, ip
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	e737      	b.n	8000d44 <__aeabi_ddiv+0x8c>
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	46b1      	mov	r9, r6
 8000ed8:	9000      	str	r0, [sp, #0]
 8000eda:	260c      	movs	r6, #12
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	e711      	b.n	8000d04 <__aeabi_ddiv+0x4c>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	2604      	movs	r6, #4
 8000ee8:	2700      	movs	r7, #0
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	e70a      	b.n	8000d04 <__aeabi_ddiv+0x4c>
 8000eee:	2303      	movs	r3, #3
 8000ef0:	46c3      	mov	fp, r8
 8000ef2:	431e      	orrs	r6, r3
 8000ef4:	2103      	movs	r1, #3
 8000ef6:	e725      	b.n	8000d44 <__aeabi_ddiv+0x8c>
 8000ef8:	3301      	adds	r3, #1
 8000efa:	431e      	orrs	r6, r3
 8000efc:	2200      	movs	r2, #0
 8000efe:	2101      	movs	r1, #1
 8000f00:	e720      	b.n	8000d44 <__aeabi_ddiv+0x8c>
 8000f02:	2300      	movs	r3, #0
 8000f04:	469a      	mov	sl, r3
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	2700      	movs	r7, #0
 8000f0a:	031b      	lsls	r3, r3, #12
 8000f0c:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <__aeabi_ddiv+0x27c>)
 8000f0e:	e761      	b.n	8000dd4 <__aeabi_ddiv+0x11c>
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	4649      	mov	r1, r9
 8000f14:	031b      	lsls	r3, r3, #12
 8000f16:	4219      	tst	r1, r3
 8000f18:	d100      	bne.n	8000f1c <__aeabi_ddiv+0x264>
 8000f1a:	e0e2      	b.n	80010e2 <__aeabi_ddiv+0x42a>
 8000f1c:	4659      	mov	r1, fp
 8000f1e:	4219      	tst	r1, r3
 8000f20:	d000      	beq.n	8000f24 <__aeabi_ddiv+0x26c>
 8000f22:	e0de      	b.n	80010e2 <__aeabi_ddiv+0x42a>
 8000f24:	430b      	orrs	r3, r1
 8000f26:	031b      	lsls	r3, r3, #12
 8000f28:	0017      	movs	r7, r2
 8000f2a:	0b1b      	lsrs	r3, r3, #12
 8000f2c:	46a2      	mov	sl, r4
 8000f2e:	4a01      	ldr	r2, [pc, #4]	; (8000f34 <__aeabi_ddiv+0x27c>)
 8000f30:	e750      	b.n	8000dd4 <__aeabi_ddiv+0x11c>
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	000007ff 	.word	0x000007ff
 8000f38:	fffffc01 	.word	0xfffffc01
 8000f3c:	0800b2ac 	.word	0x0800b2ac
 8000f40:	000003ff 	.word	0x000003ff
 8000f44:	feffffff 	.word	0xfeffffff
 8000f48:	000007fe 	.word	0x000007fe
 8000f4c:	800fffff 	.word	0x800fffff
 8000f50:	fffffc0d 	.word	0xfffffc0d
 8000f54:	fffff801 	.word	0xfffff801
 8000f58:	000003f3 	.word	0x000003f3
 8000f5c:	45d9      	cmp	r9, fp
 8000f5e:	d900      	bls.n	8000f62 <__aeabi_ddiv+0x2aa>
 8000f60:	e0cb      	b.n	80010fa <__aeabi_ddiv+0x442>
 8000f62:	d100      	bne.n	8000f66 <__aeabi_ddiv+0x2ae>
 8000f64:	e0c6      	b.n	80010f4 <__aeabi_ddiv+0x43c>
 8000f66:	003c      	movs	r4, r7
 8000f68:	4648      	mov	r0, r9
 8000f6a:	2700      	movs	r7, #0
 8000f6c:	9b00      	ldr	r3, [sp, #0]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	465b      	mov	r3, fp
 8000f74:	0e16      	lsrs	r6, r2, #24
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	431e      	orrs	r6, r3
 8000f7a:	0213      	lsls	r3, r2, #8
 8000f7c:	4698      	mov	r8, r3
 8000f7e:	0433      	lsls	r3, r6, #16
 8000f80:	0c1b      	lsrs	r3, r3, #16
 8000f82:	4699      	mov	r9, r3
 8000f84:	0c31      	lsrs	r1, r6, #16
 8000f86:	9101      	str	r1, [sp, #4]
 8000f88:	f7ff f94c 	bl	8000224 <__aeabi_uidivmod>
 8000f8c:	464a      	mov	r2, r9
 8000f8e:	4342      	muls	r2, r0
 8000f90:	040b      	lsls	r3, r1, #16
 8000f92:	0c21      	lsrs	r1, r4, #16
 8000f94:	0005      	movs	r5, r0
 8000f96:	4319      	orrs	r1, r3
 8000f98:	428a      	cmp	r2, r1
 8000f9a:	d907      	bls.n	8000fac <__aeabi_ddiv+0x2f4>
 8000f9c:	1989      	adds	r1, r1, r6
 8000f9e:	3d01      	subs	r5, #1
 8000fa0:	428e      	cmp	r6, r1
 8000fa2:	d803      	bhi.n	8000fac <__aeabi_ddiv+0x2f4>
 8000fa4:	428a      	cmp	r2, r1
 8000fa6:	d901      	bls.n	8000fac <__aeabi_ddiv+0x2f4>
 8000fa8:	1e85      	subs	r5, r0, #2
 8000faa:	1989      	adds	r1, r1, r6
 8000fac:	1a88      	subs	r0, r1, r2
 8000fae:	9901      	ldr	r1, [sp, #4]
 8000fb0:	f7ff f938 	bl	8000224 <__aeabi_uidivmod>
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	468c      	mov	ip, r1
 8000fb8:	464a      	mov	r2, r9
 8000fba:	0421      	lsls	r1, r4, #16
 8000fbc:	4664      	mov	r4, ip
 8000fbe:	4342      	muls	r2, r0
 8000fc0:	0c09      	lsrs	r1, r1, #16
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	4321      	orrs	r1, r4
 8000fc6:	428a      	cmp	r2, r1
 8000fc8:	d904      	bls.n	8000fd4 <__aeabi_ddiv+0x31c>
 8000fca:	1989      	adds	r1, r1, r6
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	428e      	cmp	r6, r1
 8000fd0:	d800      	bhi.n	8000fd4 <__aeabi_ddiv+0x31c>
 8000fd2:	e0f1      	b.n	80011b8 <__aeabi_ddiv+0x500>
 8000fd4:	042d      	lsls	r5, r5, #16
 8000fd6:	431d      	orrs	r5, r3
 8000fd8:	46ab      	mov	fp, r5
 8000fda:	4643      	mov	r3, r8
 8000fdc:	1a89      	subs	r1, r1, r2
 8000fde:	4642      	mov	r2, r8
 8000fe0:	0c28      	lsrs	r0, r5, #16
 8000fe2:	0412      	lsls	r2, r2, #16
 8000fe4:	0c1d      	lsrs	r5, r3, #16
 8000fe6:	465b      	mov	r3, fp
 8000fe8:	0c14      	lsrs	r4, r2, #16
 8000fea:	0022      	movs	r2, r4
 8000fec:	041b      	lsls	r3, r3, #16
 8000fee:	0c1b      	lsrs	r3, r3, #16
 8000ff0:	435a      	muls	r2, r3
 8000ff2:	9403      	str	r4, [sp, #12]
 8000ff4:	436b      	muls	r3, r5
 8000ff6:	4344      	muls	r4, r0
 8000ff8:	9502      	str	r5, [sp, #8]
 8000ffa:	4368      	muls	r0, r5
 8000ffc:	191b      	adds	r3, r3, r4
 8000ffe:	0c15      	lsrs	r5, r2, #16
 8001000:	18eb      	adds	r3, r5, r3
 8001002:	429c      	cmp	r4, r3
 8001004:	d903      	bls.n	800100e <__aeabi_ddiv+0x356>
 8001006:	2480      	movs	r4, #128	; 0x80
 8001008:	0264      	lsls	r4, r4, #9
 800100a:	46a4      	mov	ip, r4
 800100c:	4460      	add	r0, ip
 800100e:	0c1c      	lsrs	r4, r3, #16
 8001010:	0415      	lsls	r5, r2, #16
 8001012:	041b      	lsls	r3, r3, #16
 8001014:	0c2d      	lsrs	r5, r5, #16
 8001016:	1820      	adds	r0, r4, r0
 8001018:	195d      	adds	r5, r3, r5
 800101a:	4281      	cmp	r1, r0
 800101c:	d377      	bcc.n	800110e <__aeabi_ddiv+0x456>
 800101e:	d073      	beq.n	8001108 <__aeabi_ddiv+0x450>
 8001020:	1a0c      	subs	r4, r1, r0
 8001022:	4aa2      	ldr	r2, [pc, #648]	; (80012ac <__aeabi_ddiv+0x5f4>)
 8001024:	1b7d      	subs	r5, r7, r5
 8001026:	42af      	cmp	r7, r5
 8001028:	41bf      	sbcs	r7, r7
 800102a:	4694      	mov	ip, r2
 800102c:	9b00      	ldr	r3, [sp, #0]
 800102e:	427f      	negs	r7, r7
 8001030:	4463      	add	r3, ip
 8001032:	1be0      	subs	r0, r4, r7
 8001034:	001c      	movs	r4, r3
 8001036:	4286      	cmp	r6, r0
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x384>
 800103a:	e0db      	b.n	80011f4 <__aeabi_ddiv+0x53c>
 800103c:	9901      	ldr	r1, [sp, #4]
 800103e:	f7ff f8f1 	bl	8000224 <__aeabi_uidivmod>
 8001042:	464a      	mov	r2, r9
 8001044:	4342      	muls	r2, r0
 8001046:	040b      	lsls	r3, r1, #16
 8001048:	0c29      	lsrs	r1, r5, #16
 800104a:	0007      	movs	r7, r0
 800104c:	4319      	orrs	r1, r3
 800104e:	428a      	cmp	r2, r1
 8001050:	d907      	bls.n	8001062 <__aeabi_ddiv+0x3aa>
 8001052:	1989      	adds	r1, r1, r6
 8001054:	3f01      	subs	r7, #1
 8001056:	428e      	cmp	r6, r1
 8001058:	d803      	bhi.n	8001062 <__aeabi_ddiv+0x3aa>
 800105a:	428a      	cmp	r2, r1
 800105c:	d901      	bls.n	8001062 <__aeabi_ddiv+0x3aa>
 800105e:	1e87      	subs	r7, r0, #2
 8001060:	1989      	adds	r1, r1, r6
 8001062:	1a88      	subs	r0, r1, r2
 8001064:	9901      	ldr	r1, [sp, #4]
 8001066:	f7ff f8dd 	bl	8000224 <__aeabi_uidivmod>
 800106a:	0409      	lsls	r1, r1, #16
 800106c:	464a      	mov	r2, r9
 800106e:	4689      	mov	r9, r1
 8001070:	0429      	lsls	r1, r5, #16
 8001072:	464d      	mov	r5, r9
 8001074:	4342      	muls	r2, r0
 8001076:	0c09      	lsrs	r1, r1, #16
 8001078:	0003      	movs	r3, r0
 800107a:	4329      	orrs	r1, r5
 800107c:	428a      	cmp	r2, r1
 800107e:	d907      	bls.n	8001090 <__aeabi_ddiv+0x3d8>
 8001080:	1989      	adds	r1, r1, r6
 8001082:	3b01      	subs	r3, #1
 8001084:	428e      	cmp	r6, r1
 8001086:	d803      	bhi.n	8001090 <__aeabi_ddiv+0x3d8>
 8001088:	428a      	cmp	r2, r1
 800108a:	d901      	bls.n	8001090 <__aeabi_ddiv+0x3d8>
 800108c:	1e83      	subs	r3, r0, #2
 800108e:	1989      	adds	r1, r1, r6
 8001090:	043f      	lsls	r7, r7, #16
 8001092:	1a89      	subs	r1, r1, r2
 8001094:	003a      	movs	r2, r7
 8001096:	9f03      	ldr	r7, [sp, #12]
 8001098:	431a      	orrs	r2, r3
 800109a:	0038      	movs	r0, r7
 800109c:	0413      	lsls	r3, r2, #16
 800109e:	0c1b      	lsrs	r3, r3, #16
 80010a0:	4358      	muls	r0, r3
 80010a2:	4681      	mov	r9, r0
 80010a4:	9802      	ldr	r0, [sp, #8]
 80010a6:	0c15      	lsrs	r5, r2, #16
 80010a8:	436f      	muls	r7, r5
 80010aa:	4343      	muls	r3, r0
 80010ac:	4345      	muls	r5, r0
 80010ae:	4648      	mov	r0, r9
 80010b0:	0c00      	lsrs	r0, r0, #16
 80010b2:	4684      	mov	ip, r0
 80010b4:	19db      	adds	r3, r3, r7
 80010b6:	4463      	add	r3, ip
 80010b8:	429f      	cmp	r7, r3
 80010ba:	d903      	bls.n	80010c4 <__aeabi_ddiv+0x40c>
 80010bc:	2080      	movs	r0, #128	; 0x80
 80010be:	0240      	lsls	r0, r0, #9
 80010c0:	4684      	mov	ip, r0
 80010c2:	4465      	add	r5, ip
 80010c4:	4648      	mov	r0, r9
 80010c6:	0c1f      	lsrs	r7, r3, #16
 80010c8:	0400      	lsls	r0, r0, #16
 80010ca:	041b      	lsls	r3, r3, #16
 80010cc:	0c00      	lsrs	r0, r0, #16
 80010ce:	197d      	adds	r5, r7, r5
 80010d0:	1818      	adds	r0, r3, r0
 80010d2:	42a9      	cmp	r1, r5
 80010d4:	d200      	bcs.n	80010d8 <__aeabi_ddiv+0x420>
 80010d6:	e084      	b.n	80011e2 <__aeabi_ddiv+0x52a>
 80010d8:	d100      	bne.n	80010dc <__aeabi_ddiv+0x424>
 80010da:	e07f      	b.n	80011dc <__aeabi_ddiv+0x524>
 80010dc:	2301      	movs	r3, #1
 80010de:	431a      	orrs	r2, r3
 80010e0:	e657      	b.n	8000d92 <__aeabi_ddiv+0xda>
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	464a      	mov	r2, r9
 80010e6:	031b      	lsls	r3, r3, #12
 80010e8:	4313      	orrs	r3, r2
 80010ea:	031b      	lsls	r3, r3, #12
 80010ec:	0b1b      	lsrs	r3, r3, #12
 80010ee:	46aa      	mov	sl, r5
 80010f0:	4a6f      	ldr	r2, [pc, #444]	; (80012b0 <__aeabi_ddiv+0x5f8>)
 80010f2:	e66f      	b.n	8000dd4 <__aeabi_ddiv+0x11c>
 80010f4:	42ba      	cmp	r2, r7
 80010f6:	d900      	bls.n	80010fa <__aeabi_ddiv+0x442>
 80010f8:	e735      	b.n	8000f66 <__aeabi_ddiv+0x2ae>
 80010fa:	464b      	mov	r3, r9
 80010fc:	07dc      	lsls	r4, r3, #31
 80010fe:	0858      	lsrs	r0, r3, #1
 8001100:	087b      	lsrs	r3, r7, #1
 8001102:	431c      	orrs	r4, r3
 8001104:	07ff      	lsls	r7, r7, #31
 8001106:	e734      	b.n	8000f72 <__aeabi_ddiv+0x2ba>
 8001108:	2400      	movs	r4, #0
 800110a:	42af      	cmp	r7, r5
 800110c:	d289      	bcs.n	8001022 <__aeabi_ddiv+0x36a>
 800110e:	4447      	add	r7, r8
 8001110:	4547      	cmp	r7, r8
 8001112:	41a4      	sbcs	r4, r4
 8001114:	465b      	mov	r3, fp
 8001116:	4264      	negs	r4, r4
 8001118:	19a4      	adds	r4, r4, r6
 800111a:	1864      	adds	r4, r4, r1
 800111c:	3b01      	subs	r3, #1
 800111e:	42a6      	cmp	r6, r4
 8001120:	d21e      	bcs.n	8001160 <__aeabi_ddiv+0x4a8>
 8001122:	42a0      	cmp	r0, r4
 8001124:	d86d      	bhi.n	8001202 <__aeabi_ddiv+0x54a>
 8001126:	d100      	bne.n	800112a <__aeabi_ddiv+0x472>
 8001128:	e0b6      	b.n	8001298 <__aeabi_ddiv+0x5e0>
 800112a:	1a24      	subs	r4, r4, r0
 800112c:	469b      	mov	fp, r3
 800112e:	e778      	b.n	8001022 <__aeabi_ddiv+0x36a>
 8001130:	0003      	movs	r3, r0
 8001132:	465a      	mov	r2, fp
 8001134:	3b28      	subs	r3, #40	; 0x28
 8001136:	409a      	lsls	r2, r3
 8001138:	2700      	movs	r7, #0
 800113a:	4691      	mov	r9, r2
 800113c:	e688      	b.n	8000e50 <__aeabi_ddiv+0x198>
 800113e:	4658      	mov	r0, fp
 8001140:	f001 f820 	bl	8002184 <__clzsi2>
 8001144:	3020      	adds	r0, #32
 8001146:	e672      	b.n	8000e2e <__aeabi_ddiv+0x176>
 8001148:	0003      	movs	r3, r0
 800114a:	4652      	mov	r2, sl
 800114c:	3b28      	subs	r3, #40	; 0x28
 800114e:	409a      	lsls	r2, r3
 8001150:	4693      	mov	fp, r2
 8001152:	2200      	movs	r2, #0
 8001154:	e6b4      	b.n	8000ec0 <__aeabi_ddiv+0x208>
 8001156:	4650      	mov	r0, sl
 8001158:	f001 f814 	bl	8002184 <__clzsi2>
 800115c:	3020      	adds	r0, #32
 800115e:	e69a      	b.n	8000e96 <__aeabi_ddiv+0x1de>
 8001160:	42a6      	cmp	r6, r4
 8001162:	d1e2      	bne.n	800112a <__aeabi_ddiv+0x472>
 8001164:	45b8      	cmp	r8, r7
 8001166:	d9dc      	bls.n	8001122 <__aeabi_ddiv+0x46a>
 8001168:	1a34      	subs	r4, r6, r0
 800116a:	469b      	mov	fp, r3
 800116c:	e759      	b.n	8001022 <__aeabi_ddiv+0x36a>
 800116e:	2b1f      	cmp	r3, #31
 8001170:	dc65      	bgt.n	800123e <__aeabi_ddiv+0x586>
 8001172:	4c50      	ldr	r4, [pc, #320]	; (80012b4 <__aeabi_ddiv+0x5fc>)
 8001174:	9900      	ldr	r1, [sp, #0]
 8001176:	46a4      	mov	ip, r4
 8001178:	465c      	mov	r4, fp
 800117a:	4461      	add	r1, ip
 800117c:	0008      	movs	r0, r1
 800117e:	408c      	lsls	r4, r1
 8001180:	0011      	movs	r1, r2
 8001182:	4082      	lsls	r2, r0
 8001184:	40d9      	lsrs	r1, r3
 8001186:	1e50      	subs	r0, r2, #1
 8001188:	4182      	sbcs	r2, r0
 800118a:	430c      	orrs	r4, r1
 800118c:	4314      	orrs	r4, r2
 800118e:	465a      	mov	r2, fp
 8001190:	40da      	lsrs	r2, r3
 8001192:	0013      	movs	r3, r2
 8001194:	0762      	lsls	r2, r4, #29
 8001196:	d009      	beq.n	80011ac <__aeabi_ddiv+0x4f4>
 8001198:	220f      	movs	r2, #15
 800119a:	4022      	ands	r2, r4
 800119c:	2a04      	cmp	r2, #4
 800119e:	d005      	beq.n	80011ac <__aeabi_ddiv+0x4f4>
 80011a0:	0022      	movs	r2, r4
 80011a2:	1d14      	adds	r4, r2, #4
 80011a4:	4294      	cmp	r4, r2
 80011a6:	4189      	sbcs	r1, r1
 80011a8:	4249      	negs	r1, r1
 80011aa:	185b      	adds	r3, r3, r1
 80011ac:	021a      	lsls	r2, r3, #8
 80011ae:	d562      	bpl.n	8001276 <__aeabi_ddiv+0x5be>
 80011b0:	2201      	movs	r2, #1
 80011b2:	2300      	movs	r3, #0
 80011b4:	2700      	movs	r7, #0
 80011b6:	e60d      	b.n	8000dd4 <__aeabi_ddiv+0x11c>
 80011b8:	428a      	cmp	r2, r1
 80011ba:	d800      	bhi.n	80011be <__aeabi_ddiv+0x506>
 80011bc:	e70a      	b.n	8000fd4 <__aeabi_ddiv+0x31c>
 80011be:	1e83      	subs	r3, r0, #2
 80011c0:	1989      	adds	r1, r1, r6
 80011c2:	e707      	b.n	8000fd4 <__aeabi_ddiv+0x31c>
 80011c4:	230f      	movs	r3, #15
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	d100      	bne.n	80011ce <__aeabi_ddiv+0x516>
 80011cc:	e5e6      	b.n	8000d9c <__aeabi_ddiv+0xe4>
 80011ce:	1d17      	adds	r7, r2, #4
 80011d0:	4297      	cmp	r7, r2
 80011d2:	4192      	sbcs	r2, r2
 80011d4:	4253      	negs	r3, r2
 80011d6:	449b      	add	fp, r3
 80011d8:	08fa      	lsrs	r2, r7, #3
 80011da:	e5e0      	b.n	8000d9e <__aeabi_ddiv+0xe6>
 80011dc:	2800      	cmp	r0, #0
 80011de:	d100      	bne.n	80011e2 <__aeabi_ddiv+0x52a>
 80011e0:	e5d7      	b.n	8000d92 <__aeabi_ddiv+0xda>
 80011e2:	1871      	adds	r1, r6, r1
 80011e4:	1e53      	subs	r3, r2, #1
 80011e6:	42b1      	cmp	r1, r6
 80011e8:	d327      	bcc.n	800123a <__aeabi_ddiv+0x582>
 80011ea:	42a9      	cmp	r1, r5
 80011ec:	d315      	bcc.n	800121a <__aeabi_ddiv+0x562>
 80011ee:	d058      	beq.n	80012a2 <__aeabi_ddiv+0x5ea>
 80011f0:	001a      	movs	r2, r3
 80011f2:	e773      	b.n	80010dc <__aeabi_ddiv+0x424>
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	dc00      	bgt.n	80011fa <__aeabi_ddiv+0x542>
 80011f8:	e604      	b.n	8000e04 <__aeabi_ddiv+0x14c>
 80011fa:	2301      	movs	r3, #1
 80011fc:	2200      	movs	r2, #0
 80011fe:	449b      	add	fp, r3
 8001200:	e5cd      	b.n	8000d9e <__aeabi_ddiv+0xe6>
 8001202:	2302      	movs	r3, #2
 8001204:	4447      	add	r7, r8
 8001206:	4547      	cmp	r7, r8
 8001208:	4189      	sbcs	r1, r1
 800120a:	425b      	negs	r3, r3
 800120c:	469c      	mov	ip, r3
 800120e:	4249      	negs	r1, r1
 8001210:	1989      	adds	r1, r1, r6
 8001212:	190c      	adds	r4, r1, r4
 8001214:	44e3      	add	fp, ip
 8001216:	1a24      	subs	r4, r4, r0
 8001218:	e703      	b.n	8001022 <__aeabi_ddiv+0x36a>
 800121a:	4643      	mov	r3, r8
 800121c:	005f      	lsls	r7, r3, #1
 800121e:	4547      	cmp	r7, r8
 8001220:	419b      	sbcs	r3, r3
 8001222:	46b8      	mov	r8, r7
 8001224:	425b      	negs	r3, r3
 8001226:	199e      	adds	r6, r3, r6
 8001228:	3a02      	subs	r2, #2
 800122a:	1989      	adds	r1, r1, r6
 800122c:	42a9      	cmp	r1, r5
 800122e:	d000      	beq.n	8001232 <__aeabi_ddiv+0x57a>
 8001230:	e754      	b.n	80010dc <__aeabi_ddiv+0x424>
 8001232:	4540      	cmp	r0, r8
 8001234:	d000      	beq.n	8001238 <__aeabi_ddiv+0x580>
 8001236:	e751      	b.n	80010dc <__aeabi_ddiv+0x424>
 8001238:	e5ab      	b.n	8000d92 <__aeabi_ddiv+0xda>
 800123a:	001a      	movs	r2, r3
 800123c:	e7f6      	b.n	800122c <__aeabi_ddiv+0x574>
 800123e:	211f      	movs	r1, #31
 8001240:	465f      	mov	r7, fp
 8001242:	4249      	negs	r1, r1
 8001244:	1b0c      	subs	r4, r1, r4
 8001246:	40e7      	lsrs	r7, r4
 8001248:	2b20      	cmp	r3, #32
 800124a:	d007      	beq.n	800125c <__aeabi_ddiv+0x5a4>
 800124c:	491a      	ldr	r1, [pc, #104]	; (80012b8 <__aeabi_ddiv+0x600>)
 800124e:	9b00      	ldr	r3, [sp, #0]
 8001250:	468c      	mov	ip, r1
 8001252:	4463      	add	r3, ip
 8001254:	0018      	movs	r0, r3
 8001256:	465b      	mov	r3, fp
 8001258:	4083      	lsls	r3, r0
 800125a:	431a      	orrs	r2, r3
 800125c:	1e50      	subs	r0, r2, #1
 800125e:	4182      	sbcs	r2, r0
 8001260:	433a      	orrs	r2, r7
 8001262:	2707      	movs	r7, #7
 8001264:	2300      	movs	r3, #0
 8001266:	4017      	ands	r7, r2
 8001268:	d009      	beq.n	800127e <__aeabi_ddiv+0x5c6>
 800126a:	210f      	movs	r1, #15
 800126c:	2300      	movs	r3, #0
 800126e:	4011      	ands	r1, r2
 8001270:	0014      	movs	r4, r2
 8001272:	2904      	cmp	r1, #4
 8001274:	d195      	bne.n	80011a2 <__aeabi_ddiv+0x4ea>
 8001276:	0022      	movs	r2, r4
 8001278:	075f      	lsls	r7, r3, #29
 800127a:	025b      	lsls	r3, r3, #9
 800127c:	0b1b      	lsrs	r3, r3, #12
 800127e:	08d2      	lsrs	r2, r2, #3
 8001280:	4317      	orrs	r7, r2
 8001282:	2200      	movs	r2, #0
 8001284:	e5a6      	b.n	8000dd4 <__aeabi_ddiv+0x11c>
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	4659      	mov	r1, fp
 800128a:	031b      	lsls	r3, r3, #12
 800128c:	430b      	orrs	r3, r1
 800128e:	031b      	lsls	r3, r3, #12
 8001290:	0017      	movs	r7, r2
 8001292:	0b1b      	lsrs	r3, r3, #12
 8001294:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <__aeabi_ddiv+0x5f8>)
 8001296:	e59d      	b.n	8000dd4 <__aeabi_ddiv+0x11c>
 8001298:	42bd      	cmp	r5, r7
 800129a:	d8b2      	bhi.n	8001202 <__aeabi_ddiv+0x54a>
 800129c:	469b      	mov	fp, r3
 800129e:	2400      	movs	r4, #0
 80012a0:	e6bf      	b.n	8001022 <__aeabi_ddiv+0x36a>
 80012a2:	4580      	cmp	r8, r0
 80012a4:	d3b9      	bcc.n	800121a <__aeabi_ddiv+0x562>
 80012a6:	001a      	movs	r2, r3
 80012a8:	e7c3      	b.n	8001232 <__aeabi_ddiv+0x57a>
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	000003ff 	.word	0x000003ff
 80012b0:	000007ff 	.word	0x000007ff
 80012b4:	0000041e 	.word	0x0000041e
 80012b8:	0000043e 	.word	0x0000043e

080012bc <__eqdf2>:
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	464f      	mov	r7, r9
 80012c0:	4646      	mov	r6, r8
 80012c2:	46d6      	mov	lr, sl
 80012c4:	4684      	mov	ip, r0
 80012c6:	b5c0      	push	{r6, r7, lr}
 80012c8:	4680      	mov	r8, r0
 80012ca:	4e19      	ldr	r6, [pc, #100]	; (8001330 <__eqdf2+0x74>)
 80012cc:	0318      	lsls	r0, r3, #12
 80012ce:	030f      	lsls	r7, r1, #12
 80012d0:	004d      	lsls	r5, r1, #1
 80012d2:	0b00      	lsrs	r0, r0, #12
 80012d4:	005c      	lsls	r4, r3, #1
 80012d6:	4682      	mov	sl, r0
 80012d8:	0b3f      	lsrs	r7, r7, #12
 80012da:	0d6d      	lsrs	r5, r5, #21
 80012dc:	0fc9      	lsrs	r1, r1, #31
 80012de:	4691      	mov	r9, r2
 80012e0:	0d64      	lsrs	r4, r4, #21
 80012e2:	0fdb      	lsrs	r3, r3, #31
 80012e4:	2001      	movs	r0, #1
 80012e6:	42b5      	cmp	r5, r6
 80012e8:	d00a      	beq.n	8001300 <__eqdf2+0x44>
 80012ea:	42b4      	cmp	r4, r6
 80012ec:	d003      	beq.n	80012f6 <__eqdf2+0x3a>
 80012ee:	42a5      	cmp	r5, r4
 80012f0:	d101      	bne.n	80012f6 <__eqdf2+0x3a>
 80012f2:	4557      	cmp	r7, sl
 80012f4:	d00c      	beq.n	8001310 <__eqdf2+0x54>
 80012f6:	bc1c      	pop	{r2, r3, r4}
 80012f8:	4690      	mov	r8, r2
 80012fa:	4699      	mov	r9, r3
 80012fc:	46a2      	mov	sl, r4
 80012fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001300:	4666      	mov	r6, ip
 8001302:	433e      	orrs	r6, r7
 8001304:	d1f7      	bne.n	80012f6 <__eqdf2+0x3a>
 8001306:	42ac      	cmp	r4, r5
 8001308:	d1f5      	bne.n	80012f6 <__eqdf2+0x3a>
 800130a:	4654      	mov	r4, sl
 800130c:	4314      	orrs	r4, r2
 800130e:	d1f2      	bne.n	80012f6 <__eqdf2+0x3a>
 8001310:	2001      	movs	r0, #1
 8001312:	45c8      	cmp	r8, r9
 8001314:	d1ef      	bne.n	80012f6 <__eqdf2+0x3a>
 8001316:	4299      	cmp	r1, r3
 8001318:	d007      	beq.n	800132a <__eqdf2+0x6e>
 800131a:	2d00      	cmp	r5, #0
 800131c:	d1eb      	bne.n	80012f6 <__eqdf2+0x3a>
 800131e:	4663      	mov	r3, ip
 8001320:	431f      	orrs	r7, r3
 8001322:	0038      	movs	r0, r7
 8001324:	1e47      	subs	r7, r0, #1
 8001326:	41b8      	sbcs	r0, r7
 8001328:	e7e5      	b.n	80012f6 <__eqdf2+0x3a>
 800132a:	2000      	movs	r0, #0
 800132c:	e7e3      	b.n	80012f6 <__eqdf2+0x3a>
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	000007ff 	.word	0x000007ff

08001334 <__gedf2>:
 8001334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001336:	464f      	mov	r7, r9
 8001338:	4646      	mov	r6, r8
 800133a:	46d6      	mov	lr, sl
 800133c:	004d      	lsls	r5, r1, #1
 800133e:	b5c0      	push	{r6, r7, lr}
 8001340:	030e      	lsls	r6, r1, #12
 8001342:	0fc9      	lsrs	r1, r1, #31
 8001344:	468a      	mov	sl, r1
 8001346:	492c      	ldr	r1, [pc, #176]	; (80013f8 <__gedf2+0xc4>)
 8001348:	031f      	lsls	r7, r3, #12
 800134a:	005c      	lsls	r4, r3, #1
 800134c:	4680      	mov	r8, r0
 800134e:	0b36      	lsrs	r6, r6, #12
 8001350:	0d6d      	lsrs	r5, r5, #21
 8001352:	4691      	mov	r9, r2
 8001354:	0b3f      	lsrs	r7, r7, #12
 8001356:	0d64      	lsrs	r4, r4, #21
 8001358:	0fdb      	lsrs	r3, r3, #31
 800135a:	428d      	cmp	r5, r1
 800135c:	d01e      	beq.n	800139c <__gedf2+0x68>
 800135e:	428c      	cmp	r4, r1
 8001360:	d016      	beq.n	8001390 <__gedf2+0x5c>
 8001362:	2d00      	cmp	r5, #0
 8001364:	d11e      	bne.n	80013a4 <__gedf2+0x70>
 8001366:	4330      	orrs	r0, r6
 8001368:	4684      	mov	ip, r0
 800136a:	2c00      	cmp	r4, #0
 800136c:	d101      	bne.n	8001372 <__gedf2+0x3e>
 800136e:	433a      	orrs	r2, r7
 8001370:	d023      	beq.n	80013ba <__gedf2+0x86>
 8001372:	4662      	mov	r2, ip
 8001374:	2a00      	cmp	r2, #0
 8001376:	d01a      	beq.n	80013ae <__gedf2+0x7a>
 8001378:	459a      	cmp	sl, r3
 800137a:	d029      	beq.n	80013d0 <__gedf2+0x9c>
 800137c:	4651      	mov	r1, sl
 800137e:	2002      	movs	r0, #2
 8001380:	3901      	subs	r1, #1
 8001382:	4008      	ands	r0, r1
 8001384:	3801      	subs	r0, #1
 8001386:	bc1c      	pop	{r2, r3, r4}
 8001388:	4690      	mov	r8, r2
 800138a:	4699      	mov	r9, r3
 800138c:	46a2      	mov	sl, r4
 800138e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001390:	0039      	movs	r1, r7
 8001392:	4311      	orrs	r1, r2
 8001394:	d0e5      	beq.n	8001362 <__gedf2+0x2e>
 8001396:	2002      	movs	r0, #2
 8001398:	4240      	negs	r0, r0
 800139a:	e7f4      	b.n	8001386 <__gedf2+0x52>
 800139c:	4330      	orrs	r0, r6
 800139e:	d1fa      	bne.n	8001396 <__gedf2+0x62>
 80013a0:	42ac      	cmp	r4, r5
 80013a2:	d00f      	beq.n	80013c4 <__gedf2+0x90>
 80013a4:	2c00      	cmp	r4, #0
 80013a6:	d10f      	bne.n	80013c8 <__gedf2+0x94>
 80013a8:	433a      	orrs	r2, r7
 80013aa:	d0e7      	beq.n	800137c <__gedf2+0x48>
 80013ac:	e00c      	b.n	80013c8 <__gedf2+0x94>
 80013ae:	2201      	movs	r2, #1
 80013b0:	3b01      	subs	r3, #1
 80013b2:	4393      	bics	r3, r2
 80013b4:	0018      	movs	r0, r3
 80013b6:	3001      	adds	r0, #1
 80013b8:	e7e5      	b.n	8001386 <__gedf2+0x52>
 80013ba:	4663      	mov	r3, ip
 80013bc:	2000      	movs	r0, #0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0e1      	beq.n	8001386 <__gedf2+0x52>
 80013c2:	e7db      	b.n	800137c <__gedf2+0x48>
 80013c4:	433a      	orrs	r2, r7
 80013c6:	d1e6      	bne.n	8001396 <__gedf2+0x62>
 80013c8:	459a      	cmp	sl, r3
 80013ca:	d1d7      	bne.n	800137c <__gedf2+0x48>
 80013cc:	42a5      	cmp	r5, r4
 80013ce:	dcd5      	bgt.n	800137c <__gedf2+0x48>
 80013d0:	42a5      	cmp	r5, r4
 80013d2:	db05      	blt.n	80013e0 <__gedf2+0xac>
 80013d4:	42be      	cmp	r6, r7
 80013d6:	d8d1      	bhi.n	800137c <__gedf2+0x48>
 80013d8:	d008      	beq.n	80013ec <__gedf2+0xb8>
 80013da:	2000      	movs	r0, #0
 80013dc:	42be      	cmp	r6, r7
 80013de:	d2d2      	bcs.n	8001386 <__gedf2+0x52>
 80013e0:	4650      	mov	r0, sl
 80013e2:	2301      	movs	r3, #1
 80013e4:	3801      	subs	r0, #1
 80013e6:	4398      	bics	r0, r3
 80013e8:	3001      	adds	r0, #1
 80013ea:	e7cc      	b.n	8001386 <__gedf2+0x52>
 80013ec:	45c8      	cmp	r8, r9
 80013ee:	d8c5      	bhi.n	800137c <__gedf2+0x48>
 80013f0:	2000      	movs	r0, #0
 80013f2:	45c8      	cmp	r8, r9
 80013f4:	d3f4      	bcc.n	80013e0 <__gedf2+0xac>
 80013f6:	e7c6      	b.n	8001386 <__gedf2+0x52>
 80013f8:	000007ff 	.word	0x000007ff

080013fc <__ledf2>:
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	464f      	mov	r7, r9
 8001400:	4646      	mov	r6, r8
 8001402:	46d6      	mov	lr, sl
 8001404:	004d      	lsls	r5, r1, #1
 8001406:	b5c0      	push	{r6, r7, lr}
 8001408:	030e      	lsls	r6, r1, #12
 800140a:	0fc9      	lsrs	r1, r1, #31
 800140c:	468a      	mov	sl, r1
 800140e:	492e      	ldr	r1, [pc, #184]	; (80014c8 <__ledf2+0xcc>)
 8001410:	031f      	lsls	r7, r3, #12
 8001412:	005c      	lsls	r4, r3, #1
 8001414:	4680      	mov	r8, r0
 8001416:	0b36      	lsrs	r6, r6, #12
 8001418:	0d6d      	lsrs	r5, r5, #21
 800141a:	4691      	mov	r9, r2
 800141c:	0b3f      	lsrs	r7, r7, #12
 800141e:	0d64      	lsrs	r4, r4, #21
 8001420:	0fdb      	lsrs	r3, r3, #31
 8001422:	428d      	cmp	r5, r1
 8001424:	d018      	beq.n	8001458 <__ledf2+0x5c>
 8001426:	428c      	cmp	r4, r1
 8001428:	d011      	beq.n	800144e <__ledf2+0x52>
 800142a:	2d00      	cmp	r5, #0
 800142c:	d118      	bne.n	8001460 <__ledf2+0x64>
 800142e:	4330      	orrs	r0, r6
 8001430:	4684      	mov	ip, r0
 8001432:	2c00      	cmp	r4, #0
 8001434:	d11e      	bne.n	8001474 <__ledf2+0x78>
 8001436:	433a      	orrs	r2, r7
 8001438:	d11c      	bne.n	8001474 <__ledf2+0x78>
 800143a:	4663      	mov	r3, ip
 800143c:	2000      	movs	r0, #0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d030      	beq.n	80014a4 <__ledf2+0xa8>
 8001442:	4651      	mov	r1, sl
 8001444:	2002      	movs	r0, #2
 8001446:	3901      	subs	r1, #1
 8001448:	4008      	ands	r0, r1
 800144a:	3801      	subs	r0, #1
 800144c:	e02a      	b.n	80014a4 <__ledf2+0xa8>
 800144e:	0039      	movs	r1, r7
 8001450:	4311      	orrs	r1, r2
 8001452:	d0ea      	beq.n	800142a <__ledf2+0x2e>
 8001454:	2002      	movs	r0, #2
 8001456:	e025      	b.n	80014a4 <__ledf2+0xa8>
 8001458:	4330      	orrs	r0, r6
 800145a:	d1fb      	bne.n	8001454 <__ledf2+0x58>
 800145c:	42ac      	cmp	r4, r5
 800145e:	d026      	beq.n	80014ae <__ledf2+0xb2>
 8001460:	2c00      	cmp	r4, #0
 8001462:	d126      	bne.n	80014b2 <__ledf2+0xb6>
 8001464:	433a      	orrs	r2, r7
 8001466:	d124      	bne.n	80014b2 <__ledf2+0xb6>
 8001468:	4651      	mov	r1, sl
 800146a:	2002      	movs	r0, #2
 800146c:	3901      	subs	r1, #1
 800146e:	4008      	ands	r0, r1
 8001470:	3801      	subs	r0, #1
 8001472:	e017      	b.n	80014a4 <__ledf2+0xa8>
 8001474:	4662      	mov	r2, ip
 8001476:	2a00      	cmp	r2, #0
 8001478:	d00f      	beq.n	800149a <__ledf2+0x9e>
 800147a:	459a      	cmp	sl, r3
 800147c:	d1e1      	bne.n	8001442 <__ledf2+0x46>
 800147e:	42a5      	cmp	r5, r4
 8001480:	db05      	blt.n	800148e <__ledf2+0x92>
 8001482:	42be      	cmp	r6, r7
 8001484:	d8dd      	bhi.n	8001442 <__ledf2+0x46>
 8001486:	d019      	beq.n	80014bc <__ledf2+0xc0>
 8001488:	2000      	movs	r0, #0
 800148a:	42be      	cmp	r6, r7
 800148c:	d20a      	bcs.n	80014a4 <__ledf2+0xa8>
 800148e:	4650      	mov	r0, sl
 8001490:	2301      	movs	r3, #1
 8001492:	3801      	subs	r0, #1
 8001494:	4398      	bics	r0, r3
 8001496:	3001      	adds	r0, #1
 8001498:	e004      	b.n	80014a4 <__ledf2+0xa8>
 800149a:	2201      	movs	r2, #1
 800149c:	3b01      	subs	r3, #1
 800149e:	4393      	bics	r3, r2
 80014a0:	0018      	movs	r0, r3
 80014a2:	3001      	adds	r0, #1
 80014a4:	bc1c      	pop	{r2, r3, r4}
 80014a6:	4690      	mov	r8, r2
 80014a8:	4699      	mov	r9, r3
 80014aa:	46a2      	mov	sl, r4
 80014ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ae:	433a      	orrs	r2, r7
 80014b0:	d1d0      	bne.n	8001454 <__ledf2+0x58>
 80014b2:	459a      	cmp	sl, r3
 80014b4:	d1c5      	bne.n	8001442 <__ledf2+0x46>
 80014b6:	42a5      	cmp	r5, r4
 80014b8:	dcc3      	bgt.n	8001442 <__ledf2+0x46>
 80014ba:	e7e0      	b.n	800147e <__ledf2+0x82>
 80014bc:	45c8      	cmp	r8, r9
 80014be:	d8c0      	bhi.n	8001442 <__ledf2+0x46>
 80014c0:	2000      	movs	r0, #0
 80014c2:	45c8      	cmp	r8, r9
 80014c4:	d3e3      	bcc.n	800148e <__ledf2+0x92>
 80014c6:	e7ed      	b.n	80014a4 <__ledf2+0xa8>
 80014c8:	000007ff 	.word	0x000007ff

080014cc <__aeabi_dmul>:
 80014cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ce:	4657      	mov	r7, sl
 80014d0:	46de      	mov	lr, fp
 80014d2:	464e      	mov	r6, r9
 80014d4:	4645      	mov	r5, r8
 80014d6:	b5e0      	push	{r5, r6, r7, lr}
 80014d8:	4683      	mov	fp, r0
 80014da:	0006      	movs	r6, r0
 80014dc:	030f      	lsls	r7, r1, #12
 80014de:	0048      	lsls	r0, r1, #1
 80014e0:	b087      	sub	sp, #28
 80014e2:	4692      	mov	sl, r2
 80014e4:	001d      	movs	r5, r3
 80014e6:	0b3f      	lsrs	r7, r7, #12
 80014e8:	0d40      	lsrs	r0, r0, #21
 80014ea:	0fcc      	lsrs	r4, r1, #31
 80014ec:	2800      	cmp	r0, #0
 80014ee:	d100      	bne.n	80014f2 <__aeabi_dmul+0x26>
 80014f0:	e06f      	b.n	80015d2 <__aeabi_dmul+0x106>
 80014f2:	4bde      	ldr	r3, [pc, #888]	; (800186c <__aeabi_dmul+0x3a0>)
 80014f4:	4298      	cmp	r0, r3
 80014f6:	d038      	beq.n	800156a <__aeabi_dmul+0x9e>
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	00ff      	lsls	r7, r7, #3
 80014fc:	041b      	lsls	r3, r3, #16
 80014fe:	431f      	orrs	r7, r3
 8001500:	0f73      	lsrs	r3, r6, #29
 8001502:	433b      	orrs	r3, r7
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	4bda      	ldr	r3, [pc, #872]	; (8001870 <__aeabi_dmul+0x3a4>)
 8001508:	2700      	movs	r7, #0
 800150a:	4699      	mov	r9, r3
 800150c:	2300      	movs	r3, #0
 800150e:	469b      	mov	fp, r3
 8001510:	00f6      	lsls	r6, r6, #3
 8001512:	4481      	add	r9, r0
 8001514:	032b      	lsls	r3, r5, #12
 8001516:	0069      	lsls	r1, r5, #1
 8001518:	0b1b      	lsrs	r3, r3, #12
 800151a:	4652      	mov	r2, sl
 800151c:	4698      	mov	r8, r3
 800151e:	0d49      	lsrs	r1, r1, #21
 8001520:	0fed      	lsrs	r5, r5, #31
 8001522:	2900      	cmp	r1, #0
 8001524:	d100      	bne.n	8001528 <__aeabi_dmul+0x5c>
 8001526:	e085      	b.n	8001634 <__aeabi_dmul+0x168>
 8001528:	4bd0      	ldr	r3, [pc, #832]	; (800186c <__aeabi_dmul+0x3a0>)
 800152a:	4299      	cmp	r1, r3
 800152c:	d100      	bne.n	8001530 <__aeabi_dmul+0x64>
 800152e:	e073      	b.n	8001618 <__aeabi_dmul+0x14c>
 8001530:	4643      	mov	r3, r8
 8001532:	00da      	lsls	r2, r3, #3
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	041b      	lsls	r3, r3, #16
 8001538:	4313      	orrs	r3, r2
 800153a:	4652      	mov	r2, sl
 800153c:	48cc      	ldr	r0, [pc, #816]	; (8001870 <__aeabi_dmul+0x3a4>)
 800153e:	0f52      	lsrs	r2, r2, #29
 8001540:	4684      	mov	ip, r0
 8001542:	4313      	orrs	r3, r2
 8001544:	4652      	mov	r2, sl
 8001546:	2000      	movs	r0, #0
 8001548:	4461      	add	r1, ip
 800154a:	00d2      	lsls	r2, r2, #3
 800154c:	4489      	add	r9, r1
 800154e:	0021      	movs	r1, r4
 8001550:	4069      	eors	r1, r5
 8001552:	9100      	str	r1, [sp, #0]
 8001554:	468c      	mov	ip, r1
 8001556:	2101      	movs	r1, #1
 8001558:	4449      	add	r1, r9
 800155a:	468a      	mov	sl, r1
 800155c:	2f0f      	cmp	r7, #15
 800155e:	d900      	bls.n	8001562 <__aeabi_dmul+0x96>
 8001560:	e090      	b.n	8001684 <__aeabi_dmul+0x1b8>
 8001562:	49c4      	ldr	r1, [pc, #784]	; (8001874 <__aeabi_dmul+0x3a8>)
 8001564:	00bf      	lsls	r7, r7, #2
 8001566:	59cf      	ldr	r7, [r1, r7]
 8001568:	46bf      	mov	pc, r7
 800156a:	465b      	mov	r3, fp
 800156c:	433b      	orrs	r3, r7
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	d000      	beq.n	8001574 <__aeabi_dmul+0xa8>
 8001572:	e16a      	b.n	800184a <__aeabi_dmul+0x37e>
 8001574:	2302      	movs	r3, #2
 8001576:	2708      	movs	r7, #8
 8001578:	2600      	movs	r6, #0
 800157a:	4681      	mov	r9, r0
 800157c:	469b      	mov	fp, r3
 800157e:	e7c9      	b.n	8001514 <__aeabi_dmul+0x48>
 8001580:	0032      	movs	r2, r6
 8001582:	4658      	mov	r0, fp
 8001584:	9b01      	ldr	r3, [sp, #4]
 8001586:	4661      	mov	r1, ip
 8001588:	9100      	str	r1, [sp, #0]
 800158a:	2802      	cmp	r0, #2
 800158c:	d100      	bne.n	8001590 <__aeabi_dmul+0xc4>
 800158e:	e075      	b.n	800167c <__aeabi_dmul+0x1b0>
 8001590:	2803      	cmp	r0, #3
 8001592:	d100      	bne.n	8001596 <__aeabi_dmul+0xca>
 8001594:	e1fe      	b.n	8001994 <__aeabi_dmul+0x4c8>
 8001596:	2801      	cmp	r0, #1
 8001598:	d000      	beq.n	800159c <__aeabi_dmul+0xd0>
 800159a:	e12c      	b.n	80017f6 <__aeabi_dmul+0x32a>
 800159c:	2300      	movs	r3, #0
 800159e:	2700      	movs	r7, #0
 80015a0:	2600      	movs	r6, #0
 80015a2:	2500      	movs	r5, #0
 80015a4:	033f      	lsls	r7, r7, #12
 80015a6:	0d2a      	lsrs	r2, r5, #20
 80015a8:	0b3f      	lsrs	r7, r7, #12
 80015aa:	48b3      	ldr	r0, [pc, #716]	; (8001878 <__aeabi_dmul+0x3ac>)
 80015ac:	0512      	lsls	r2, r2, #20
 80015ae:	433a      	orrs	r2, r7
 80015b0:	4002      	ands	r2, r0
 80015b2:	051b      	lsls	r3, r3, #20
 80015b4:	4313      	orrs	r3, r2
 80015b6:	9a00      	ldr	r2, [sp, #0]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	07d1      	lsls	r1, r2, #31
 80015bc:	085b      	lsrs	r3, r3, #1
 80015be:	430b      	orrs	r3, r1
 80015c0:	0030      	movs	r0, r6
 80015c2:	0019      	movs	r1, r3
 80015c4:	b007      	add	sp, #28
 80015c6:	bc3c      	pop	{r2, r3, r4, r5}
 80015c8:	4690      	mov	r8, r2
 80015ca:	4699      	mov	r9, r3
 80015cc:	46a2      	mov	sl, r4
 80015ce:	46ab      	mov	fp, r5
 80015d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d2:	465b      	mov	r3, fp
 80015d4:	433b      	orrs	r3, r7
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	d100      	bne.n	80015dc <__aeabi_dmul+0x110>
 80015da:	e12f      	b.n	800183c <__aeabi_dmul+0x370>
 80015dc:	2f00      	cmp	r7, #0
 80015de:	d100      	bne.n	80015e2 <__aeabi_dmul+0x116>
 80015e0:	e1a5      	b.n	800192e <__aeabi_dmul+0x462>
 80015e2:	0038      	movs	r0, r7
 80015e4:	f000 fdce 	bl	8002184 <__clzsi2>
 80015e8:	0003      	movs	r3, r0
 80015ea:	3b0b      	subs	r3, #11
 80015ec:	2b1c      	cmp	r3, #28
 80015ee:	dd00      	ble.n	80015f2 <__aeabi_dmul+0x126>
 80015f0:	e196      	b.n	8001920 <__aeabi_dmul+0x454>
 80015f2:	221d      	movs	r2, #29
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	465a      	mov	r2, fp
 80015f8:	0001      	movs	r1, r0
 80015fa:	40da      	lsrs	r2, r3
 80015fc:	465e      	mov	r6, fp
 80015fe:	3908      	subs	r1, #8
 8001600:	408f      	lsls	r7, r1
 8001602:	0013      	movs	r3, r2
 8001604:	408e      	lsls	r6, r1
 8001606:	433b      	orrs	r3, r7
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	4b9c      	ldr	r3, [pc, #624]	; (800187c <__aeabi_dmul+0x3b0>)
 800160c:	2700      	movs	r7, #0
 800160e:	1a1b      	subs	r3, r3, r0
 8001610:	4699      	mov	r9, r3
 8001612:	2300      	movs	r3, #0
 8001614:	469b      	mov	fp, r3
 8001616:	e77d      	b.n	8001514 <__aeabi_dmul+0x48>
 8001618:	4641      	mov	r1, r8
 800161a:	4653      	mov	r3, sl
 800161c:	430b      	orrs	r3, r1
 800161e:	4993      	ldr	r1, [pc, #588]	; (800186c <__aeabi_dmul+0x3a0>)
 8001620:	468c      	mov	ip, r1
 8001622:	44e1      	add	r9, ip
 8001624:	2b00      	cmp	r3, #0
 8001626:	d000      	beq.n	800162a <__aeabi_dmul+0x15e>
 8001628:	e11a      	b.n	8001860 <__aeabi_dmul+0x394>
 800162a:	2202      	movs	r2, #2
 800162c:	2002      	movs	r0, #2
 800162e:	4317      	orrs	r7, r2
 8001630:	2200      	movs	r2, #0
 8001632:	e78c      	b.n	800154e <__aeabi_dmul+0x82>
 8001634:	4313      	orrs	r3, r2
 8001636:	d100      	bne.n	800163a <__aeabi_dmul+0x16e>
 8001638:	e10d      	b.n	8001856 <__aeabi_dmul+0x38a>
 800163a:	4643      	mov	r3, r8
 800163c:	2b00      	cmp	r3, #0
 800163e:	d100      	bne.n	8001642 <__aeabi_dmul+0x176>
 8001640:	e181      	b.n	8001946 <__aeabi_dmul+0x47a>
 8001642:	4640      	mov	r0, r8
 8001644:	f000 fd9e 	bl	8002184 <__clzsi2>
 8001648:	0002      	movs	r2, r0
 800164a:	3a0b      	subs	r2, #11
 800164c:	2a1c      	cmp	r2, #28
 800164e:	dd00      	ble.n	8001652 <__aeabi_dmul+0x186>
 8001650:	e172      	b.n	8001938 <__aeabi_dmul+0x46c>
 8001652:	0001      	movs	r1, r0
 8001654:	4643      	mov	r3, r8
 8001656:	3908      	subs	r1, #8
 8001658:	408b      	lsls	r3, r1
 800165a:	4698      	mov	r8, r3
 800165c:	231d      	movs	r3, #29
 800165e:	1a9a      	subs	r2, r3, r2
 8001660:	4653      	mov	r3, sl
 8001662:	40d3      	lsrs	r3, r2
 8001664:	001a      	movs	r2, r3
 8001666:	4643      	mov	r3, r8
 8001668:	4313      	orrs	r3, r2
 800166a:	4652      	mov	r2, sl
 800166c:	408a      	lsls	r2, r1
 800166e:	4649      	mov	r1, r9
 8001670:	1a08      	subs	r0, r1, r0
 8001672:	4982      	ldr	r1, [pc, #520]	; (800187c <__aeabi_dmul+0x3b0>)
 8001674:	4689      	mov	r9, r1
 8001676:	4481      	add	r9, r0
 8001678:	2000      	movs	r0, #0
 800167a:	e768      	b.n	800154e <__aeabi_dmul+0x82>
 800167c:	4b7b      	ldr	r3, [pc, #492]	; (800186c <__aeabi_dmul+0x3a0>)
 800167e:	2700      	movs	r7, #0
 8001680:	2600      	movs	r6, #0
 8001682:	e78e      	b.n	80015a2 <__aeabi_dmul+0xd6>
 8001684:	0c14      	lsrs	r4, r2, #16
 8001686:	0412      	lsls	r2, r2, #16
 8001688:	0c12      	lsrs	r2, r2, #16
 800168a:	0011      	movs	r1, r2
 800168c:	0c37      	lsrs	r7, r6, #16
 800168e:	0436      	lsls	r6, r6, #16
 8001690:	0c35      	lsrs	r5, r6, #16
 8001692:	4379      	muls	r1, r7
 8001694:	0028      	movs	r0, r5
 8001696:	468c      	mov	ip, r1
 8001698:	002e      	movs	r6, r5
 800169a:	4360      	muls	r0, r4
 800169c:	4460      	add	r0, ip
 800169e:	4683      	mov	fp, r0
 80016a0:	4356      	muls	r6, r2
 80016a2:	0021      	movs	r1, r4
 80016a4:	0c30      	lsrs	r0, r6, #16
 80016a6:	4680      	mov	r8, r0
 80016a8:	4658      	mov	r0, fp
 80016aa:	4379      	muls	r1, r7
 80016ac:	4440      	add	r0, r8
 80016ae:	9102      	str	r1, [sp, #8]
 80016b0:	4584      	cmp	ip, r0
 80016b2:	d906      	bls.n	80016c2 <__aeabi_dmul+0x1f6>
 80016b4:	4688      	mov	r8, r1
 80016b6:	2180      	movs	r1, #128	; 0x80
 80016b8:	0249      	lsls	r1, r1, #9
 80016ba:	468c      	mov	ip, r1
 80016bc:	44e0      	add	r8, ip
 80016be:	4641      	mov	r1, r8
 80016c0:	9102      	str	r1, [sp, #8]
 80016c2:	0436      	lsls	r6, r6, #16
 80016c4:	0c01      	lsrs	r1, r0, #16
 80016c6:	0c36      	lsrs	r6, r6, #16
 80016c8:	0400      	lsls	r0, r0, #16
 80016ca:	468b      	mov	fp, r1
 80016cc:	1981      	adds	r1, r0, r6
 80016ce:	0c1e      	lsrs	r6, r3, #16
 80016d0:	041b      	lsls	r3, r3, #16
 80016d2:	0c1b      	lsrs	r3, r3, #16
 80016d4:	9103      	str	r1, [sp, #12]
 80016d6:	0019      	movs	r1, r3
 80016d8:	4379      	muls	r1, r7
 80016da:	468c      	mov	ip, r1
 80016dc:	0028      	movs	r0, r5
 80016de:	4375      	muls	r5, r6
 80016e0:	4465      	add	r5, ip
 80016e2:	46a8      	mov	r8, r5
 80016e4:	4358      	muls	r0, r3
 80016e6:	0c05      	lsrs	r5, r0, #16
 80016e8:	4445      	add	r5, r8
 80016ea:	4377      	muls	r7, r6
 80016ec:	42a9      	cmp	r1, r5
 80016ee:	d903      	bls.n	80016f8 <__aeabi_dmul+0x22c>
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	0249      	lsls	r1, r1, #9
 80016f4:	468c      	mov	ip, r1
 80016f6:	4467      	add	r7, ip
 80016f8:	0c29      	lsrs	r1, r5, #16
 80016fa:	468c      	mov	ip, r1
 80016fc:	0039      	movs	r1, r7
 80016fe:	0400      	lsls	r0, r0, #16
 8001700:	0c00      	lsrs	r0, r0, #16
 8001702:	042d      	lsls	r5, r5, #16
 8001704:	182d      	adds	r5, r5, r0
 8001706:	4461      	add	r1, ip
 8001708:	44ab      	add	fp, r5
 800170a:	9105      	str	r1, [sp, #20]
 800170c:	4659      	mov	r1, fp
 800170e:	9104      	str	r1, [sp, #16]
 8001710:	9901      	ldr	r1, [sp, #4]
 8001712:	040f      	lsls	r7, r1, #16
 8001714:	0c3f      	lsrs	r7, r7, #16
 8001716:	0c08      	lsrs	r0, r1, #16
 8001718:	0039      	movs	r1, r7
 800171a:	4351      	muls	r1, r2
 800171c:	4342      	muls	r2, r0
 800171e:	4690      	mov	r8, r2
 8001720:	0002      	movs	r2, r0
 8001722:	468c      	mov	ip, r1
 8001724:	0c09      	lsrs	r1, r1, #16
 8001726:	468b      	mov	fp, r1
 8001728:	4362      	muls	r2, r4
 800172a:	437c      	muls	r4, r7
 800172c:	4444      	add	r4, r8
 800172e:	445c      	add	r4, fp
 8001730:	45a0      	cmp	r8, r4
 8001732:	d903      	bls.n	800173c <__aeabi_dmul+0x270>
 8001734:	2180      	movs	r1, #128	; 0x80
 8001736:	0249      	lsls	r1, r1, #9
 8001738:	4688      	mov	r8, r1
 800173a:	4442      	add	r2, r8
 800173c:	0c21      	lsrs	r1, r4, #16
 800173e:	4688      	mov	r8, r1
 8001740:	4661      	mov	r1, ip
 8001742:	0409      	lsls	r1, r1, #16
 8001744:	0c09      	lsrs	r1, r1, #16
 8001746:	468c      	mov	ip, r1
 8001748:	0039      	movs	r1, r7
 800174a:	4359      	muls	r1, r3
 800174c:	4343      	muls	r3, r0
 800174e:	4370      	muls	r0, r6
 8001750:	437e      	muls	r6, r7
 8001752:	0c0f      	lsrs	r7, r1, #16
 8001754:	18f6      	adds	r6, r6, r3
 8001756:	0424      	lsls	r4, r4, #16
 8001758:	19be      	adds	r6, r7, r6
 800175a:	4464      	add	r4, ip
 800175c:	4442      	add	r2, r8
 800175e:	468c      	mov	ip, r1
 8001760:	42b3      	cmp	r3, r6
 8001762:	d903      	bls.n	800176c <__aeabi_dmul+0x2a0>
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	025b      	lsls	r3, r3, #9
 8001768:	4698      	mov	r8, r3
 800176a:	4440      	add	r0, r8
 800176c:	9b02      	ldr	r3, [sp, #8]
 800176e:	4661      	mov	r1, ip
 8001770:	4698      	mov	r8, r3
 8001772:	9b04      	ldr	r3, [sp, #16]
 8001774:	0437      	lsls	r7, r6, #16
 8001776:	4443      	add	r3, r8
 8001778:	469b      	mov	fp, r3
 800177a:	45ab      	cmp	fp, r5
 800177c:	41ad      	sbcs	r5, r5
 800177e:	426b      	negs	r3, r5
 8001780:	040d      	lsls	r5, r1, #16
 8001782:	9905      	ldr	r1, [sp, #20]
 8001784:	0c2d      	lsrs	r5, r5, #16
 8001786:	468c      	mov	ip, r1
 8001788:	197f      	adds	r7, r7, r5
 800178a:	4467      	add	r7, ip
 800178c:	18fd      	adds	r5, r7, r3
 800178e:	46a8      	mov	r8, r5
 8001790:	465d      	mov	r5, fp
 8001792:	192d      	adds	r5, r5, r4
 8001794:	42a5      	cmp	r5, r4
 8001796:	41a4      	sbcs	r4, r4
 8001798:	4693      	mov	fp, r2
 800179a:	4264      	negs	r4, r4
 800179c:	46a4      	mov	ip, r4
 800179e:	44c3      	add	fp, r8
 80017a0:	44dc      	add	ip, fp
 80017a2:	428f      	cmp	r7, r1
 80017a4:	41bf      	sbcs	r7, r7
 80017a6:	4598      	cmp	r8, r3
 80017a8:	419b      	sbcs	r3, r3
 80017aa:	4593      	cmp	fp, r2
 80017ac:	4192      	sbcs	r2, r2
 80017ae:	45a4      	cmp	ip, r4
 80017b0:	41a4      	sbcs	r4, r4
 80017b2:	425b      	negs	r3, r3
 80017b4:	427f      	negs	r7, r7
 80017b6:	431f      	orrs	r7, r3
 80017b8:	0c36      	lsrs	r6, r6, #16
 80017ba:	4252      	negs	r2, r2
 80017bc:	4264      	negs	r4, r4
 80017be:	19bf      	adds	r7, r7, r6
 80017c0:	4322      	orrs	r2, r4
 80017c2:	18bf      	adds	r7, r7, r2
 80017c4:	4662      	mov	r2, ip
 80017c6:	1838      	adds	r0, r7, r0
 80017c8:	0243      	lsls	r3, r0, #9
 80017ca:	0dd2      	lsrs	r2, r2, #23
 80017cc:	9903      	ldr	r1, [sp, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	026a      	lsls	r2, r5, #9
 80017d2:	430a      	orrs	r2, r1
 80017d4:	1e50      	subs	r0, r2, #1
 80017d6:	4182      	sbcs	r2, r0
 80017d8:	4661      	mov	r1, ip
 80017da:	0ded      	lsrs	r5, r5, #23
 80017dc:	432a      	orrs	r2, r5
 80017de:	024e      	lsls	r6, r1, #9
 80017e0:	4332      	orrs	r2, r6
 80017e2:	01d9      	lsls	r1, r3, #7
 80017e4:	d400      	bmi.n	80017e8 <__aeabi_dmul+0x31c>
 80017e6:	e0b3      	b.n	8001950 <__aeabi_dmul+0x484>
 80017e8:	2601      	movs	r6, #1
 80017ea:	0850      	lsrs	r0, r2, #1
 80017ec:	4032      	ands	r2, r6
 80017ee:	4302      	orrs	r2, r0
 80017f0:	07de      	lsls	r6, r3, #31
 80017f2:	4332      	orrs	r2, r6
 80017f4:	085b      	lsrs	r3, r3, #1
 80017f6:	4c22      	ldr	r4, [pc, #136]	; (8001880 <__aeabi_dmul+0x3b4>)
 80017f8:	4454      	add	r4, sl
 80017fa:	2c00      	cmp	r4, #0
 80017fc:	dd62      	ble.n	80018c4 <__aeabi_dmul+0x3f8>
 80017fe:	0751      	lsls	r1, r2, #29
 8001800:	d009      	beq.n	8001816 <__aeabi_dmul+0x34a>
 8001802:	200f      	movs	r0, #15
 8001804:	4010      	ands	r0, r2
 8001806:	2804      	cmp	r0, #4
 8001808:	d005      	beq.n	8001816 <__aeabi_dmul+0x34a>
 800180a:	1d10      	adds	r0, r2, #4
 800180c:	4290      	cmp	r0, r2
 800180e:	4192      	sbcs	r2, r2
 8001810:	4252      	negs	r2, r2
 8001812:	189b      	adds	r3, r3, r2
 8001814:	0002      	movs	r2, r0
 8001816:	01d9      	lsls	r1, r3, #7
 8001818:	d504      	bpl.n	8001824 <__aeabi_dmul+0x358>
 800181a:	2480      	movs	r4, #128	; 0x80
 800181c:	4819      	ldr	r0, [pc, #100]	; (8001884 <__aeabi_dmul+0x3b8>)
 800181e:	00e4      	lsls	r4, r4, #3
 8001820:	4003      	ands	r3, r0
 8001822:	4454      	add	r4, sl
 8001824:	4818      	ldr	r0, [pc, #96]	; (8001888 <__aeabi_dmul+0x3bc>)
 8001826:	4284      	cmp	r4, r0
 8001828:	dd00      	ble.n	800182c <__aeabi_dmul+0x360>
 800182a:	e727      	b.n	800167c <__aeabi_dmul+0x1b0>
 800182c:	075e      	lsls	r6, r3, #29
 800182e:	025b      	lsls	r3, r3, #9
 8001830:	08d2      	lsrs	r2, r2, #3
 8001832:	0b1f      	lsrs	r7, r3, #12
 8001834:	0563      	lsls	r3, r4, #21
 8001836:	4316      	orrs	r6, r2
 8001838:	0d5b      	lsrs	r3, r3, #21
 800183a:	e6b2      	b.n	80015a2 <__aeabi_dmul+0xd6>
 800183c:	2300      	movs	r3, #0
 800183e:	4699      	mov	r9, r3
 8001840:	3301      	adds	r3, #1
 8001842:	2704      	movs	r7, #4
 8001844:	2600      	movs	r6, #0
 8001846:	469b      	mov	fp, r3
 8001848:	e664      	b.n	8001514 <__aeabi_dmul+0x48>
 800184a:	2303      	movs	r3, #3
 800184c:	9701      	str	r7, [sp, #4]
 800184e:	4681      	mov	r9, r0
 8001850:	270c      	movs	r7, #12
 8001852:	469b      	mov	fp, r3
 8001854:	e65e      	b.n	8001514 <__aeabi_dmul+0x48>
 8001856:	2201      	movs	r2, #1
 8001858:	2001      	movs	r0, #1
 800185a:	4317      	orrs	r7, r2
 800185c:	2200      	movs	r2, #0
 800185e:	e676      	b.n	800154e <__aeabi_dmul+0x82>
 8001860:	2303      	movs	r3, #3
 8001862:	2003      	movs	r0, #3
 8001864:	431f      	orrs	r7, r3
 8001866:	4643      	mov	r3, r8
 8001868:	e671      	b.n	800154e <__aeabi_dmul+0x82>
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	000007ff 	.word	0x000007ff
 8001870:	fffffc01 	.word	0xfffffc01
 8001874:	0800b2ec 	.word	0x0800b2ec
 8001878:	800fffff 	.word	0x800fffff
 800187c:	fffffc0d 	.word	0xfffffc0d
 8001880:	000003ff 	.word	0x000003ff
 8001884:	feffffff 	.word	0xfeffffff
 8001888:	000007fe 	.word	0x000007fe
 800188c:	2300      	movs	r3, #0
 800188e:	2780      	movs	r7, #128	; 0x80
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	033f      	lsls	r7, r7, #12
 8001894:	2600      	movs	r6, #0
 8001896:	4b43      	ldr	r3, [pc, #268]	; (80019a4 <__aeabi_dmul+0x4d8>)
 8001898:	e683      	b.n	80015a2 <__aeabi_dmul+0xd6>
 800189a:	9b01      	ldr	r3, [sp, #4]
 800189c:	0032      	movs	r2, r6
 800189e:	46a4      	mov	ip, r4
 80018a0:	4658      	mov	r0, fp
 80018a2:	e670      	b.n	8001586 <__aeabi_dmul+0xba>
 80018a4:	46ac      	mov	ip, r5
 80018a6:	e66e      	b.n	8001586 <__aeabi_dmul+0xba>
 80018a8:	2780      	movs	r7, #128	; 0x80
 80018aa:	9901      	ldr	r1, [sp, #4]
 80018ac:	033f      	lsls	r7, r7, #12
 80018ae:	4239      	tst	r1, r7
 80018b0:	d02d      	beq.n	800190e <__aeabi_dmul+0x442>
 80018b2:	423b      	tst	r3, r7
 80018b4:	d12b      	bne.n	800190e <__aeabi_dmul+0x442>
 80018b6:	431f      	orrs	r7, r3
 80018b8:	033f      	lsls	r7, r7, #12
 80018ba:	0b3f      	lsrs	r7, r7, #12
 80018bc:	9500      	str	r5, [sp, #0]
 80018be:	0016      	movs	r6, r2
 80018c0:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <__aeabi_dmul+0x4d8>)
 80018c2:	e66e      	b.n	80015a2 <__aeabi_dmul+0xd6>
 80018c4:	2501      	movs	r5, #1
 80018c6:	1b2d      	subs	r5, r5, r4
 80018c8:	2d38      	cmp	r5, #56	; 0x38
 80018ca:	dd00      	ble.n	80018ce <__aeabi_dmul+0x402>
 80018cc:	e666      	b.n	800159c <__aeabi_dmul+0xd0>
 80018ce:	2d1f      	cmp	r5, #31
 80018d0:	dc40      	bgt.n	8001954 <__aeabi_dmul+0x488>
 80018d2:	4835      	ldr	r0, [pc, #212]	; (80019a8 <__aeabi_dmul+0x4dc>)
 80018d4:	001c      	movs	r4, r3
 80018d6:	4450      	add	r0, sl
 80018d8:	0016      	movs	r6, r2
 80018da:	4082      	lsls	r2, r0
 80018dc:	4084      	lsls	r4, r0
 80018de:	40ee      	lsrs	r6, r5
 80018e0:	1e50      	subs	r0, r2, #1
 80018e2:	4182      	sbcs	r2, r0
 80018e4:	4334      	orrs	r4, r6
 80018e6:	4314      	orrs	r4, r2
 80018e8:	40eb      	lsrs	r3, r5
 80018ea:	0762      	lsls	r2, r4, #29
 80018ec:	d009      	beq.n	8001902 <__aeabi_dmul+0x436>
 80018ee:	220f      	movs	r2, #15
 80018f0:	4022      	ands	r2, r4
 80018f2:	2a04      	cmp	r2, #4
 80018f4:	d005      	beq.n	8001902 <__aeabi_dmul+0x436>
 80018f6:	0022      	movs	r2, r4
 80018f8:	1d14      	adds	r4, r2, #4
 80018fa:	4294      	cmp	r4, r2
 80018fc:	4180      	sbcs	r0, r0
 80018fe:	4240      	negs	r0, r0
 8001900:	181b      	adds	r3, r3, r0
 8001902:	021a      	lsls	r2, r3, #8
 8001904:	d53e      	bpl.n	8001984 <__aeabi_dmul+0x4b8>
 8001906:	2301      	movs	r3, #1
 8001908:	2700      	movs	r7, #0
 800190a:	2600      	movs	r6, #0
 800190c:	e649      	b.n	80015a2 <__aeabi_dmul+0xd6>
 800190e:	2780      	movs	r7, #128	; 0x80
 8001910:	9b01      	ldr	r3, [sp, #4]
 8001912:	033f      	lsls	r7, r7, #12
 8001914:	431f      	orrs	r7, r3
 8001916:	033f      	lsls	r7, r7, #12
 8001918:	0b3f      	lsrs	r7, r7, #12
 800191a:	9400      	str	r4, [sp, #0]
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <__aeabi_dmul+0x4d8>)
 800191e:	e640      	b.n	80015a2 <__aeabi_dmul+0xd6>
 8001920:	0003      	movs	r3, r0
 8001922:	465a      	mov	r2, fp
 8001924:	3b28      	subs	r3, #40	; 0x28
 8001926:	409a      	lsls	r2, r3
 8001928:	2600      	movs	r6, #0
 800192a:	9201      	str	r2, [sp, #4]
 800192c:	e66d      	b.n	800160a <__aeabi_dmul+0x13e>
 800192e:	4658      	mov	r0, fp
 8001930:	f000 fc28 	bl	8002184 <__clzsi2>
 8001934:	3020      	adds	r0, #32
 8001936:	e657      	b.n	80015e8 <__aeabi_dmul+0x11c>
 8001938:	0003      	movs	r3, r0
 800193a:	4652      	mov	r2, sl
 800193c:	3b28      	subs	r3, #40	; 0x28
 800193e:	409a      	lsls	r2, r3
 8001940:	0013      	movs	r3, r2
 8001942:	2200      	movs	r2, #0
 8001944:	e693      	b.n	800166e <__aeabi_dmul+0x1a2>
 8001946:	4650      	mov	r0, sl
 8001948:	f000 fc1c 	bl	8002184 <__clzsi2>
 800194c:	3020      	adds	r0, #32
 800194e:	e67b      	b.n	8001648 <__aeabi_dmul+0x17c>
 8001950:	46ca      	mov	sl, r9
 8001952:	e750      	b.n	80017f6 <__aeabi_dmul+0x32a>
 8001954:	201f      	movs	r0, #31
 8001956:	001e      	movs	r6, r3
 8001958:	4240      	negs	r0, r0
 800195a:	1b04      	subs	r4, r0, r4
 800195c:	40e6      	lsrs	r6, r4
 800195e:	2d20      	cmp	r5, #32
 8001960:	d003      	beq.n	800196a <__aeabi_dmul+0x49e>
 8001962:	4c12      	ldr	r4, [pc, #72]	; (80019ac <__aeabi_dmul+0x4e0>)
 8001964:	4454      	add	r4, sl
 8001966:	40a3      	lsls	r3, r4
 8001968:	431a      	orrs	r2, r3
 800196a:	1e50      	subs	r0, r2, #1
 800196c:	4182      	sbcs	r2, r0
 800196e:	4332      	orrs	r2, r6
 8001970:	2607      	movs	r6, #7
 8001972:	2700      	movs	r7, #0
 8001974:	4016      	ands	r6, r2
 8001976:	d009      	beq.n	800198c <__aeabi_dmul+0x4c0>
 8001978:	200f      	movs	r0, #15
 800197a:	2300      	movs	r3, #0
 800197c:	4010      	ands	r0, r2
 800197e:	0014      	movs	r4, r2
 8001980:	2804      	cmp	r0, #4
 8001982:	d1b9      	bne.n	80018f8 <__aeabi_dmul+0x42c>
 8001984:	0022      	movs	r2, r4
 8001986:	075e      	lsls	r6, r3, #29
 8001988:	025b      	lsls	r3, r3, #9
 800198a:	0b1f      	lsrs	r7, r3, #12
 800198c:	08d2      	lsrs	r2, r2, #3
 800198e:	4316      	orrs	r6, r2
 8001990:	2300      	movs	r3, #0
 8001992:	e606      	b.n	80015a2 <__aeabi_dmul+0xd6>
 8001994:	2780      	movs	r7, #128	; 0x80
 8001996:	033f      	lsls	r7, r7, #12
 8001998:	431f      	orrs	r7, r3
 800199a:	033f      	lsls	r7, r7, #12
 800199c:	0b3f      	lsrs	r7, r7, #12
 800199e:	0016      	movs	r6, r2
 80019a0:	4b00      	ldr	r3, [pc, #0]	; (80019a4 <__aeabi_dmul+0x4d8>)
 80019a2:	e5fe      	b.n	80015a2 <__aeabi_dmul+0xd6>
 80019a4:	000007ff 	.word	0x000007ff
 80019a8:	0000041e 	.word	0x0000041e
 80019ac:	0000043e 	.word	0x0000043e

080019b0 <__aeabi_dsub>:
 80019b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b2:	4657      	mov	r7, sl
 80019b4:	464e      	mov	r6, r9
 80019b6:	4645      	mov	r5, r8
 80019b8:	46de      	mov	lr, fp
 80019ba:	000c      	movs	r4, r1
 80019bc:	0309      	lsls	r1, r1, #12
 80019be:	b5e0      	push	{r5, r6, r7, lr}
 80019c0:	0a49      	lsrs	r1, r1, #9
 80019c2:	0f46      	lsrs	r6, r0, #29
 80019c4:	005f      	lsls	r7, r3, #1
 80019c6:	4331      	orrs	r1, r6
 80019c8:	031e      	lsls	r6, r3, #12
 80019ca:	0fdb      	lsrs	r3, r3, #31
 80019cc:	0a76      	lsrs	r6, r6, #9
 80019ce:	469b      	mov	fp, r3
 80019d0:	0f53      	lsrs	r3, r2, #29
 80019d2:	4333      	orrs	r3, r6
 80019d4:	4ec8      	ldr	r6, [pc, #800]	; (8001cf8 <__aeabi_dsub+0x348>)
 80019d6:	0065      	lsls	r5, r4, #1
 80019d8:	00c0      	lsls	r0, r0, #3
 80019da:	0fe4      	lsrs	r4, r4, #31
 80019dc:	00d2      	lsls	r2, r2, #3
 80019de:	0d6d      	lsrs	r5, r5, #21
 80019e0:	46a2      	mov	sl, r4
 80019e2:	4681      	mov	r9, r0
 80019e4:	0d7f      	lsrs	r7, r7, #21
 80019e6:	469c      	mov	ip, r3
 80019e8:	4690      	mov	r8, r2
 80019ea:	42b7      	cmp	r7, r6
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dsub+0x40>
 80019ee:	e0b9      	b.n	8001b64 <__aeabi_dsub+0x1b4>
 80019f0:	465b      	mov	r3, fp
 80019f2:	2601      	movs	r6, #1
 80019f4:	4073      	eors	r3, r6
 80019f6:	469b      	mov	fp, r3
 80019f8:	1bee      	subs	r6, r5, r7
 80019fa:	45a3      	cmp	fp, r4
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x50>
 80019fe:	e083      	b.n	8001b08 <__aeabi_dsub+0x158>
 8001a00:	2e00      	cmp	r6, #0
 8001a02:	dd63      	ble.n	8001acc <__aeabi_dsub+0x11c>
 8001a04:	2f00      	cmp	r7, #0
 8001a06:	d000      	beq.n	8001a0a <__aeabi_dsub+0x5a>
 8001a08:	e0b1      	b.n	8001b6e <__aeabi_dsub+0x1be>
 8001a0a:	4663      	mov	r3, ip
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dsub+0x62>
 8001a10:	e123      	b.n	8001c5a <__aeabi_dsub+0x2aa>
 8001a12:	1e73      	subs	r3, r6, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d000      	beq.n	8001a1a <__aeabi_dsub+0x6a>
 8001a18:	e1ba      	b.n	8001d90 <__aeabi_dsub+0x3e0>
 8001a1a:	1a86      	subs	r6, r0, r2
 8001a1c:	4663      	mov	r3, ip
 8001a1e:	42b0      	cmp	r0, r6
 8001a20:	4180      	sbcs	r0, r0
 8001a22:	2501      	movs	r5, #1
 8001a24:	1ac9      	subs	r1, r1, r3
 8001a26:	4240      	negs	r0, r0
 8001a28:	1a09      	subs	r1, r1, r0
 8001a2a:	020b      	lsls	r3, r1, #8
 8001a2c:	d400      	bmi.n	8001a30 <__aeabi_dsub+0x80>
 8001a2e:	e147      	b.n	8001cc0 <__aeabi_dsub+0x310>
 8001a30:	0249      	lsls	r1, r1, #9
 8001a32:	0a4b      	lsrs	r3, r1, #9
 8001a34:	4698      	mov	r8, r3
 8001a36:	4643      	mov	r3, r8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d100      	bne.n	8001a3e <__aeabi_dsub+0x8e>
 8001a3c:	e189      	b.n	8001d52 <__aeabi_dsub+0x3a2>
 8001a3e:	4640      	mov	r0, r8
 8001a40:	f000 fba0 	bl	8002184 <__clzsi2>
 8001a44:	0003      	movs	r3, r0
 8001a46:	3b08      	subs	r3, #8
 8001a48:	2b1f      	cmp	r3, #31
 8001a4a:	dd00      	ble.n	8001a4e <__aeabi_dsub+0x9e>
 8001a4c:	e17c      	b.n	8001d48 <__aeabi_dsub+0x398>
 8001a4e:	2220      	movs	r2, #32
 8001a50:	0030      	movs	r0, r6
 8001a52:	1ad2      	subs	r2, r2, r3
 8001a54:	4641      	mov	r1, r8
 8001a56:	40d0      	lsrs	r0, r2
 8001a58:	4099      	lsls	r1, r3
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	409e      	lsls	r6, r3
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	429d      	cmp	r5, r3
 8001a62:	dd00      	ble.n	8001a66 <__aeabi_dsub+0xb6>
 8001a64:	e16a      	b.n	8001d3c <__aeabi_dsub+0x38c>
 8001a66:	1b5d      	subs	r5, r3, r5
 8001a68:	1c6b      	adds	r3, r5, #1
 8001a6a:	2b1f      	cmp	r3, #31
 8001a6c:	dd00      	ble.n	8001a70 <__aeabi_dsub+0xc0>
 8001a6e:	e194      	b.n	8001d9a <__aeabi_dsub+0x3ea>
 8001a70:	2120      	movs	r1, #32
 8001a72:	0010      	movs	r0, r2
 8001a74:	0035      	movs	r5, r6
 8001a76:	1ac9      	subs	r1, r1, r3
 8001a78:	408e      	lsls	r6, r1
 8001a7a:	40da      	lsrs	r2, r3
 8001a7c:	4088      	lsls	r0, r1
 8001a7e:	40dd      	lsrs	r5, r3
 8001a80:	1e71      	subs	r1, r6, #1
 8001a82:	418e      	sbcs	r6, r1
 8001a84:	0011      	movs	r1, r2
 8001a86:	2207      	movs	r2, #7
 8001a88:	4328      	orrs	r0, r5
 8001a8a:	2500      	movs	r5, #0
 8001a8c:	4306      	orrs	r6, r0
 8001a8e:	4032      	ands	r2, r6
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d009      	beq.n	8001aa8 <__aeabi_dsub+0xf8>
 8001a94:	230f      	movs	r3, #15
 8001a96:	4033      	ands	r3, r6
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d005      	beq.n	8001aa8 <__aeabi_dsub+0xf8>
 8001a9c:	1d33      	adds	r3, r6, #4
 8001a9e:	42b3      	cmp	r3, r6
 8001aa0:	41b6      	sbcs	r6, r6
 8001aa2:	4276      	negs	r6, r6
 8001aa4:	1989      	adds	r1, r1, r6
 8001aa6:	001e      	movs	r6, r3
 8001aa8:	020b      	lsls	r3, r1, #8
 8001aaa:	d400      	bmi.n	8001aae <__aeabi_dsub+0xfe>
 8001aac:	e23d      	b.n	8001f2a <__aeabi_dsub+0x57a>
 8001aae:	1c6a      	adds	r2, r5, #1
 8001ab0:	4b91      	ldr	r3, [pc, #580]	; (8001cf8 <__aeabi_dsub+0x348>)
 8001ab2:	0555      	lsls	r5, r2, #21
 8001ab4:	0d6d      	lsrs	r5, r5, #21
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d100      	bne.n	8001abc <__aeabi_dsub+0x10c>
 8001aba:	e119      	b.n	8001cf0 <__aeabi_dsub+0x340>
 8001abc:	4a8f      	ldr	r2, [pc, #572]	; (8001cfc <__aeabi_dsub+0x34c>)
 8001abe:	08f6      	lsrs	r6, r6, #3
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	0757      	lsls	r7, r2, #29
 8001ac4:	0252      	lsls	r2, r2, #9
 8001ac6:	4337      	orrs	r7, r6
 8001ac8:	0b12      	lsrs	r2, r2, #12
 8001aca:	e09b      	b.n	8001c04 <__aeabi_dsub+0x254>
 8001acc:	2e00      	cmp	r6, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dsub+0x122>
 8001ad0:	e0c5      	b.n	8001c5e <__aeabi_dsub+0x2ae>
 8001ad2:	1c6e      	adds	r6, r5, #1
 8001ad4:	0576      	lsls	r6, r6, #21
 8001ad6:	0d76      	lsrs	r6, r6, #21
 8001ad8:	2e01      	cmp	r6, #1
 8001ada:	dc00      	bgt.n	8001ade <__aeabi_dsub+0x12e>
 8001adc:	e148      	b.n	8001d70 <__aeabi_dsub+0x3c0>
 8001ade:	4667      	mov	r7, ip
 8001ae0:	1a86      	subs	r6, r0, r2
 8001ae2:	1bcb      	subs	r3, r1, r7
 8001ae4:	42b0      	cmp	r0, r6
 8001ae6:	41bf      	sbcs	r7, r7
 8001ae8:	427f      	negs	r7, r7
 8001aea:	46b8      	mov	r8, r7
 8001aec:	001f      	movs	r7, r3
 8001aee:	4643      	mov	r3, r8
 8001af0:	1aff      	subs	r7, r7, r3
 8001af2:	003b      	movs	r3, r7
 8001af4:	46b8      	mov	r8, r7
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	d500      	bpl.n	8001afc <__aeabi_dsub+0x14c>
 8001afa:	e15f      	b.n	8001dbc <__aeabi_dsub+0x40c>
 8001afc:	4337      	orrs	r7, r6
 8001afe:	d19a      	bne.n	8001a36 <__aeabi_dsub+0x86>
 8001b00:	2200      	movs	r2, #0
 8001b02:	2400      	movs	r4, #0
 8001b04:	2500      	movs	r5, #0
 8001b06:	e079      	b.n	8001bfc <__aeabi_dsub+0x24c>
 8001b08:	2e00      	cmp	r6, #0
 8001b0a:	dc00      	bgt.n	8001b0e <__aeabi_dsub+0x15e>
 8001b0c:	e0fa      	b.n	8001d04 <__aeabi_dsub+0x354>
 8001b0e:	2f00      	cmp	r7, #0
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x164>
 8001b12:	e08d      	b.n	8001c30 <__aeabi_dsub+0x280>
 8001b14:	4b78      	ldr	r3, [pc, #480]	; (8001cf8 <__aeabi_dsub+0x348>)
 8001b16:	429d      	cmp	r5, r3
 8001b18:	d067      	beq.n	8001bea <__aeabi_dsub+0x23a>
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	4667      	mov	r7, ip
 8001b1e:	041b      	lsls	r3, r3, #16
 8001b20:	431f      	orrs	r7, r3
 8001b22:	46bc      	mov	ip, r7
 8001b24:	2e38      	cmp	r6, #56	; 0x38
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dsub+0x17a>
 8001b28:	e152      	b.n	8001dd0 <__aeabi_dsub+0x420>
 8001b2a:	4663      	mov	r3, ip
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	1e5a      	subs	r2, r3, #1
 8001b30:	4193      	sbcs	r3, r2
 8001b32:	181e      	adds	r6, r3, r0
 8001b34:	4286      	cmp	r6, r0
 8001b36:	4180      	sbcs	r0, r0
 8001b38:	4240      	negs	r0, r0
 8001b3a:	1809      	adds	r1, r1, r0
 8001b3c:	020b      	lsls	r3, r1, #8
 8001b3e:	d400      	bmi.n	8001b42 <__aeabi_dsub+0x192>
 8001b40:	e0be      	b.n	8001cc0 <__aeabi_dsub+0x310>
 8001b42:	4b6d      	ldr	r3, [pc, #436]	; (8001cf8 <__aeabi_dsub+0x348>)
 8001b44:	3501      	adds	r5, #1
 8001b46:	429d      	cmp	r5, r3
 8001b48:	d100      	bne.n	8001b4c <__aeabi_dsub+0x19c>
 8001b4a:	e0d2      	b.n	8001cf2 <__aeabi_dsub+0x342>
 8001b4c:	4a6b      	ldr	r2, [pc, #428]	; (8001cfc <__aeabi_dsub+0x34c>)
 8001b4e:	0873      	lsrs	r3, r6, #1
 8001b50:	400a      	ands	r2, r1
 8001b52:	2101      	movs	r1, #1
 8001b54:	400e      	ands	r6, r1
 8001b56:	431e      	orrs	r6, r3
 8001b58:	0851      	lsrs	r1, r2, #1
 8001b5a:	07d3      	lsls	r3, r2, #31
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	431e      	orrs	r6, r3
 8001b60:	4032      	ands	r2, r6
 8001b62:	e795      	b.n	8001a90 <__aeabi_dsub+0xe0>
 8001b64:	001e      	movs	r6, r3
 8001b66:	4316      	orrs	r6, r2
 8001b68:	d000      	beq.n	8001b6c <__aeabi_dsub+0x1bc>
 8001b6a:	e745      	b.n	80019f8 <__aeabi_dsub+0x48>
 8001b6c:	e740      	b.n	80019f0 <__aeabi_dsub+0x40>
 8001b6e:	4b62      	ldr	r3, [pc, #392]	; (8001cf8 <__aeabi_dsub+0x348>)
 8001b70:	429d      	cmp	r5, r3
 8001b72:	d03a      	beq.n	8001bea <__aeabi_dsub+0x23a>
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	4667      	mov	r7, ip
 8001b78:	041b      	lsls	r3, r3, #16
 8001b7a:	431f      	orrs	r7, r3
 8001b7c:	46bc      	mov	ip, r7
 8001b7e:	2e38      	cmp	r6, #56	; 0x38
 8001b80:	dd00      	ble.n	8001b84 <__aeabi_dsub+0x1d4>
 8001b82:	e0eb      	b.n	8001d5c <__aeabi_dsub+0x3ac>
 8001b84:	2e1f      	cmp	r6, #31
 8001b86:	dc00      	bgt.n	8001b8a <__aeabi_dsub+0x1da>
 8001b88:	e13a      	b.n	8001e00 <__aeabi_dsub+0x450>
 8001b8a:	0033      	movs	r3, r6
 8001b8c:	4667      	mov	r7, ip
 8001b8e:	3b20      	subs	r3, #32
 8001b90:	40df      	lsrs	r7, r3
 8001b92:	003b      	movs	r3, r7
 8001b94:	2e20      	cmp	r6, #32
 8001b96:	d005      	beq.n	8001ba4 <__aeabi_dsub+0x1f4>
 8001b98:	2740      	movs	r7, #64	; 0x40
 8001b9a:	1bbf      	subs	r7, r7, r6
 8001b9c:	4666      	mov	r6, ip
 8001b9e:	40be      	lsls	r6, r7
 8001ba0:	4332      	orrs	r2, r6
 8001ba2:	4690      	mov	r8, r2
 8001ba4:	4646      	mov	r6, r8
 8001ba6:	1e72      	subs	r2, r6, #1
 8001ba8:	4196      	sbcs	r6, r2
 8001baa:	4333      	orrs	r3, r6
 8001bac:	e0da      	b.n	8001d64 <__aeabi_dsub+0x3b4>
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dsub+0x204>
 8001bb2:	e214      	b.n	8001fde <__aeabi_dsub+0x62e>
 8001bb4:	4663      	mov	r3, ip
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_dsub+0x20c>
 8001bba:	e168      	b.n	8001e8e <__aeabi_dsub+0x4de>
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	074e      	lsls	r6, r1, #29
 8001bc0:	08c0      	lsrs	r0, r0, #3
 8001bc2:	08c9      	lsrs	r1, r1, #3
 8001bc4:	031b      	lsls	r3, r3, #12
 8001bc6:	4306      	orrs	r6, r0
 8001bc8:	4219      	tst	r1, r3
 8001bca:	d008      	beq.n	8001bde <__aeabi_dsub+0x22e>
 8001bcc:	4660      	mov	r0, ip
 8001bce:	08c0      	lsrs	r0, r0, #3
 8001bd0:	4218      	tst	r0, r3
 8001bd2:	d104      	bne.n	8001bde <__aeabi_dsub+0x22e>
 8001bd4:	4663      	mov	r3, ip
 8001bd6:	0001      	movs	r1, r0
 8001bd8:	08d2      	lsrs	r2, r2, #3
 8001bda:	075e      	lsls	r6, r3, #29
 8001bdc:	4316      	orrs	r6, r2
 8001bde:	00f3      	lsls	r3, r6, #3
 8001be0:	4699      	mov	r9, r3
 8001be2:	00c9      	lsls	r1, r1, #3
 8001be4:	0f72      	lsrs	r2, r6, #29
 8001be6:	4d44      	ldr	r5, [pc, #272]	; (8001cf8 <__aeabi_dsub+0x348>)
 8001be8:	4311      	orrs	r1, r2
 8001bea:	464b      	mov	r3, r9
 8001bec:	08de      	lsrs	r6, r3, #3
 8001bee:	4b42      	ldr	r3, [pc, #264]	; (8001cf8 <__aeabi_dsub+0x348>)
 8001bf0:	074f      	lsls	r7, r1, #29
 8001bf2:	4337      	orrs	r7, r6
 8001bf4:	08ca      	lsrs	r2, r1, #3
 8001bf6:	429d      	cmp	r5, r3
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x24c>
 8001bfa:	e06e      	b.n	8001cda <__aeabi_dsub+0x32a>
 8001bfc:	0312      	lsls	r2, r2, #12
 8001bfe:	056d      	lsls	r5, r5, #21
 8001c00:	0b12      	lsrs	r2, r2, #12
 8001c02:	0d6d      	lsrs	r5, r5, #21
 8001c04:	2100      	movs	r1, #0
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	0b13      	lsrs	r3, r2, #12
 8001c0a:	0d0a      	lsrs	r2, r1, #20
 8001c0c:	0512      	lsls	r2, r2, #20
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <__aeabi_dsub+0x350>)
 8001c12:	052d      	lsls	r5, r5, #20
 8001c14:	4013      	ands	r3, r2
 8001c16:	432b      	orrs	r3, r5
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	07e4      	lsls	r4, r4, #31
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	4323      	orrs	r3, r4
 8001c20:	0038      	movs	r0, r7
 8001c22:	0019      	movs	r1, r3
 8001c24:	bc3c      	pop	{r2, r3, r4, r5}
 8001c26:	4690      	mov	r8, r2
 8001c28:	4699      	mov	r9, r3
 8001c2a:	46a2      	mov	sl, r4
 8001c2c:	46ab      	mov	fp, r5
 8001c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c30:	4663      	mov	r3, ip
 8001c32:	4313      	orrs	r3, r2
 8001c34:	d011      	beq.n	8001c5a <__aeabi_dsub+0x2aa>
 8001c36:	1e73      	subs	r3, r6, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d000      	beq.n	8001c3e <__aeabi_dsub+0x28e>
 8001c3c:	e107      	b.n	8001e4e <__aeabi_dsub+0x49e>
 8001c3e:	1886      	adds	r6, r0, r2
 8001c40:	4286      	cmp	r6, r0
 8001c42:	4180      	sbcs	r0, r0
 8001c44:	4461      	add	r1, ip
 8001c46:	4240      	negs	r0, r0
 8001c48:	1809      	adds	r1, r1, r0
 8001c4a:	2501      	movs	r5, #1
 8001c4c:	020b      	lsls	r3, r1, #8
 8001c4e:	d537      	bpl.n	8001cc0 <__aeabi_dsub+0x310>
 8001c50:	2502      	movs	r5, #2
 8001c52:	e77b      	b.n	8001b4c <__aeabi_dsub+0x19c>
 8001c54:	003e      	movs	r6, r7
 8001c56:	4661      	mov	r1, ip
 8001c58:	4691      	mov	r9, r2
 8001c5a:	0035      	movs	r5, r6
 8001c5c:	e7c5      	b.n	8001bea <__aeabi_dsub+0x23a>
 8001c5e:	465c      	mov	r4, fp
 8001c60:	2d00      	cmp	r5, #0
 8001c62:	d000      	beq.n	8001c66 <__aeabi_dsub+0x2b6>
 8001c64:	e0e1      	b.n	8001e2a <__aeabi_dsub+0x47a>
 8001c66:	000b      	movs	r3, r1
 8001c68:	4303      	orrs	r3, r0
 8001c6a:	d0f3      	beq.n	8001c54 <__aeabi_dsub+0x2a4>
 8001c6c:	1c73      	adds	r3, r6, #1
 8001c6e:	d100      	bne.n	8001c72 <__aeabi_dsub+0x2c2>
 8001c70:	e1ac      	b.n	8001fcc <__aeabi_dsub+0x61c>
 8001c72:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <__aeabi_dsub+0x348>)
 8001c74:	429f      	cmp	r7, r3
 8001c76:	d100      	bne.n	8001c7a <__aeabi_dsub+0x2ca>
 8001c78:	e13a      	b.n	8001ef0 <__aeabi_dsub+0x540>
 8001c7a:	43f3      	mvns	r3, r6
 8001c7c:	2b38      	cmp	r3, #56	; 0x38
 8001c7e:	dd00      	ble.n	8001c82 <__aeabi_dsub+0x2d2>
 8001c80:	e16f      	b.n	8001f62 <__aeabi_dsub+0x5b2>
 8001c82:	2b1f      	cmp	r3, #31
 8001c84:	dd00      	ble.n	8001c88 <__aeabi_dsub+0x2d8>
 8001c86:	e18c      	b.n	8001fa2 <__aeabi_dsub+0x5f2>
 8001c88:	2520      	movs	r5, #32
 8001c8a:	000e      	movs	r6, r1
 8001c8c:	1aed      	subs	r5, r5, r3
 8001c8e:	40ae      	lsls	r6, r5
 8001c90:	46b0      	mov	r8, r6
 8001c92:	0006      	movs	r6, r0
 8001c94:	46aa      	mov	sl, r5
 8001c96:	40de      	lsrs	r6, r3
 8001c98:	4645      	mov	r5, r8
 8001c9a:	4335      	orrs	r5, r6
 8001c9c:	002e      	movs	r6, r5
 8001c9e:	4655      	mov	r5, sl
 8001ca0:	40d9      	lsrs	r1, r3
 8001ca2:	40a8      	lsls	r0, r5
 8001ca4:	4663      	mov	r3, ip
 8001ca6:	1e45      	subs	r5, r0, #1
 8001ca8:	41a8      	sbcs	r0, r5
 8001caa:	1a5b      	subs	r3, r3, r1
 8001cac:	469c      	mov	ip, r3
 8001cae:	4330      	orrs	r0, r6
 8001cb0:	1a16      	subs	r6, r2, r0
 8001cb2:	42b2      	cmp	r2, r6
 8001cb4:	4192      	sbcs	r2, r2
 8001cb6:	4663      	mov	r3, ip
 8001cb8:	4252      	negs	r2, r2
 8001cba:	1a99      	subs	r1, r3, r2
 8001cbc:	003d      	movs	r5, r7
 8001cbe:	e6b4      	b.n	8001a2a <__aeabi_dsub+0x7a>
 8001cc0:	2207      	movs	r2, #7
 8001cc2:	4032      	ands	r2, r6
 8001cc4:	2a00      	cmp	r2, #0
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dsub+0x31a>
 8001cc8:	e6e4      	b.n	8001a94 <__aeabi_dsub+0xe4>
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <__aeabi_dsub+0x348>)
 8001ccc:	08f6      	lsrs	r6, r6, #3
 8001cce:	074f      	lsls	r7, r1, #29
 8001cd0:	4337      	orrs	r7, r6
 8001cd2:	08ca      	lsrs	r2, r1, #3
 8001cd4:	429d      	cmp	r5, r3
 8001cd6:	d000      	beq.n	8001cda <__aeabi_dsub+0x32a>
 8001cd8:	e790      	b.n	8001bfc <__aeabi_dsub+0x24c>
 8001cda:	003b      	movs	r3, r7
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	d100      	bne.n	8001ce2 <__aeabi_dsub+0x332>
 8001ce0:	e1a6      	b.n	8002030 <__aeabi_dsub+0x680>
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	031b      	lsls	r3, r3, #12
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	0312      	lsls	r2, r2, #12
 8001cea:	0b12      	lsrs	r2, r2, #12
 8001cec:	4d02      	ldr	r5, [pc, #8]	; (8001cf8 <__aeabi_dsub+0x348>)
 8001cee:	e789      	b.n	8001c04 <__aeabi_dsub+0x254>
 8001cf0:	0015      	movs	r5, r2
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2700      	movs	r7, #0
 8001cf6:	e785      	b.n	8001c04 <__aeabi_dsub+0x254>
 8001cf8:	000007ff 	.word	0x000007ff
 8001cfc:	ff7fffff 	.word	0xff7fffff
 8001d00:	800fffff 	.word	0x800fffff
 8001d04:	2e00      	cmp	r6, #0
 8001d06:	d000      	beq.n	8001d0a <__aeabi_dsub+0x35a>
 8001d08:	e0c7      	b.n	8001e9a <__aeabi_dsub+0x4ea>
 8001d0a:	1c6b      	adds	r3, r5, #1
 8001d0c:	055e      	lsls	r6, r3, #21
 8001d0e:	0d76      	lsrs	r6, r6, #21
 8001d10:	2e01      	cmp	r6, #1
 8001d12:	dc00      	bgt.n	8001d16 <__aeabi_dsub+0x366>
 8001d14:	e0f0      	b.n	8001ef8 <__aeabi_dsub+0x548>
 8001d16:	4dc8      	ldr	r5, [pc, #800]	; (8002038 <__aeabi_dsub+0x688>)
 8001d18:	42ab      	cmp	r3, r5
 8001d1a:	d100      	bne.n	8001d1e <__aeabi_dsub+0x36e>
 8001d1c:	e0b9      	b.n	8001e92 <__aeabi_dsub+0x4e2>
 8001d1e:	1885      	adds	r5, r0, r2
 8001d20:	000a      	movs	r2, r1
 8001d22:	4285      	cmp	r5, r0
 8001d24:	4189      	sbcs	r1, r1
 8001d26:	4462      	add	r2, ip
 8001d28:	4249      	negs	r1, r1
 8001d2a:	1851      	adds	r1, r2, r1
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	07ce      	lsls	r6, r1, #31
 8001d30:	086d      	lsrs	r5, r5, #1
 8001d32:	432e      	orrs	r6, r5
 8001d34:	0849      	lsrs	r1, r1, #1
 8001d36:	4032      	ands	r2, r6
 8001d38:	001d      	movs	r5, r3
 8001d3a:	e6a9      	b.n	8001a90 <__aeabi_dsub+0xe0>
 8001d3c:	49bf      	ldr	r1, [pc, #764]	; (800203c <__aeabi_dsub+0x68c>)
 8001d3e:	1aed      	subs	r5, r5, r3
 8001d40:	4011      	ands	r1, r2
 8001d42:	2207      	movs	r2, #7
 8001d44:	4032      	ands	r2, r6
 8001d46:	e6a3      	b.n	8001a90 <__aeabi_dsub+0xe0>
 8001d48:	0032      	movs	r2, r6
 8001d4a:	3828      	subs	r0, #40	; 0x28
 8001d4c:	4082      	lsls	r2, r0
 8001d4e:	2600      	movs	r6, #0
 8001d50:	e686      	b.n	8001a60 <__aeabi_dsub+0xb0>
 8001d52:	0030      	movs	r0, r6
 8001d54:	f000 fa16 	bl	8002184 <__clzsi2>
 8001d58:	3020      	adds	r0, #32
 8001d5a:	e673      	b.n	8001a44 <__aeabi_dsub+0x94>
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	4193      	sbcs	r3, r2
 8001d64:	1ac6      	subs	r6, r0, r3
 8001d66:	42b0      	cmp	r0, r6
 8001d68:	4180      	sbcs	r0, r0
 8001d6a:	4240      	negs	r0, r0
 8001d6c:	1a09      	subs	r1, r1, r0
 8001d6e:	e65c      	b.n	8001a2a <__aeabi_dsub+0x7a>
 8001d70:	000e      	movs	r6, r1
 8001d72:	4667      	mov	r7, ip
 8001d74:	4306      	orrs	r6, r0
 8001d76:	4317      	orrs	r7, r2
 8001d78:	2d00      	cmp	r5, #0
 8001d7a:	d15e      	bne.n	8001e3a <__aeabi_dsub+0x48a>
 8001d7c:	2e00      	cmp	r6, #0
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dsub+0x3d2>
 8001d80:	e0f3      	b.n	8001f6a <__aeabi_dsub+0x5ba>
 8001d82:	2f00      	cmp	r7, #0
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x3d8>
 8001d86:	e11e      	b.n	8001fc6 <__aeabi_dsub+0x616>
 8001d88:	465c      	mov	r4, fp
 8001d8a:	4661      	mov	r1, ip
 8001d8c:	4691      	mov	r9, r2
 8001d8e:	e72c      	b.n	8001bea <__aeabi_dsub+0x23a>
 8001d90:	4fa9      	ldr	r7, [pc, #676]	; (8002038 <__aeabi_dsub+0x688>)
 8001d92:	42be      	cmp	r6, r7
 8001d94:	d07b      	beq.n	8001e8e <__aeabi_dsub+0x4de>
 8001d96:	001e      	movs	r6, r3
 8001d98:	e6f1      	b.n	8001b7e <__aeabi_dsub+0x1ce>
 8001d9a:	0010      	movs	r0, r2
 8001d9c:	3d1f      	subs	r5, #31
 8001d9e:	40e8      	lsrs	r0, r5
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d003      	beq.n	8001dac <__aeabi_dsub+0x3fc>
 8001da4:	2140      	movs	r1, #64	; 0x40
 8001da6:	1acb      	subs	r3, r1, r3
 8001da8:	409a      	lsls	r2, r3
 8001daa:	4316      	orrs	r6, r2
 8001dac:	1e73      	subs	r3, r6, #1
 8001dae:	419e      	sbcs	r6, r3
 8001db0:	2207      	movs	r2, #7
 8001db2:	4306      	orrs	r6, r0
 8001db4:	4032      	ands	r2, r6
 8001db6:	2100      	movs	r1, #0
 8001db8:	2500      	movs	r5, #0
 8001dba:	e783      	b.n	8001cc4 <__aeabi_dsub+0x314>
 8001dbc:	1a16      	subs	r6, r2, r0
 8001dbe:	4663      	mov	r3, ip
 8001dc0:	42b2      	cmp	r2, r6
 8001dc2:	4180      	sbcs	r0, r0
 8001dc4:	1a59      	subs	r1, r3, r1
 8001dc6:	4240      	negs	r0, r0
 8001dc8:	1a0b      	subs	r3, r1, r0
 8001dca:	4698      	mov	r8, r3
 8001dcc:	465c      	mov	r4, fp
 8001dce:	e632      	b.n	8001a36 <__aeabi_dsub+0x86>
 8001dd0:	2e1f      	cmp	r6, #31
 8001dd2:	dd00      	ble.n	8001dd6 <__aeabi_dsub+0x426>
 8001dd4:	e0ab      	b.n	8001f2e <__aeabi_dsub+0x57e>
 8001dd6:	2720      	movs	r7, #32
 8001dd8:	1bbb      	subs	r3, r7, r6
 8001dda:	469a      	mov	sl, r3
 8001ddc:	4663      	mov	r3, ip
 8001dde:	4657      	mov	r7, sl
 8001de0:	40bb      	lsls	r3, r7
 8001de2:	4699      	mov	r9, r3
 8001de4:	0013      	movs	r3, r2
 8001de6:	464f      	mov	r7, r9
 8001de8:	40f3      	lsrs	r3, r6
 8001dea:	431f      	orrs	r7, r3
 8001dec:	003b      	movs	r3, r7
 8001dee:	4657      	mov	r7, sl
 8001df0:	40ba      	lsls	r2, r7
 8001df2:	1e57      	subs	r7, r2, #1
 8001df4:	41ba      	sbcs	r2, r7
 8001df6:	4313      	orrs	r3, r2
 8001df8:	4662      	mov	r2, ip
 8001dfa:	40f2      	lsrs	r2, r6
 8001dfc:	1889      	adds	r1, r1, r2
 8001dfe:	e698      	b.n	8001b32 <__aeabi_dsub+0x182>
 8001e00:	2720      	movs	r7, #32
 8001e02:	1bbb      	subs	r3, r7, r6
 8001e04:	469a      	mov	sl, r3
 8001e06:	4663      	mov	r3, ip
 8001e08:	4657      	mov	r7, sl
 8001e0a:	40bb      	lsls	r3, r7
 8001e0c:	4699      	mov	r9, r3
 8001e0e:	0013      	movs	r3, r2
 8001e10:	464f      	mov	r7, r9
 8001e12:	40f3      	lsrs	r3, r6
 8001e14:	431f      	orrs	r7, r3
 8001e16:	003b      	movs	r3, r7
 8001e18:	4657      	mov	r7, sl
 8001e1a:	40ba      	lsls	r2, r7
 8001e1c:	1e57      	subs	r7, r2, #1
 8001e1e:	41ba      	sbcs	r2, r7
 8001e20:	4313      	orrs	r3, r2
 8001e22:	4662      	mov	r2, ip
 8001e24:	40f2      	lsrs	r2, r6
 8001e26:	1a89      	subs	r1, r1, r2
 8001e28:	e79c      	b.n	8001d64 <__aeabi_dsub+0x3b4>
 8001e2a:	4b83      	ldr	r3, [pc, #524]	; (8002038 <__aeabi_dsub+0x688>)
 8001e2c:	429f      	cmp	r7, r3
 8001e2e:	d05f      	beq.n	8001ef0 <__aeabi_dsub+0x540>
 8001e30:	2580      	movs	r5, #128	; 0x80
 8001e32:	042d      	lsls	r5, r5, #16
 8001e34:	4273      	negs	r3, r6
 8001e36:	4329      	orrs	r1, r5
 8001e38:	e720      	b.n	8001c7c <__aeabi_dsub+0x2cc>
 8001e3a:	2e00      	cmp	r6, #0
 8001e3c:	d10c      	bne.n	8001e58 <__aeabi_dsub+0x4a8>
 8001e3e:	2f00      	cmp	r7, #0
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x494>
 8001e42:	e0d0      	b.n	8001fe6 <__aeabi_dsub+0x636>
 8001e44:	465c      	mov	r4, fp
 8001e46:	4661      	mov	r1, ip
 8001e48:	4691      	mov	r9, r2
 8001e4a:	4d7b      	ldr	r5, [pc, #492]	; (8002038 <__aeabi_dsub+0x688>)
 8001e4c:	e6cd      	b.n	8001bea <__aeabi_dsub+0x23a>
 8001e4e:	4f7a      	ldr	r7, [pc, #488]	; (8002038 <__aeabi_dsub+0x688>)
 8001e50:	42be      	cmp	r6, r7
 8001e52:	d01c      	beq.n	8001e8e <__aeabi_dsub+0x4de>
 8001e54:	001e      	movs	r6, r3
 8001e56:	e665      	b.n	8001b24 <__aeabi_dsub+0x174>
 8001e58:	2f00      	cmp	r7, #0
 8001e5a:	d018      	beq.n	8001e8e <__aeabi_dsub+0x4de>
 8001e5c:	08c0      	lsrs	r0, r0, #3
 8001e5e:	074e      	lsls	r6, r1, #29
 8001e60:	4306      	orrs	r6, r0
 8001e62:	2080      	movs	r0, #128	; 0x80
 8001e64:	08c9      	lsrs	r1, r1, #3
 8001e66:	0300      	lsls	r0, r0, #12
 8001e68:	4201      	tst	r1, r0
 8001e6a:	d008      	beq.n	8001e7e <__aeabi_dsub+0x4ce>
 8001e6c:	4663      	mov	r3, ip
 8001e6e:	08dc      	lsrs	r4, r3, #3
 8001e70:	4204      	tst	r4, r0
 8001e72:	d104      	bne.n	8001e7e <__aeabi_dsub+0x4ce>
 8001e74:	0021      	movs	r1, r4
 8001e76:	46da      	mov	sl, fp
 8001e78:	08d2      	lsrs	r2, r2, #3
 8001e7a:	075e      	lsls	r6, r3, #29
 8001e7c:	4316      	orrs	r6, r2
 8001e7e:	00f3      	lsls	r3, r6, #3
 8001e80:	4699      	mov	r9, r3
 8001e82:	2401      	movs	r4, #1
 8001e84:	4653      	mov	r3, sl
 8001e86:	00c9      	lsls	r1, r1, #3
 8001e88:	0f72      	lsrs	r2, r6, #29
 8001e8a:	4311      	orrs	r1, r2
 8001e8c:	401c      	ands	r4, r3
 8001e8e:	4d6a      	ldr	r5, [pc, #424]	; (8002038 <__aeabi_dsub+0x688>)
 8001e90:	e6ab      	b.n	8001bea <__aeabi_dsub+0x23a>
 8001e92:	001d      	movs	r5, r3
 8001e94:	2200      	movs	r2, #0
 8001e96:	2700      	movs	r7, #0
 8001e98:	e6b4      	b.n	8001c04 <__aeabi_dsub+0x254>
 8001e9a:	2d00      	cmp	r5, #0
 8001e9c:	d159      	bne.n	8001f52 <__aeabi_dsub+0x5a2>
 8001e9e:	000b      	movs	r3, r1
 8001ea0:	4303      	orrs	r3, r0
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x4f6>
 8001ea4:	e6d6      	b.n	8001c54 <__aeabi_dsub+0x2a4>
 8001ea6:	1c73      	adds	r3, r6, #1
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dsub+0x4fc>
 8001eaa:	e0b2      	b.n	8002012 <__aeabi_dsub+0x662>
 8001eac:	4b62      	ldr	r3, [pc, #392]	; (8002038 <__aeabi_dsub+0x688>)
 8001eae:	429f      	cmp	r7, r3
 8001eb0:	d01e      	beq.n	8001ef0 <__aeabi_dsub+0x540>
 8001eb2:	43f3      	mvns	r3, r6
 8001eb4:	2b38      	cmp	r3, #56	; 0x38
 8001eb6:	dc6f      	bgt.n	8001f98 <__aeabi_dsub+0x5e8>
 8001eb8:	2b1f      	cmp	r3, #31
 8001eba:	dd00      	ble.n	8001ebe <__aeabi_dsub+0x50e>
 8001ebc:	e097      	b.n	8001fee <__aeabi_dsub+0x63e>
 8001ebe:	2520      	movs	r5, #32
 8001ec0:	000e      	movs	r6, r1
 8001ec2:	1aed      	subs	r5, r5, r3
 8001ec4:	40ae      	lsls	r6, r5
 8001ec6:	46b0      	mov	r8, r6
 8001ec8:	0006      	movs	r6, r0
 8001eca:	46aa      	mov	sl, r5
 8001ecc:	40de      	lsrs	r6, r3
 8001ece:	4645      	mov	r5, r8
 8001ed0:	4335      	orrs	r5, r6
 8001ed2:	002e      	movs	r6, r5
 8001ed4:	4655      	mov	r5, sl
 8001ed6:	40a8      	lsls	r0, r5
 8001ed8:	40d9      	lsrs	r1, r3
 8001eda:	1e45      	subs	r5, r0, #1
 8001edc:	41a8      	sbcs	r0, r5
 8001ede:	448c      	add	ip, r1
 8001ee0:	4306      	orrs	r6, r0
 8001ee2:	18b6      	adds	r6, r6, r2
 8001ee4:	4296      	cmp	r6, r2
 8001ee6:	4192      	sbcs	r2, r2
 8001ee8:	4251      	negs	r1, r2
 8001eea:	4461      	add	r1, ip
 8001eec:	003d      	movs	r5, r7
 8001eee:	e625      	b.n	8001b3c <__aeabi_dsub+0x18c>
 8001ef0:	003d      	movs	r5, r7
 8001ef2:	4661      	mov	r1, ip
 8001ef4:	4691      	mov	r9, r2
 8001ef6:	e678      	b.n	8001bea <__aeabi_dsub+0x23a>
 8001ef8:	000b      	movs	r3, r1
 8001efa:	4303      	orrs	r3, r0
 8001efc:	2d00      	cmp	r5, #0
 8001efe:	d000      	beq.n	8001f02 <__aeabi_dsub+0x552>
 8001f00:	e655      	b.n	8001bae <__aeabi_dsub+0x1fe>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f5      	beq.n	8001ef2 <__aeabi_dsub+0x542>
 8001f06:	4663      	mov	r3, ip
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	d100      	bne.n	8001f0e <__aeabi_dsub+0x55e>
 8001f0c:	e66d      	b.n	8001bea <__aeabi_dsub+0x23a>
 8001f0e:	1886      	adds	r6, r0, r2
 8001f10:	4286      	cmp	r6, r0
 8001f12:	4180      	sbcs	r0, r0
 8001f14:	4461      	add	r1, ip
 8001f16:	4240      	negs	r0, r0
 8001f18:	1809      	adds	r1, r1, r0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	020b      	lsls	r3, r1, #8
 8001f1e:	d400      	bmi.n	8001f22 <__aeabi_dsub+0x572>
 8001f20:	e6d0      	b.n	8001cc4 <__aeabi_dsub+0x314>
 8001f22:	4b46      	ldr	r3, [pc, #280]	; (800203c <__aeabi_dsub+0x68c>)
 8001f24:	3501      	adds	r5, #1
 8001f26:	4019      	ands	r1, r3
 8001f28:	e5b2      	b.n	8001a90 <__aeabi_dsub+0xe0>
 8001f2a:	46b1      	mov	r9, r6
 8001f2c:	e65d      	b.n	8001bea <__aeabi_dsub+0x23a>
 8001f2e:	0033      	movs	r3, r6
 8001f30:	4667      	mov	r7, ip
 8001f32:	3b20      	subs	r3, #32
 8001f34:	40df      	lsrs	r7, r3
 8001f36:	003b      	movs	r3, r7
 8001f38:	2e20      	cmp	r6, #32
 8001f3a:	d005      	beq.n	8001f48 <__aeabi_dsub+0x598>
 8001f3c:	2740      	movs	r7, #64	; 0x40
 8001f3e:	1bbf      	subs	r7, r7, r6
 8001f40:	4666      	mov	r6, ip
 8001f42:	40be      	lsls	r6, r7
 8001f44:	4332      	orrs	r2, r6
 8001f46:	4690      	mov	r8, r2
 8001f48:	4646      	mov	r6, r8
 8001f4a:	1e72      	subs	r2, r6, #1
 8001f4c:	4196      	sbcs	r6, r2
 8001f4e:	4333      	orrs	r3, r6
 8001f50:	e5ef      	b.n	8001b32 <__aeabi_dsub+0x182>
 8001f52:	4b39      	ldr	r3, [pc, #228]	; (8002038 <__aeabi_dsub+0x688>)
 8001f54:	429f      	cmp	r7, r3
 8001f56:	d0cb      	beq.n	8001ef0 <__aeabi_dsub+0x540>
 8001f58:	2580      	movs	r5, #128	; 0x80
 8001f5a:	042d      	lsls	r5, r5, #16
 8001f5c:	4273      	negs	r3, r6
 8001f5e:	4329      	orrs	r1, r5
 8001f60:	e7a8      	b.n	8001eb4 <__aeabi_dsub+0x504>
 8001f62:	4308      	orrs	r0, r1
 8001f64:	1e41      	subs	r1, r0, #1
 8001f66:	4188      	sbcs	r0, r1
 8001f68:	e6a2      	b.n	8001cb0 <__aeabi_dsub+0x300>
 8001f6a:	2f00      	cmp	r7, #0
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dsub+0x5c0>
 8001f6e:	e63c      	b.n	8001bea <__aeabi_dsub+0x23a>
 8001f70:	4663      	mov	r3, ip
 8001f72:	1a86      	subs	r6, r0, r2
 8001f74:	1acf      	subs	r7, r1, r3
 8001f76:	42b0      	cmp	r0, r6
 8001f78:	419b      	sbcs	r3, r3
 8001f7a:	425b      	negs	r3, r3
 8001f7c:	1afb      	subs	r3, r7, r3
 8001f7e:	4698      	mov	r8, r3
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	d54e      	bpl.n	8002022 <__aeabi_dsub+0x672>
 8001f84:	1a16      	subs	r6, r2, r0
 8001f86:	4663      	mov	r3, ip
 8001f88:	42b2      	cmp	r2, r6
 8001f8a:	4192      	sbcs	r2, r2
 8001f8c:	1a59      	subs	r1, r3, r1
 8001f8e:	4252      	negs	r2, r2
 8001f90:	1a89      	subs	r1, r1, r2
 8001f92:	465c      	mov	r4, fp
 8001f94:	2200      	movs	r2, #0
 8001f96:	e57b      	b.n	8001a90 <__aeabi_dsub+0xe0>
 8001f98:	4301      	orrs	r1, r0
 8001f9a:	000e      	movs	r6, r1
 8001f9c:	1e71      	subs	r1, r6, #1
 8001f9e:	418e      	sbcs	r6, r1
 8001fa0:	e79f      	b.n	8001ee2 <__aeabi_dsub+0x532>
 8001fa2:	001d      	movs	r5, r3
 8001fa4:	000e      	movs	r6, r1
 8001fa6:	3d20      	subs	r5, #32
 8001fa8:	40ee      	lsrs	r6, r5
 8001faa:	46b0      	mov	r8, r6
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d004      	beq.n	8001fba <__aeabi_dsub+0x60a>
 8001fb0:	2540      	movs	r5, #64	; 0x40
 8001fb2:	1aeb      	subs	r3, r5, r3
 8001fb4:	4099      	lsls	r1, r3
 8001fb6:	4308      	orrs	r0, r1
 8001fb8:	4681      	mov	r9, r0
 8001fba:	4648      	mov	r0, r9
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	1e41      	subs	r1, r0, #1
 8001fc0:	4188      	sbcs	r0, r1
 8001fc2:	4318      	orrs	r0, r3
 8001fc4:	e674      	b.n	8001cb0 <__aeabi_dsub+0x300>
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2400      	movs	r4, #0
 8001fca:	e617      	b.n	8001bfc <__aeabi_dsub+0x24c>
 8001fcc:	1a16      	subs	r6, r2, r0
 8001fce:	4663      	mov	r3, ip
 8001fd0:	42b2      	cmp	r2, r6
 8001fd2:	4192      	sbcs	r2, r2
 8001fd4:	1a59      	subs	r1, r3, r1
 8001fd6:	4252      	negs	r2, r2
 8001fd8:	1a89      	subs	r1, r1, r2
 8001fda:	003d      	movs	r5, r7
 8001fdc:	e525      	b.n	8001a2a <__aeabi_dsub+0x7a>
 8001fde:	4661      	mov	r1, ip
 8001fe0:	4691      	mov	r9, r2
 8001fe2:	4d15      	ldr	r5, [pc, #84]	; (8002038 <__aeabi_dsub+0x688>)
 8001fe4:	e601      	b.n	8001bea <__aeabi_dsub+0x23a>
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	2400      	movs	r4, #0
 8001fea:	0312      	lsls	r2, r2, #12
 8001fec:	e679      	b.n	8001ce2 <__aeabi_dsub+0x332>
 8001fee:	001d      	movs	r5, r3
 8001ff0:	000e      	movs	r6, r1
 8001ff2:	3d20      	subs	r5, #32
 8001ff4:	40ee      	lsrs	r6, r5
 8001ff6:	46b0      	mov	r8, r6
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	d004      	beq.n	8002006 <__aeabi_dsub+0x656>
 8001ffc:	2540      	movs	r5, #64	; 0x40
 8001ffe:	1aeb      	subs	r3, r5, r3
 8002000:	4099      	lsls	r1, r3
 8002002:	4308      	orrs	r0, r1
 8002004:	4681      	mov	r9, r0
 8002006:	464e      	mov	r6, r9
 8002008:	4643      	mov	r3, r8
 800200a:	1e71      	subs	r1, r6, #1
 800200c:	418e      	sbcs	r6, r1
 800200e:	431e      	orrs	r6, r3
 8002010:	e767      	b.n	8001ee2 <__aeabi_dsub+0x532>
 8002012:	1886      	adds	r6, r0, r2
 8002014:	4296      	cmp	r6, r2
 8002016:	419b      	sbcs	r3, r3
 8002018:	4461      	add	r1, ip
 800201a:	425b      	negs	r3, r3
 800201c:	18c9      	adds	r1, r1, r3
 800201e:	003d      	movs	r5, r7
 8002020:	e58c      	b.n	8001b3c <__aeabi_dsub+0x18c>
 8002022:	4647      	mov	r7, r8
 8002024:	4337      	orrs	r7, r6
 8002026:	d0ce      	beq.n	8001fc6 <__aeabi_dsub+0x616>
 8002028:	2207      	movs	r2, #7
 800202a:	4641      	mov	r1, r8
 800202c:	4032      	ands	r2, r6
 800202e:	e649      	b.n	8001cc4 <__aeabi_dsub+0x314>
 8002030:	2700      	movs	r7, #0
 8002032:	003a      	movs	r2, r7
 8002034:	e5e6      	b.n	8001c04 <__aeabi_dsub+0x254>
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	000007ff 	.word	0x000007ff
 800203c:	ff7fffff 	.word	0xff7fffff

08002040 <__aeabi_d2iz>:
 8002040:	b530      	push	{r4, r5, lr}
 8002042:	4d14      	ldr	r5, [pc, #80]	; (8002094 <__aeabi_d2iz+0x54>)
 8002044:	030a      	lsls	r2, r1, #12
 8002046:	004b      	lsls	r3, r1, #1
 8002048:	0b12      	lsrs	r2, r2, #12
 800204a:	0d5b      	lsrs	r3, r3, #21
 800204c:	0fc9      	lsrs	r1, r1, #31
 800204e:	2400      	movs	r4, #0
 8002050:	42ab      	cmp	r3, r5
 8002052:	dd11      	ble.n	8002078 <__aeabi_d2iz+0x38>
 8002054:	4c10      	ldr	r4, [pc, #64]	; (8002098 <__aeabi_d2iz+0x58>)
 8002056:	42a3      	cmp	r3, r4
 8002058:	dc10      	bgt.n	800207c <__aeabi_d2iz+0x3c>
 800205a:	2480      	movs	r4, #128	; 0x80
 800205c:	0364      	lsls	r4, r4, #13
 800205e:	4322      	orrs	r2, r4
 8002060:	4c0e      	ldr	r4, [pc, #56]	; (800209c <__aeabi_d2iz+0x5c>)
 8002062:	1ae4      	subs	r4, r4, r3
 8002064:	2c1f      	cmp	r4, #31
 8002066:	dd0c      	ble.n	8002082 <__aeabi_d2iz+0x42>
 8002068:	480d      	ldr	r0, [pc, #52]	; (80020a0 <__aeabi_d2iz+0x60>)
 800206a:	1ac3      	subs	r3, r0, r3
 800206c:	40da      	lsrs	r2, r3
 800206e:	0013      	movs	r3, r2
 8002070:	425c      	negs	r4, r3
 8002072:	2900      	cmp	r1, #0
 8002074:	d100      	bne.n	8002078 <__aeabi_d2iz+0x38>
 8002076:	001c      	movs	r4, r3
 8002078:	0020      	movs	r0, r4
 800207a:	bd30      	pop	{r4, r5, pc}
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <__aeabi_d2iz+0x64>)
 800207e:	18cc      	adds	r4, r1, r3
 8002080:	e7fa      	b.n	8002078 <__aeabi_d2iz+0x38>
 8002082:	4d09      	ldr	r5, [pc, #36]	; (80020a8 <__aeabi_d2iz+0x68>)
 8002084:	40e0      	lsrs	r0, r4
 8002086:	46ac      	mov	ip, r5
 8002088:	4463      	add	r3, ip
 800208a:	409a      	lsls	r2, r3
 800208c:	0013      	movs	r3, r2
 800208e:	4303      	orrs	r3, r0
 8002090:	e7ee      	b.n	8002070 <__aeabi_d2iz+0x30>
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	000003fe 	.word	0x000003fe
 8002098:	0000041d 	.word	0x0000041d
 800209c:	00000433 	.word	0x00000433
 80020a0:	00000413 	.word	0x00000413
 80020a4:	7fffffff 	.word	0x7fffffff
 80020a8:	fffffbed 	.word	0xfffffbed

080020ac <__aeabi_i2d>:
 80020ac:	b570      	push	{r4, r5, r6, lr}
 80020ae:	2800      	cmp	r0, #0
 80020b0:	d02d      	beq.n	800210e <__aeabi_i2d+0x62>
 80020b2:	17c3      	asrs	r3, r0, #31
 80020b4:	18c5      	adds	r5, r0, r3
 80020b6:	405d      	eors	r5, r3
 80020b8:	0fc4      	lsrs	r4, r0, #31
 80020ba:	0028      	movs	r0, r5
 80020bc:	f000 f862 	bl	8002184 <__clzsi2>
 80020c0:	4b15      	ldr	r3, [pc, #84]	; (8002118 <__aeabi_i2d+0x6c>)
 80020c2:	1a1b      	subs	r3, r3, r0
 80020c4:	055b      	lsls	r3, r3, #21
 80020c6:	0d5b      	lsrs	r3, r3, #21
 80020c8:	280a      	cmp	r0, #10
 80020ca:	dd15      	ble.n	80020f8 <__aeabi_i2d+0x4c>
 80020cc:	380b      	subs	r0, #11
 80020ce:	4085      	lsls	r5, r0
 80020d0:	2200      	movs	r2, #0
 80020d2:	032d      	lsls	r5, r5, #12
 80020d4:	0b2d      	lsrs	r5, r5, #12
 80020d6:	2100      	movs	r1, #0
 80020d8:	0010      	movs	r0, r2
 80020da:	032d      	lsls	r5, r5, #12
 80020dc:	0d0a      	lsrs	r2, r1, #20
 80020de:	0b2d      	lsrs	r5, r5, #12
 80020e0:	0512      	lsls	r2, r2, #20
 80020e2:	432a      	orrs	r2, r5
 80020e4:	4d0d      	ldr	r5, [pc, #52]	; (800211c <__aeabi_i2d+0x70>)
 80020e6:	051b      	lsls	r3, r3, #20
 80020e8:	402a      	ands	r2, r5
 80020ea:	4313      	orrs	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	07e4      	lsls	r4, r4, #31
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	4323      	orrs	r3, r4
 80020f4:	0019      	movs	r1, r3
 80020f6:	bd70      	pop	{r4, r5, r6, pc}
 80020f8:	0002      	movs	r2, r0
 80020fa:	0029      	movs	r1, r5
 80020fc:	3215      	adds	r2, #21
 80020fe:	4091      	lsls	r1, r2
 8002100:	000a      	movs	r2, r1
 8002102:	210b      	movs	r1, #11
 8002104:	1a08      	subs	r0, r1, r0
 8002106:	40c5      	lsrs	r5, r0
 8002108:	032d      	lsls	r5, r5, #12
 800210a:	0b2d      	lsrs	r5, r5, #12
 800210c:	e7e3      	b.n	80020d6 <__aeabi_i2d+0x2a>
 800210e:	2400      	movs	r4, #0
 8002110:	2300      	movs	r3, #0
 8002112:	2500      	movs	r5, #0
 8002114:	2200      	movs	r2, #0
 8002116:	e7de      	b.n	80020d6 <__aeabi_i2d+0x2a>
 8002118:	0000041e 	.word	0x0000041e
 800211c:	800fffff 	.word	0x800fffff

08002120 <__aeabi_ui2d>:
 8002120:	b510      	push	{r4, lr}
 8002122:	1e04      	subs	r4, r0, #0
 8002124:	d025      	beq.n	8002172 <__aeabi_ui2d+0x52>
 8002126:	f000 f82d 	bl	8002184 <__clzsi2>
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <__aeabi_ui2d+0x5c>)
 800212c:	1a1b      	subs	r3, r3, r0
 800212e:	055b      	lsls	r3, r3, #21
 8002130:	0d5b      	lsrs	r3, r3, #21
 8002132:	280a      	cmp	r0, #10
 8002134:	dd12      	ble.n	800215c <__aeabi_ui2d+0x3c>
 8002136:	380b      	subs	r0, #11
 8002138:	4084      	lsls	r4, r0
 800213a:	2200      	movs	r2, #0
 800213c:	0324      	lsls	r4, r4, #12
 800213e:	0b24      	lsrs	r4, r4, #12
 8002140:	2100      	movs	r1, #0
 8002142:	0010      	movs	r0, r2
 8002144:	0324      	lsls	r4, r4, #12
 8002146:	0d0a      	lsrs	r2, r1, #20
 8002148:	0b24      	lsrs	r4, r4, #12
 800214a:	0512      	lsls	r2, r2, #20
 800214c:	4322      	orrs	r2, r4
 800214e:	4c0c      	ldr	r4, [pc, #48]	; (8002180 <__aeabi_ui2d+0x60>)
 8002150:	051b      	lsls	r3, r3, #20
 8002152:	4022      	ands	r2, r4
 8002154:	4313      	orrs	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	0859      	lsrs	r1, r3, #1
 800215a:	bd10      	pop	{r4, pc}
 800215c:	0002      	movs	r2, r0
 800215e:	0021      	movs	r1, r4
 8002160:	3215      	adds	r2, #21
 8002162:	4091      	lsls	r1, r2
 8002164:	000a      	movs	r2, r1
 8002166:	210b      	movs	r1, #11
 8002168:	1a08      	subs	r0, r1, r0
 800216a:	40c4      	lsrs	r4, r0
 800216c:	0324      	lsls	r4, r4, #12
 800216e:	0b24      	lsrs	r4, r4, #12
 8002170:	e7e6      	b.n	8002140 <__aeabi_ui2d+0x20>
 8002172:	2300      	movs	r3, #0
 8002174:	2400      	movs	r4, #0
 8002176:	2200      	movs	r2, #0
 8002178:	e7e2      	b.n	8002140 <__aeabi_ui2d+0x20>
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	0000041e 	.word	0x0000041e
 8002180:	800fffff 	.word	0x800fffff

08002184 <__clzsi2>:
 8002184:	211c      	movs	r1, #28
 8002186:	2301      	movs	r3, #1
 8002188:	041b      	lsls	r3, r3, #16
 800218a:	4298      	cmp	r0, r3
 800218c:	d301      	bcc.n	8002192 <__clzsi2+0xe>
 800218e:	0c00      	lsrs	r0, r0, #16
 8002190:	3910      	subs	r1, #16
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	4298      	cmp	r0, r3
 8002196:	d301      	bcc.n	800219c <__clzsi2+0x18>
 8002198:	0a00      	lsrs	r0, r0, #8
 800219a:	3908      	subs	r1, #8
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	4298      	cmp	r0, r3
 80021a0:	d301      	bcc.n	80021a6 <__clzsi2+0x22>
 80021a2:	0900      	lsrs	r0, r0, #4
 80021a4:	3904      	subs	r1, #4
 80021a6:	a202      	add	r2, pc, #8	; (adr r2, 80021b0 <__clzsi2+0x2c>)
 80021a8:	5c10      	ldrb	r0, [r2, r0]
 80021aa:	1840      	adds	r0, r0, r1
 80021ac:	4770      	bx	lr
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	02020304 	.word	0x02020304
 80021b4:	01010101 	.word	0x01010101
	...

080021c0 <__clzdi2>:
 80021c0:	b510      	push	{r4, lr}
 80021c2:	2900      	cmp	r1, #0
 80021c4:	d103      	bne.n	80021ce <__clzdi2+0xe>
 80021c6:	f7ff ffdd 	bl	8002184 <__clzsi2>
 80021ca:	3020      	adds	r0, #32
 80021cc:	e002      	b.n	80021d4 <__clzdi2+0x14>
 80021ce:	1c08      	adds	r0, r1, #0
 80021d0:	f7ff ffd8 	bl	8002184 <__clzsi2>
 80021d4:	bd10      	pop	{r4, pc}
 80021d6:	46c0      	nop			; (mov r8, r8)

080021d8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80021de:	003b      	movs	r3, r7
 80021e0:	0018      	movs	r0, r3
 80021e2:	2308      	movs	r3, #8
 80021e4:	001a      	movs	r2, r3
 80021e6:	2100      	movs	r1, #0
 80021e8:	f007 fe0c 	bl	8009e04 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80021ec:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <MX_ADC_Init+0xc0>)
 80021ee:	4a2b      	ldr	r2, [pc, #172]	; (800229c <MX_ADC_Init+0xc4>)
 80021f0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80021f2:	4b29      	ldr	r3, [pc, #164]	; (8002298 <MX_ADC_Init+0xc0>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <MX_ADC_Init+0xc0>)
 80021fa:	2280      	movs	r2, #128	; 0x80
 80021fc:	05d2      	lsls	r2, r2, #23
 80021fe:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002200:	4b25      	ldr	r3, [pc, #148]	; (8002298 <MX_ADC_Init+0xc0>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <MX_ADC_Init+0xc0>)
 8002208:	2200      	movs	r2, #0
 800220a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800220c:	4b22      	ldr	r3, [pc, #136]	; (8002298 <MX_ADC_Init+0xc0>)
 800220e:	2201      	movs	r2, #1
 8002210:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <MX_ADC_Init+0xc0>)
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002218:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <MX_ADC_Init+0xc0>)
 800221a:	2220      	movs	r2, #32
 800221c:	2100      	movs	r1, #0
 800221e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002220:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <MX_ADC_Init+0xc0>)
 8002222:	2221      	movs	r2, #33	; 0x21
 8002224:	2100      	movs	r1, #0
 8002226:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <MX_ADC_Init+0xc0>)
 800222a:	2200      	movs	r2, #0
 800222c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <MX_ADC_Init+0xc0>)
 8002230:	22c2      	movs	r2, #194	; 0xc2
 8002232:	32ff      	adds	r2, #255	; 0xff
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <MX_ADC_Init+0xc0>)
 8002238:	222c      	movs	r2, #44	; 0x2c
 800223a:	2100      	movs	r1, #0
 800223c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <MX_ADC_Init+0xc0>)
 8002240:	2204      	movs	r2, #4
 8002242:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <MX_ADC_Init+0xc0>)
 8002246:	2200      	movs	r2, #0
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800224a:	4b13      	ldr	r3, [pc, #76]	; (8002298 <MX_ADC_Init+0xc0>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <MX_ADC_Init+0xc0>)
 8002252:	2200      	movs	r2, #0
 8002254:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <MX_ADC_Init+0xc0>)
 8002258:	2200      	movs	r2, #0
 800225a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <MX_ADC_Init+0xc0>)
 800225e:	0018      	movs	r0, r3
 8002260:	f004 fa66 	bl	8006730 <HAL_ADC_Init>
 8002264:	1e03      	subs	r3, r0, #0
 8002266:	d001      	beq.n	800226c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002268:	f002 fffc 	bl	8005264 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800226c:	003b      	movs	r3, r7
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002272:	003b      	movs	r3, r7
 8002274:	2280      	movs	r2, #128	; 0x80
 8002276:	0152      	lsls	r2, r2, #5
 8002278:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800227a:	003a      	movs	r2, r7
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <MX_ADC_Init+0xc0>)
 800227e:	0011      	movs	r1, r2
 8002280:	0018      	movs	r0, r3
 8002282:	f004 fcbf 	bl	8006c04 <HAL_ADC_ConfigChannel>
 8002286:	1e03      	subs	r3, r0, #0
 8002288:	d001      	beq.n	800228e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800228a:	f002 ffeb 	bl	8005264 <Error_Handler>
  }

}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	46bd      	mov	sp, r7
 8002292:	b002      	add	sp, #8
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	20000780 	.word	0x20000780
 800229c:	40012400 	.word	0x40012400

080022a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	230c      	movs	r3, #12
 80022aa:	18fb      	adds	r3, r7, r3
 80022ac:	0018      	movs	r0, r3
 80022ae:	2314      	movs	r3, #20
 80022b0:	001a      	movs	r2, r3
 80022b2:	2100      	movs	r1, #0
 80022b4:	f007 fda6 	bl	8009e04 <memset>
  if(adcHandle->Instance==ADC1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a15      	ldr	r2, [pc, #84]	; (8002314 <HAL_ADC_MspInit+0x74>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d123      	bne.n	800230a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_ADC_MspInit+0x78>)
 80022c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_ADC_MspInit+0x78>)
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	0089      	lsls	r1, r1, #2
 80022cc:	430a      	orrs	r2, r1
 80022ce:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_ADC_MspInit+0x78>)
 80022d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d4:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_ADC_MspInit+0x78>)
 80022d6:	2101      	movs	r1, #1
 80022d8:	430a      	orrs	r2, r1
 80022da:	62da      	str	r2, [r3, #44]	; 0x2c
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <HAL_ADC_MspInit+0x78>)
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	2201      	movs	r2, #1
 80022e2:	4013      	ands	r3, r2
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022e8:	210c      	movs	r1, #12
 80022ea:	187b      	adds	r3, r7, r1
 80022ec:	2201      	movs	r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	2203      	movs	r2, #3
 80022f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	187b      	adds	r3, r7, r1
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	187a      	adds	r2, r7, r1
 80022fe:	23a0      	movs	r3, #160	; 0xa0
 8002300:	05db      	lsls	r3, r3, #23
 8002302:	0011      	movs	r1, r2
 8002304:	0018      	movs	r0, r3
 8002306:	f004 fe67 	bl	8006fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	b008      	add	sp, #32
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	40012400 	.word	0x40012400
 8002318:	40021000 	.word	0x40021000

0800231c <at24c32_set_i2c_handle>:
#include "at24c32_object.h"
#include "at24c32_interface.h"


void at24c32_set_i2c_handle(I2C_HandleTypeDef *handle)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	at24c32_i2c_handle = handle;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <at24c32_set_i2c_handle+0x18>)
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	601a      	str	r2, [r3, #0]
}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b002      	add	sp, #8
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	20000224 	.word	0x20000224

08002338 <depth_switch_check_gpio>:




int depth_switch_check_gpio()
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
	int bitstatus;

	if ((GPIOA->IDR & GPIO_PIN_9) != (uint32_t)GPIO_PIN_RESET)
 800233e:	23a0      	movs	r3, #160	; 0xa0
 8002340:	05db      	lsls	r3, r3, #23
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4013      	ands	r3, r2
 800234a:	d002      	beq.n	8002352 <depth_switch_check_gpio+0x1a>
  	{
    	bitstatus = 1;
 800234c:	2301      	movs	r3, #1
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	e001      	b.n	8002356 <depth_switch_check_gpio+0x1e>
  	}
  	else
  	{
    	bitstatus = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
  	}

	return bitstatus;
 8002356:	687b      	ldr	r3, [r7, #4]
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}

08002360 <depth_switch_turn_signal_led>:


void depth_switch_turn_signal_led(int led_number)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	// turn all leds off
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3, GPIO_PIN_SET);// turn leds off
 8002368:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <depth_switch_turn_signal_led+0x80>)
 800236a:	2201      	movs	r2, #1
 800236c:	210f      	movs	r1, #15
 800236e:	0018      	movs	r0, r3
 8002370:	f004 ffa8 	bl	80072c4 <HAL_GPIO_WritePin>

	if(led_number == 1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d106      	bne.n	8002388 <depth_switch_turn_signal_led+0x28>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800237a:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <depth_switch_turn_signal_led+0x80>)
 800237c:	2200      	movs	r2, #0
 800237e:	2101      	movs	r1, #1
 8002380:	0018      	movs	r0, r3
 8002382:	f004 ff9f 	bl	80072c4 <HAL_GPIO_WritePin>
	{
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3, GPIO_PIN_RESET);// turn leds on

	}

}
 8002386:	e026      	b.n	80023d6 <depth_switch_turn_signal_led+0x76>
	else if(led_number == 2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d106      	bne.n	800239c <depth_switch_turn_signal_led+0x3c>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800238e:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <depth_switch_turn_signal_led+0x80>)
 8002390:	2200      	movs	r2, #0
 8002392:	2102      	movs	r1, #2
 8002394:	0018      	movs	r0, r3
 8002396:	f004 ff95 	bl	80072c4 <HAL_GPIO_WritePin>
}
 800239a:	e01c      	b.n	80023d6 <depth_switch_turn_signal_led+0x76>
	else if(led_number == 3)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d106      	bne.n	80023b0 <depth_switch_turn_signal_led+0x50>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80023a2:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <depth_switch_turn_signal_led+0x80>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	2104      	movs	r1, #4
 80023a8:	0018      	movs	r0, r3
 80023aa:	f004 ff8b 	bl	80072c4 <HAL_GPIO_WritePin>
}
 80023ae:	e012      	b.n	80023d6 <depth_switch_turn_signal_led+0x76>
	else if(led_number == 4)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d106      	bne.n	80023c4 <depth_switch_turn_signal_led+0x64>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <depth_switch_turn_signal_led+0x80>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	2108      	movs	r1, #8
 80023bc:	0018      	movs	r0, r3
 80023be:	f004 ff81 	bl	80072c4 <HAL_GPIO_WritePin>
}
 80023c2:	e008      	b.n	80023d6 <depth_switch_turn_signal_led+0x76>
	else if(led_number == 5) // test mode all leds on
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d105      	bne.n	80023d6 <depth_switch_turn_signal_led+0x76>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3, GPIO_PIN_RESET);// turn leds on
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <depth_switch_turn_signal_led+0x80>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	210f      	movs	r1, #15
 80023d0:	0018      	movs	r0, r3
 80023d2:	f004 ff77 	bl	80072c4 <HAL_GPIO_WritePin>
}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b002      	add	sp, #8
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	50000400 	.word	0x50000400

080023e4 <depth_switch_step_current_depth>:



double depth_switch_step_current_depth(double increment)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6038      	str	r0, [r7, #0]
 80023ec:	6079      	str	r1, [r7, #4]
		}
	}
	*/


	if(increment == INC_ONE)
 80023ee:	2200      	movs	r2, #0
 80023f0:	4b30      	ldr	r3, [pc, #192]	; (80024b4 <depth_switch_step_current_depth+0xd0>)
 80023f2:	6838      	ldr	r0, [r7, #0]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	f7fe f815 	bl	8000424 <__aeabi_dcmpeq>
 80023fa:	1e03      	subs	r3, r0, #0
 80023fc:	d01a      	beq.n	8002434 <depth_switch_step_current_depth+0x50>
	{
		order0++;
 80023fe:	4b2e      	ldr	r3, [pc, #184]	; (80024b8 <depth_switch_step_current_depth+0xd4>)
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <depth_switch_step_current_depth+0xd0>)
 8002408:	f7fe f93a 	bl	8000680 <__aeabi_dadd>
 800240c:	0003      	movs	r3, r0
 800240e:	000c      	movs	r4, r1
 8002410:	4a29      	ldr	r2, [pc, #164]	; (80024b8 <depth_switch_step_current_depth+0xd4>)
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	6054      	str	r4, [r2, #4]
		if(order0 >= 10)
 8002416:	4b28      	ldr	r3, [pc, #160]	; (80024b8 <depth_switch_step_current_depth+0xd4>)
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	4b27      	ldr	r3, [pc, #156]	; (80024bc <depth_switch_step_current_depth+0xd8>)
 8002420:	f7fe f824 	bl	800046c <__aeabi_dcmpge>
 8002424:	1e03      	subs	r3, r0, #0
 8002426:	d027      	beq.n	8002478 <depth_switch_step_current_depth+0x94>
			order0 = 0;
 8002428:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <depth_switch_step_current_depth+0xd4>)
 800242a:	2300      	movs	r3, #0
 800242c:	2400      	movs	r4, #0
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	6054      	str	r4, [r2, #4]
 8002432:	e021      	b.n	8002478 <depth_switch_step_current_depth+0x94>
	}
	else if(increment == INC_TEN)
 8002434:	2200      	movs	r2, #0
 8002436:	4b21      	ldr	r3, [pc, #132]	; (80024bc <depth_switch_step_current_depth+0xd8>)
 8002438:	6838      	ldr	r0, [r7, #0]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	f7fd fff2 	bl	8000424 <__aeabi_dcmpeq>
 8002440:	1e03      	subs	r3, r0, #0
 8002442:	d019      	beq.n	8002478 <depth_switch_step_current_depth+0x94>
	{
		order1++;
 8002444:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <depth_switch_step_current_depth+0xdc>)
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	6859      	ldr	r1, [r3, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <depth_switch_step_current_depth+0xd0>)
 800244e:	f7fe f917 	bl	8000680 <__aeabi_dadd>
 8002452:	0003      	movs	r3, r0
 8002454:	000c      	movs	r4, r1
 8002456:	4a1a      	ldr	r2, [pc, #104]	; (80024c0 <depth_switch_step_current_depth+0xdc>)
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	6054      	str	r4, [r2, #4]
		if(order1 >= 5)
 800245c:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <depth_switch_step_current_depth+0xdc>)
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <depth_switch_step_current_depth+0xe0>)
 8002466:	f7fe f801 	bl	800046c <__aeabi_dcmpge>
 800246a:	1e03      	subs	r3, r0, #0
 800246c:	d004      	beq.n	8002478 <depth_switch_step_current_depth+0x94>
			order1 = 0;
 800246e:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <depth_switch_step_current_depth+0xdc>)
 8002470:	2300      	movs	r3, #0
 8002472:	2400      	movs	r4, #0
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	6054      	str	r4, [r2, #4]
	}

	current_depth = order1*10.0 + order0;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <depth_switch_step_current_depth+0xdc>)
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	6859      	ldr	r1, [r3, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <depth_switch_step_current_depth+0xd8>)
 8002482:	f7ff f823 	bl	80014cc <__aeabi_dmul>
 8002486:	0003      	movs	r3, r0
 8002488:	000c      	movs	r4, r1
 800248a:	0018      	movs	r0, r3
 800248c:	0021      	movs	r1, r4
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <depth_switch_step_current_depth+0xd4>)
 8002490:	685c      	ldr	r4, [r3, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	001a      	movs	r2, r3
 8002496:	0023      	movs	r3, r4
 8002498:	f7fe f8f2 	bl	8000680 <__aeabi_dadd>
 800249c:	0003      	movs	r3, r0
 800249e:	000c      	movs	r4, r1
 80024a0:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <depth_switch_step_current_depth+0xe4>)
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	6054      	str	r4, [r2, #4]
}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	0018      	movs	r0, r3
 80024aa:	0021      	movs	r1, r4
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b003      	add	sp, #12
 80024b0:	bd90      	pop	{r4, r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	3ff00000 	.word	0x3ff00000
 80024b8:	20000008 	.word	0x20000008
 80024bc:	40240000 	.word	0x40240000
 80024c0:	20000228 	.word	0x20000228
 80024c4:	40140000 	.word	0x40140000
 80024c8:	20000000 	.word	0x20000000

080024cc <depth_switch_step_to_test>:


void depth_switch_step_to_test()
{
 80024cc:	b5b0      	push	{r4, r5, r7, lr}
 80024ce:	af00      	add	r7, sp, #0
	current_depth = DEPTH0;
 80024d0:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <depth_switch_step_to_test+0x1c>)
 80024d2:	2300      	movs	r3, #0
 80024d4:	4c05      	ldr	r4, [pc, #20]	; (80024ec <depth_switch_step_to_test+0x20>)
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	6054      	str	r4, [r2, #4]
	depth_switch_turn_signal_led(5);
 80024da:	2005      	movs	r0, #5
 80024dc:	f7ff ff40 	bl	8002360 <depth_switch_turn_signal_led>
}
 80024e0:	46c0      	nop			; (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bdb0      	pop	{r4, r5, r7, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	20000000 	.word	0x20000000
 80024ec:	3ff00000 	.word	0x3ff00000

080024f0 <depth_switch_get_current_depth>:

double depth_switch_get_current_depth()
{
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	return current_depth;
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <depth_switch_get_current_depth+0x14>)
 80024f6:	685c      	ldr	r4, [r3, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	0021      	movs	r1, r4
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd90      	pop	{r4, r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	20000000 	.word	0x20000000

08002508 <depth_switch_action>:




void depth_switch_action()
{
 8002508:	b5b0      	push	{r4, r5, r7, lr}
 800250a:	af00      	add	r7, sp, #0
	if(!depth_switch_check_gpio()) // key pressed
 800250c:	f7ff ff14 	bl	8002338 <depth_switch_check_gpio>
 8002510:	1e03      	subs	r3, r0, #0
 8002512:	d105      	bne.n	8002520 <depth_switch_action+0x18>
		depth_switch_key_press_period_counter++;
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <depth_switch_action+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <depth_switch_action+0x64>)
 800251c:	601a      	str	r2, [r3, #0]

			depth_switch_key_press_period_counter = 0;
		}

	}
}
 800251e:	e022      	b.n	8002566 <depth_switch_action+0x5e>
		if(depth_switch_key_press_period_counter > 0)
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <depth_switch_action+0x64>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	dd1e      	ble.n	8002566 <depth_switch_action+0x5e>
			if(depth_switch_key_press_period_counter <= 3)     // less then 3 seconds
 8002528:	4b10      	ldr	r3, [pc, #64]	; (800256c <depth_switch_action+0x64>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b03      	cmp	r3, #3
 800252e:	dc06      	bgt.n	800253e <depth_switch_action+0x36>
				depth_switch_step_current_depth(INC_ONE);
 8002530:	2300      	movs	r3, #0
 8002532:	4c0f      	ldr	r4, [pc, #60]	; (8002570 <depth_switch_action+0x68>)
 8002534:	0018      	movs	r0, r3
 8002536:	0021      	movs	r1, r4
 8002538:	f7ff ff54 	bl	80023e4 <depth_switch_step_current_depth>
 800253c:	e010      	b.n	8002560 <depth_switch_action+0x58>
			else if((depth_switch_key_press_period_counter > 3) && (depth_switch_key_press_period_counter <= 17))     // 
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <depth_switch_action+0x64>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b03      	cmp	r3, #3
 8002544:	dd0a      	ble.n	800255c <depth_switch_action+0x54>
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <depth_switch_action+0x64>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b11      	cmp	r3, #17
 800254c:	dc06      	bgt.n	800255c <depth_switch_action+0x54>
				depth_switch_step_current_depth(INC_TEN);
 800254e:	2300      	movs	r3, #0
 8002550:	4c08      	ldr	r4, [pc, #32]	; (8002574 <depth_switch_action+0x6c>)
 8002552:	0018      	movs	r0, r3
 8002554:	0021      	movs	r1, r4
 8002556:	f7ff ff45 	bl	80023e4 <depth_switch_step_current_depth>
 800255a:	e001      	b.n	8002560 <depth_switch_action+0x58>
				depth_switch_step_to_test();
 800255c:	f7ff ffb6 	bl	80024cc <depth_switch_step_to_test>
			depth_switch_key_press_period_counter = 0;
 8002560:	4b02      	ldr	r3, [pc, #8]	; (800256c <depth_switch_action+0x64>)
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	bdb0      	pop	{r4, r5, r7, pc}
 800256c:	20000230 	.word	0x20000230
 8002570:	3ff00000 	.word	0x3ff00000
 8002574:	40240000 	.word	0x40240000

08002578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257e:	240c      	movs	r4, #12
 8002580:	193b      	adds	r3, r7, r4
 8002582:	0018      	movs	r0, r3
 8002584:	2314      	movs	r3, #20
 8002586:	001a      	movs	r2, r3
 8002588:	2100      	movs	r1, #0
 800258a:	f007 fc3b 	bl	8009e04 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	4b3b      	ldr	r3, [pc, #236]	; (800267c <MX_GPIO_Init+0x104>)
 8002590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002592:	4b3a      	ldr	r3, [pc, #232]	; (800267c <MX_GPIO_Init+0x104>)
 8002594:	2101      	movs	r1, #1
 8002596:	430a      	orrs	r2, r1
 8002598:	62da      	str	r2, [r3, #44]	; 0x2c
 800259a:	4b38      	ldr	r3, [pc, #224]	; (800267c <MX_GPIO_Init+0x104>)
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	2201      	movs	r2, #1
 80025a0:	4013      	ands	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a6:	4b35      	ldr	r3, [pc, #212]	; (800267c <MX_GPIO_Init+0x104>)
 80025a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025aa:	4b34      	ldr	r3, [pc, #208]	; (800267c <MX_GPIO_Init+0x104>)
 80025ac:	2102      	movs	r1, #2
 80025ae:	430a      	orrs	r2, r1
 80025b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80025b2:	4b32      	ldr	r3, [pc, #200]	; (800267c <MX_GPIO_Init+0x104>)
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	2202      	movs	r2, #2
 80025b8:	4013      	ands	r3, r2
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led0_Pin|led1_Pin|led2_Pin|led3_Pin, GPIO_PIN_RESET);
 80025be:	4b30      	ldr	r3, [pc, #192]	; (8002680 <MX_GPIO_Init+0x108>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	210f      	movs	r1, #15
 80025c4:	0018      	movs	r0, r3
 80025c6:	f004 fe7d 	bl	80072c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, actuator0_Pin|actuator1_Pin, GPIO_PIN_RESET);
 80025ca:	23c0      	movs	r3, #192	; 0xc0
 80025cc:	0159      	lsls	r1, r3, #5
 80025ce:	23a0      	movs	r3, #160	; 0xa0
 80025d0:	05db      	lsls	r3, r3, #23
 80025d2:	2200      	movs	r2, #0
 80025d4:	0018      	movs	r0, r3
 80025d6:	f004 fe75 	bl	80072c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led0_Pin|led1_Pin|led2_Pin|led3_Pin;
 80025da:	193b      	adds	r3, r7, r4
 80025dc:	220f      	movs	r2, #15
 80025de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e0:	193b      	adds	r3, r7, r4
 80025e2:	2201      	movs	r2, #1
 80025e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	193b      	adds	r3, r7, r4
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	193b      	adds	r3, r7, r4
 80025ee:	2200      	movs	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f2:	193b      	adds	r3, r7, r4
 80025f4:	4a22      	ldr	r2, [pc, #136]	; (8002680 <MX_GPIO_Init+0x108>)
 80025f6:	0019      	movs	r1, r3
 80025f8:	0010      	movs	r0, r2
 80025fa:	f004 fced 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = btn0_Pin|btn1_Pin;
 80025fe:	193b      	adds	r3, r7, r4
 8002600:	22c0      	movs	r2, #192	; 0xc0
 8002602:	00d2      	lsls	r2, r2, #3
 8002604:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002606:	193b      	adds	r3, r7, r4
 8002608:	2200      	movs	r2, #0
 800260a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	193b      	adds	r3, r7, r4
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	193a      	adds	r2, r7, r4
 8002614:	23a0      	movs	r3, #160	; 0xa0
 8002616:	05db      	lsls	r3, r3, #23
 8002618:	0011      	movs	r1, r2
 800261a:	0018      	movs	r0, r3
 800261c:	f004 fcdc 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = actuator0_Pin|actuator1_Pin;
 8002620:	0021      	movs	r1, r4
 8002622:	187b      	adds	r3, r7, r1
 8002624:	22c0      	movs	r2, #192	; 0xc0
 8002626:	0152      	lsls	r2, r2, #5
 8002628:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262a:	187b      	adds	r3, r7, r1
 800262c:	2201      	movs	r2, #1
 800262e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	187b      	adds	r3, r7, r1
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	187b      	adds	r3, r7, r1
 8002638:	2200      	movs	r2, #0
 800263a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263c:	000c      	movs	r4, r1
 800263e:	187a      	adds	r2, r7, r1
 8002640:	23a0      	movs	r3, #160	; 0xa0
 8002642:	05db      	lsls	r3, r3, #23
 8002644:	0011      	movs	r1, r2
 8002646:	0018      	movs	r0, r3
 8002648:	f004 fcc6 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
	GPIO_InitStruct.Pin = spi1_cs_pressure_Pin;
 800264c:	0021      	movs	r1, r4
 800264e:	187b      	adds	r3, r7, r1
 8002650:	2210      	movs	r2, #16
 8002652:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002654:	187b      	adds	r3, r7, r1
 8002656:	2201      	movs	r2, #1
 8002658:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	187b      	adds	r3, r7, r1
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002660:	187b      	adds	r3, r7, r1
 8002662:	2202      	movs	r2, #2
 8002664:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(spi1_cs_pressure_GPIO_Port, &GPIO_InitStruct);
 8002666:	187a      	adds	r2, r7, r1
 8002668:	23a0      	movs	r3, #160	; 0xa0
 800266a:	05db      	lsls	r3, r3, #23
 800266c:	0011      	movs	r1, r2
 800266e:	0018      	movs	r0, r3
 8002670:	f004 fcb2 	bl	8006fd8 <HAL_GPIO_Init>

}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b009      	add	sp, #36	; 0x24
 800267a:	bd90      	pop	{r4, r7, pc}
 800267c:	40021000 	.word	0x40021000
 8002680:	50000400 	.word	0x50000400

08002684 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <MX_I2C1_Init+0x74>)
 800268a:	4a1c      	ldr	r2, [pc, #112]	; (80026fc <MX_I2C1_Init+0x78>)
 800268c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <MX_I2C1_Init+0x74>)
 8002690:	4a1b      	ldr	r2, [pc, #108]	; (8002700 <MX_I2C1_Init+0x7c>)
 8002692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002694:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <MX_I2C1_Init+0x74>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <MX_I2C1_Init+0x74>)
 800269c:	2201      	movs	r2, #1
 800269e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026a0:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <MX_I2C1_Init+0x74>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <MX_I2C1_Init+0x74>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <MX_I2C1_Init+0x74>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <MX_I2C1_Init+0x74>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <MX_I2C1_Init+0x74>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <MX_I2C1_Init+0x74>)
 80026c0:	0018      	movs	r0, r3
 80026c2:	f004 fe1d 	bl	8007300 <HAL_I2C_Init>
 80026c6:	1e03      	subs	r3, r0, #0
 80026c8:	d001      	beq.n	80026ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026ca:	f002 fdcb 	bl	8005264 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <MX_I2C1_Init+0x74>)
 80026d0:	2100      	movs	r1, #0
 80026d2:	0018      	movs	r0, r3
 80026d4:	f005 fb4a 	bl	8007d6c <HAL_I2CEx_ConfigAnalogFilter>
 80026d8:	1e03      	subs	r3, r0, #0
 80026da:	d001      	beq.n	80026e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026dc:	f002 fdc2 	bl	8005264 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <MX_I2C1_Init+0x74>)
 80026e2:	2100      	movs	r1, #0
 80026e4:	0018      	movs	r0, r3
 80026e6:	f005 fb8d 	bl	8007e04 <HAL_I2CEx_ConfigDigitalFilter>
 80026ea:	1e03      	subs	r3, r0, #0
 80026ec:	d001      	beq.n	80026f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026ee:	f002 fdb9 	bl	8005264 <Error_Handler>
  }

}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	200007dc 	.word	0x200007dc
 80026fc:	40005400 	.word	0x40005400
 8002700:	00707cbb 	.word	0x00707cbb

08002704 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8002708:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <MX_I2C2_Init+0x74>)
 800270a:	4a1c      	ldr	r2, [pc, #112]	; (800277c <MX_I2C2_Init+0x78>)
 800270c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800270e:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <MX_I2C2_Init+0x74>)
 8002710:	4a1b      	ldr	r2, [pc, #108]	; (8002780 <MX_I2C2_Init+0x7c>)
 8002712:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002714:	4b18      	ldr	r3, [pc, #96]	; (8002778 <MX_I2C2_Init+0x74>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <MX_I2C2_Init+0x74>)
 800271c:	2201      	movs	r2, #1
 800271e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002720:	4b15      	ldr	r3, [pc, #84]	; (8002778 <MX_I2C2_Init+0x74>)
 8002722:	2200      	movs	r2, #0
 8002724:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <MX_I2C2_Init+0x74>)
 8002728:	2200      	movs	r2, #0
 800272a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <MX_I2C2_Init+0x74>)
 800272e:	2200      	movs	r2, #0
 8002730:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <MX_I2C2_Init+0x74>)
 8002734:	2200      	movs	r2, #0
 8002736:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <MX_I2C2_Init+0x74>)
 800273a:	2200      	movs	r2, #0
 800273c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <MX_I2C2_Init+0x74>)
 8002740:	0018      	movs	r0, r3
 8002742:	f004 fddd 	bl	8007300 <HAL_I2C_Init>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d001      	beq.n	800274e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800274a:	f002 fd8b 	bl	8005264 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <MX_I2C2_Init+0x74>)
 8002750:	2100      	movs	r1, #0
 8002752:	0018      	movs	r0, r3
 8002754:	f005 fb0a 	bl	8007d6c <HAL_I2CEx_ConfigAnalogFilter>
 8002758:	1e03      	subs	r3, r0, #0
 800275a:	d001      	beq.n	8002760 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800275c:	f002 fd82 	bl	8005264 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <MX_I2C2_Init+0x74>)
 8002762:	2100      	movs	r1, #0
 8002764:	0018      	movs	r0, r3
 8002766:	f005 fb4d 	bl	8007e04 <HAL_I2CEx_ConfigDigitalFilter>
 800276a:	1e03      	subs	r3, r0, #0
 800276c:	d001      	beq.n	8002772 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800276e:	f002 fd79 	bl	8005264 <Error_Handler>
  }

}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000828 	.word	0x20000828
 800277c:	40005800 	.word	0x40005800
 8002780:	00707cbb 	.word	0x00707cbb

08002784 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	2314      	movs	r3, #20
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	0018      	movs	r0, r3
 8002792:	2314      	movs	r3, #20
 8002794:	001a      	movs	r2, r3
 8002796:	2100      	movs	r1, #0
 8002798:	f007 fb34 	bl	8009e04 <memset>
  if(i2cHandle->Instance==I2C1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a30      	ldr	r2, [pc, #192]	; (8002864 <HAL_I2C_MspInit+0xe0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d12a      	bne.n	80027fc <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a6:	4b30      	ldr	r3, [pc, #192]	; (8002868 <HAL_I2C_MspInit+0xe4>)
 80027a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027aa:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <HAL_I2C_MspInit+0xe4>)
 80027ac:	2102      	movs	r1, #2
 80027ae:	430a      	orrs	r2, r1
 80027b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80027b2:	4b2d      	ldr	r3, [pc, #180]	; (8002868 <HAL_I2C_MspInit+0xe4>)
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	2202      	movs	r2, #2
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027be:	2114      	movs	r1, #20
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	22c0      	movs	r2, #192	; 0xc0
 80027c4:	0092      	lsls	r2, r2, #2
 80027c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027c8:	187b      	adds	r3, r7, r1
 80027ca:	2212      	movs	r2, #18
 80027cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ce:	187b      	adds	r3, r7, r1
 80027d0:	2201      	movs	r2, #1
 80027d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	2203      	movs	r2, #3
 80027d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027da:	187b      	adds	r3, r7, r1
 80027dc:	2204      	movs	r2, #4
 80027de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	4a22      	ldr	r2, [pc, #136]	; (800286c <HAL_I2C_MspInit+0xe8>)
 80027e4:	0019      	movs	r1, r3
 80027e6:	0010      	movs	r0, r2
 80027e8:	f004 fbf6 	bl	8006fd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_I2C_MspInit+0xe4>)
 80027ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027f0:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <HAL_I2C_MspInit+0xe4>)
 80027f2:	2180      	movs	r1, #128	; 0x80
 80027f4:	0389      	lsls	r1, r1, #14
 80027f6:	430a      	orrs	r2, r1
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80027fa:	e02e      	b.n	800285a <HAL_I2C_MspInit+0xd6>
  else if(i2cHandle->Instance==I2C2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1b      	ldr	r2, [pc, #108]	; (8002870 <HAL_I2C_MspInit+0xec>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d129      	bne.n	800285a <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002806:	4b18      	ldr	r3, [pc, #96]	; (8002868 <HAL_I2C_MspInit+0xe4>)
 8002808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_I2C_MspInit+0xe4>)
 800280c:	2102      	movs	r1, #2
 800280e:	430a      	orrs	r2, r1
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_I2C_MspInit+0xe4>)
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	2202      	movs	r2, #2
 8002818:	4013      	ands	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800281e:	2114      	movs	r1, #20
 8002820:	187b      	adds	r3, r7, r1
 8002822:	22c0      	movs	r2, #192	; 0xc0
 8002824:	01d2      	lsls	r2, r2, #7
 8002826:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002828:	187b      	adds	r3, r7, r1
 800282a:	2212      	movs	r2, #18
 800282c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800282e:	187b      	adds	r3, r7, r1
 8002830:	2201      	movs	r2, #1
 8002832:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002834:	187b      	adds	r3, r7, r1
 8002836:	2203      	movs	r2, #3
 8002838:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800283a:	187b      	adds	r3, r7, r1
 800283c:	2205      	movs	r2, #5
 800283e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002840:	187b      	adds	r3, r7, r1
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <HAL_I2C_MspInit+0xe8>)
 8002844:	0019      	movs	r1, r3
 8002846:	0010      	movs	r0, r2
 8002848:	f004 fbc6 	bl	8006fd8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_I2C_MspInit+0xe4>)
 800284e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_I2C_MspInit+0xe4>)
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	03c9      	lsls	r1, r1, #15
 8002856:	430a      	orrs	r2, r1
 8002858:	639a      	str	r2, [r3, #56]	; 0x38
}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	46bd      	mov	sp, r7
 800285e:	b00a      	add	sp, #40	; 0x28
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	40005400 	.word	0x40005400
 8002868:	40021000 	.word	0x40021000
 800286c:	50000400 	.word	0x50000400
 8002870:	40005800 	.word	0x40005800

08002874 <main>:
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
int main(void)
{
 8002874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002876:	b0bf      	sub	sp, #252	; 0xfc
 8002878:	af06      	add	r7, sp, #24
	int i;



  	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  	HAL_Init();
 800287a:	f003 fedb 	bl	8006634 <HAL_Init>

  	/* Configure the system clock */
  	SystemClock_Config();
 800287e:	f002 fc7b 	bl	8005178 <SystemClock_Config>

    MX_GPIO_Init();
 8002882:	f7ff fe79 	bl	8002578 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8002886:	f003 fd6b 	bl	8006360 <MX_USART1_UART_Init>
  	MX_I2C1_Init();
 800288a:	f7ff fefb 	bl	8002684 <MX_I2C1_Init>
  	MX_I2C2_Init();
 800288e:	f7ff ff39 	bl	8002704 <MX_I2C2_Init>
  	//MX_I2C3_Init();


    //--------init display1------------------------------
	//*
    ssd1306_set_i2c_port(&hi2c1, 1);
 8002892:	4bf8      	ldr	r3, [pc, #992]	; (8002c74 <main+0x400>)
 8002894:	2101      	movs	r1, #1
 8002896:	0018      	movs	r0, r3
 8002898:	f003 f9f6 	bl	8005c88 <ssd1306_set_i2c_port>
  	ssd1306_Init();
 800289c:	f003 fa2c 	bl	8005cf8 <ssd1306_Init>
  	HAL_Delay(100);
 80028a0:	2064      	movs	r0, #100	; 0x64
 80028a2:	f003 ff27 	bl	80066f4 <HAL_Delay>
  	ssd1306_Fill(White);
 80028a6:	2001      	movs	r0, #1
 80028a8:	f003 fa94 	bl	8005dd4 <ssd1306_Fill>
  	ssd1306_UpdateScreen();
 80028ac:	f003 fab8 	bl	8005e20 <ssd1306_UpdateScreen>
  	HAL_Delay(100);
 80028b0:	2064      	movs	r0, #100	; 0x64
 80028b2:	f003 ff1f 	bl	80066f4 <HAL_Delay>
  	ssd1306_Fill(Black);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f003 fa8c 	bl	8005dd4 <ssd1306_Fill>
  	ssd1306_UpdateScreen();
 80028bc:	f003 fab0 	bl	8005e20 <ssd1306_UpdateScreen>

  	HAL_Delay(100);
 80028c0:	2064      	movs	r0, #100	; 0x64
 80028c2:	f003 ff17 	bl	80066f4 <HAL_Delay>

  	ssd1306_SetCursor(0,0);
 80028c6:	2100      	movs	r1, #0
 80028c8:	2000      	movs	r0, #0
 80028ca:	f003 fc13 	bl	80060f4 <ssd1306_SetCursor>
  	ssd1306_WriteString("DiveCmp", Font_16x26, White);
 80028ce:	4aea      	ldr	r2, [pc, #936]	; (8002c78 <main+0x404>)
 80028d0:	48ea      	ldr	r0, [pc, #936]	; (8002c7c <main+0x408>)
 80028d2:	2301      	movs	r3, #1
 80028d4:	6811      	ldr	r1, [r2, #0]
 80028d6:	6852      	ldr	r2, [r2, #4]
 80028d8:	f003 fbe2 	bl	80060a0 <ssd1306_WriteString>
  	ssd1306_SetCursor(0,30);
 80028dc:	211e      	movs	r1, #30
 80028de:	2000      	movs	r0, #0
 80028e0:	f003 fc08 	bl	80060f4 <ssd1306_SetCursor>
  	ssd1306_WriteString("Start..", Font_16x26, White);
 80028e4:	4ae4      	ldr	r2, [pc, #912]	; (8002c78 <main+0x404>)
 80028e6:	48e6      	ldr	r0, [pc, #920]	; (8002c80 <main+0x40c>)
 80028e8:	2301      	movs	r3, #1
 80028ea:	6811      	ldr	r1, [r2, #0]
 80028ec:	6852      	ldr	r2, [r2, #4]
 80028ee:	f003 fbd7 	bl	80060a0 <ssd1306_WriteString>
  	ssd1306_UpdateScreen();
 80028f2:	f003 fa95 	bl	8005e20 <ssd1306_UpdateScreen>
  	HAL_Delay(2000);
 80028f6:	23fa      	movs	r3, #250	; 0xfa
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	0018      	movs	r0, r3
 80028fc:	f003 fefa 	bl	80066f4 <HAL_Delay>
	//*/
    ssd1306_set_i2c_port(&hi2c1, 1);
 8002900:	4bdc      	ldr	r3, [pc, #880]	; (8002c74 <main+0x400>)
 8002902:	2101      	movs	r1, #1
 8002904:	0018      	movs	r0, r3
 8002906:	f003 f9bf 	bl	8005c88 <ssd1306_set_i2c_port>
  	ssd1306_Init();
 800290a:	f003 f9f5 	bl	8005cf8 <ssd1306_Init>
  	HAL_Delay(100);
 800290e:	2064      	movs	r0, #100	; 0x64
 8002910:	f003 fef0 	bl	80066f4 <HAL_Delay>
 
 
 	MX_SPI1_Init();
 8002914:	f003 f93c 	bl	8005b90 <MX_SPI1_Init>
    // enable spi1
    SPI1->CR1 |= SPI_CR1_SPE;
 8002918:	4bda      	ldr	r3, [pc, #872]	; (8002c84 <main+0x410>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4bd9      	ldr	r3, [pc, #868]	; (8002c84 <main+0x410>)
 800291e:	2140      	movs	r1, #64	; 0x40
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
    MX_ADC_Init();
 8002924:	f7ff fc58 	bl	80021d8 <MX_ADC_Init>

	//---------------------------------
  	//HAL_Delay(100);
	rtc_ds3231_set_i2c_handle(&hi2c2);
 8002928:	4bd7      	ldr	r3, [pc, #860]	; (8002c88 <main+0x414>)
 800292a:	0018      	movs	r0, r3
 800292c:	f003 f818 	bl	8005960 <rtc_ds3231_set_i2c_handle>
	//rtc_ds3231_set_time(17, 21, 0);
	//rtc_ds3231_set_date(22, 1, 20);
	at24c32_set_i2c_handle(&hi2c2);
 8002930:	4bd5      	ldr	r3, [pc, #852]	; (8002c88 <main+0x414>)
 8002932:	0018      	movs	r0, r3
 8002934:	f7ff fcf2 	bl	800231c <at24c32_set_i2c_handle>

	one_second_timer_init();
 8002938:	f002 fc99 	bl	800526e <one_second_timer_init>
	one_second_timer_start();
 800293c:	f002 fca0 	bl	8005280 <one_second_timer_start>

	pressure_sensor_object_init();
 8002940:	f002 fd06 	bl	8005350 <pressure_sensor_object_init>
	HAL_Delay(1000);
 8002944:	23fa      	movs	r3, #250	; 0xfa
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	0018      	movs	r0, r3
 800294a:	f003 fed3 	bl	80066f4 <HAL_Delay>
	uint32_t surface_pressure = 101325;
 800294e:	4bcf      	ldr	r3, [pc, #828]	; (8002c8c <main+0x418>)
 8002950:	22d4      	movs	r2, #212	; 0xd4
 8002952:	2108      	movs	r1, #8
 8002954:	468c      	mov	ip, r1
 8002956:	44bc      	add	ip, r7
 8002958:	4462      	add	r2, ip
 800295a:	6013      	str	r3, [r2, #0]
	uint32_t P_sym = 101325;
 800295c:	4bcb      	ldr	r3, [pc, #812]	; (8002c8c <main+0x418>)
 800295e:	228c      	movs	r2, #140	; 0x8c
 8002960:	2108      	movs	r1, #8
 8002962:	468c      	mov	ip, r1
 8002964:	44bc      	add	ip, r7
 8002966:	4462      	add	r2, ip
 8002968:	6013      	str	r3, [r2, #0]
	depth_switch_turn_signal_led(1);
 800296a:	2001      	movs	r0, #1
 800296c:	f7ff fcf8 	bl	8002360 <depth_switch_turn_signal_led>

	rtc_ds3231_action();
 8002970:	f003 f804 	bl	800597c <rtc_ds3231_action>
	//atm_barometer_init();
	int odd_even = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	22d0      	movs	r2, #208	; 0xd0
 8002978:	2108      	movs	r1, #8
 800297a:	468c      	mov	ip, r1
 800297c:	44bc      	add	ip, r7
 800297e:	4462      	add	r2, ip
 8002980:	6013      	str	r3, [r2, #0]
	int led_counter = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	2288      	movs	r2, #136	; 0x88
 8002986:	2108      	movs	r1, #8
 8002988:	468c      	mov	ip, r1
 800298a:	44bc      	add	ip, r7
 800298c:	4462      	add	r2, ip
 800298e:	6013      	str	r3, [r2, #0]

	int mem_test_base = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	2284      	movs	r2, #132	; 0x84
 8002994:	2108      	movs	r1, #8
 8002996:	468c      	mov	ip, r1
 8002998:	44bc      	add	ip, r7
 800299a:	4462      	add	r2, ip
 800299c:	6013      	str	r3, [r2, #0]

	uint8_t at24c32_shifted_address = 0x50 << 1;
 800299e:	23cf      	movs	r3, #207	; 0xcf
 80029a0:	2208      	movs	r2, #8
 80029a2:	4694      	mov	ip, r2
 80029a4:	44bc      	add	ip, r7
 80029a6:	4463      	add	r3, ip
 80029a8:	22a0      	movs	r2, #160	; 0xa0
 80029aa:	701a      	strb	r2, [r3, #0]
	uint16_t eeprom_address = 64;
 80029ac:	2382      	movs	r3, #130	; 0x82
 80029ae:	2208      	movs	r2, #8
 80029b0:	4694      	mov	ip, r2
 80029b2:	44bc      	add	ip, r7
 80029b4:	4463      	add	r3, ip
 80029b6:	2240      	movs	r2, #64	; 0x40
 80029b8:	801a      	strh	r2, [r3, #0]
	uint16_t eeprom_debug_address = 64;
 80029ba:	23cc      	movs	r3, #204	; 0xcc
 80029bc:	2208      	movs	r2, #8
 80029be:	4694      	mov	ip, r2
 80029c0:	44bc      	add	ip, r7
 80029c2:	4463      	add	r3, ip
 80029c4:	2240      	movs	r2, #64	; 0x40
 80029c6:	801a      	strh	r2, [r3, #0]
	int eeprom_number_of_records = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	22c8      	movs	r2, #200	; 0xc8
 80029cc:	2108      	movs	r1, #8
 80029ce:	468c      	mov	ip, r1
 80029d0:	44bc      	add	ip, r7
 80029d2:	4462      	add	r2, ip
 80029d4:	6013      	str	r3, [r2, #0]
	uint32_t log_counter = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	22c4      	movs	r2, #196	; 0xc4
 80029da:	2108      	movs	r1, #8
 80029dc:	468c      	mov	ip, r1
 80029de:	44bc      	add	ip, r7
 80029e0:	4462      	add	r2, ip
 80029e2:	6013      	str	r3, [r2, #0]
	//int sin_counter = 0;
	//double dt = 2.0*3.14/30.0;
	// log debug
	//****************************************

	int actuator_counter = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	22c0      	movs	r2, #192	; 0xc0
 80029e8:	2108      	movs	r1, #8
 80029ea:	468c      	mov	ip, r1
 80029ec:	44bc      	add	ip, r7
 80029ee:	4462      	add	r2, ip
 80029f0:	6013      	str	r3, [r2, #0]

	}
	//*/


	if(!depth_switch_check_gpio())
 80029f2:	f7ff fca1 	bl	8002338 <depth_switch_check_gpio>
 80029f6:	1e03      	subs	r3, r0, #0
 80029f8:	d001      	beq.n	80029fe <main+0x18a>
 80029fa:	f001 fa99 	bl	8003f30 <main+0x16bc>
	{
		double max_depth = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	2400      	movs	r4, #0
 8002a02:	22b8      	movs	r2, #184	; 0xb8
 8002a04:	2108      	movs	r1, #8
 8002a06:	468c      	mov	ip, r1
 8002a08:	44bc      	add	ip, r7
 8002a0a:	4462      	add	r2, ip
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	6054      	str	r4, [r2, #4]
		int max_depth_temperature = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	22b4      	movs	r2, #180	; 0xb4
 8002a14:	2108      	movs	r1, #8
 8002a16:	468c      	mov	ip, r1
 8002a18:	44bc      	add	ip, r7
 8002a1a:	4462      	add	r2, ip
 8002a1c:	6013      	str	r3, [r2, #0]

		// log mode
  	    ssd1306_SetCursor(0,0);
 8002a1e:	2100      	movs	r1, #0
 8002a20:	2000      	movs	r0, #0
 8002a22:	f003 fb67 	bl	80060f4 <ssd1306_SetCursor>
	    sprintf(message, "rezhim loga");
 8002a26:	4b9a      	ldr	r3, [pc, #616]	; (8002c90 <main+0x41c>)
 8002a28:	4a9a      	ldr	r2, [pc, #616]	; (8002c94 <main+0x420>)
 8002a2a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a2c:	c313      	stmia	r3!, {r0, r1, r4}
  	    ssd1306_WriteString(message, Font_11x18, White);
 8002a2e:	4a9a      	ldr	r2, [pc, #616]	; (8002c98 <main+0x424>)
 8002a30:	4897      	ldr	r0, [pc, #604]	; (8002c90 <main+0x41c>)
 8002a32:	2301      	movs	r3, #1
 8002a34:	6811      	ldr	r1, [r2, #0]
 8002a36:	6852      	ldr	r2, [r2, #4]
 8002a38:	f003 fb32 	bl	80060a0 <ssd1306_WriteString>
  	    ssd1306_SetCursor(0,22);
 8002a3c:	2116      	movs	r1, #22
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f003 fb58 	bl	80060f4 <ssd1306_SetCursor>
  	  	sprintf(message, "otpustite  ");
 8002a44:	4b92      	ldr	r3, [pc, #584]	; (8002c90 <main+0x41c>)
 8002a46:	4a95      	ldr	r2, [pc, #596]	; (8002c9c <main+0x428>)
 8002a48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a4a:	c313      	stmia	r3!, {r0, r1, r4}
  	    ssd1306_WriteString(message, Font_11x18, White);
 8002a4c:	4a92      	ldr	r2, [pc, #584]	; (8002c98 <main+0x424>)
 8002a4e:	4890      	ldr	r0, [pc, #576]	; (8002c90 <main+0x41c>)
 8002a50:	2301      	movs	r3, #1
 8002a52:	6811      	ldr	r1, [r2, #0]
 8002a54:	6852      	ldr	r2, [r2, #4]
 8002a56:	f003 fb23 	bl	80060a0 <ssd1306_WriteString>
  	    ssd1306_SetCursor(0,44);
 8002a5a:	212c      	movs	r1, #44	; 0x2c
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f003 fb49 	bl	80060f4 <ssd1306_SetCursor>
  	    sprintf(message, "knopku     ");
 8002a62:	4b8b      	ldr	r3, [pc, #556]	; (8002c90 <main+0x41c>)
 8002a64:	4a8e      	ldr	r2, [pc, #568]	; (8002ca0 <main+0x42c>)
 8002a66:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a68:	c313      	stmia	r3!, {r0, r1, r4}
  	    ssd1306_WriteString(message, Font_11x18, White);
 8002a6a:	4a8b      	ldr	r2, [pc, #556]	; (8002c98 <main+0x424>)
 8002a6c:	4888      	ldr	r0, [pc, #544]	; (8002c90 <main+0x41c>)
 8002a6e:	2301      	movs	r3, #1
 8002a70:	6811      	ldr	r1, [r2, #0]
 8002a72:	6852      	ldr	r2, [r2, #4]
 8002a74:	f003 fb14 	bl	80060a0 <ssd1306_WriteString>
  	    ssd1306_UpdateScreen();                                                                               
 8002a78:	f003 f9d2 	bl	8005e20 <ssd1306_UpdateScreen>

	    HAL_Delay(2000);
 8002a7c:	23fa      	movs	r3, #250	; 0xfa
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	0018      	movs	r0, r3
 8002a82:	f003 fe37 	bl	80066f4 <HAL_Delay>

	    // wait while button is pressed
	    while(!depth_switch_check_gpio());
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	f7ff fc56 	bl	8002338 <depth_switch_check_gpio>
 8002a8c:	1e03      	subs	r3, r0, #0
 8002a8e:	d0fb      	beq.n	8002a88 <main+0x214>

	    // button released
	    ssd1306_SetCursor(0,0);
 8002a90:	2100      	movs	r1, #0
 8002a92:	2000      	movs	r0, #0
 8002a94:	f003 fb2e 	bl	80060f4 <ssd1306_SetCursor>
		sprintf(message, "log gotov  ");
 8002a98:	4b7d      	ldr	r3, [pc, #500]	; (8002c90 <main+0x41c>)
 8002a9a:	4a82      	ldr	r2, [pc, #520]	; (8002ca4 <main+0x430>)
 8002a9c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a9e:	c313      	stmia	r3!, {r0, r1, r4}
		ssd1306_WriteString(message, Font_11x18, White);
 8002aa0:	4a7d      	ldr	r2, [pc, #500]	; (8002c98 <main+0x424>)
 8002aa2:	487b      	ldr	r0, [pc, #492]	; (8002c90 <main+0x41c>)
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	6811      	ldr	r1, [r2, #0]
 8002aa8:	6852      	ldr	r2, [r2, #4]
 8002aaa:	f003 faf9 	bl	80060a0 <ssd1306_WriteString>
		ssd1306_SetCursor(0,22);
 8002aae:	2116      	movs	r1, #22
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f003 fb1f 	bl	80060f4 <ssd1306_SetCursor>
		sprintf(message, "nazhmite   ");
 8002ab6:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <main+0x41c>)
 8002ab8:	4a7b      	ldr	r2, [pc, #492]	; (8002ca8 <main+0x434>)
 8002aba:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002abc:	c313      	stmia	r3!, {r0, r1, r4}
		ssd1306_WriteString(message, Font_11x18, White);
 8002abe:	4a76      	ldr	r2, [pc, #472]	; (8002c98 <main+0x424>)
 8002ac0:	4873      	ldr	r0, [pc, #460]	; (8002c90 <main+0x41c>)
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	6811      	ldr	r1, [r2, #0]
 8002ac6:	6852      	ldr	r2, [r2, #4]
 8002ac8:	f003 faea 	bl	80060a0 <ssd1306_WriteString>
		ssd1306_SetCursor(0,44);
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f003 fb10 	bl	80060f4 <ssd1306_SetCursor>
		sprintf(message, "knopku     ");
 8002ad4:	4b6e      	ldr	r3, [pc, #440]	; (8002c90 <main+0x41c>)
 8002ad6:	4a72      	ldr	r2, [pc, #456]	; (8002ca0 <main+0x42c>)
 8002ad8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ada:	c313      	stmia	r3!, {r0, r1, r4}
		ssd1306_UpdateScreen();
 8002adc:	f003 f9a0 	bl	8005e20 <ssd1306_UpdateScreen>

		// wait until button is pressed again
		while(depth_switch_check_gpio());
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	f7ff fc29 	bl	8002338 <depth_switch_check_gpio>
 8002ae6:	1e03      	subs	r3, r0, #0
 8002ae8:	d1fb      	bne.n	8002ae2 <main+0x26e>

		ssd1306_Fill(Black);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f003 f972 	bl	8005dd4 <ssd1306_Fill>
  	    ssd1306_SetCursor(0,0);
 8002af0:	2100      	movs	r1, #0
 8002af2:	2000      	movs	r0, #0
 8002af4:	f003 fafe 	bl	80060f4 <ssd1306_SetCursor>
	    sprintf(message, "zagruzka...");
 8002af8:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <main+0x41c>)
 8002afa:	4a6c      	ldr	r2, [pc, #432]	; (8002cac <main+0x438>)
 8002afc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002afe:	c313      	stmia	r3!, {r0, r1, r4}
  	    ssd1306_WriteString(message, Font_11x18, White);
 8002b00:	4a65      	ldr	r2, [pc, #404]	; (8002c98 <main+0x424>)
 8002b02:	4863      	ldr	r0, [pc, #396]	; (8002c90 <main+0x41c>)
 8002b04:	2301      	movs	r3, #1
 8002b06:	6811      	ldr	r1, [r2, #0]
 8002b08:	6852      	ldr	r2, [r2, #4]
 8002b0a:	f003 fac9 	bl	80060a0 <ssd1306_WriteString>
  	    ssd1306_UpdateScreen();                                                                               
 8002b0e:	f003 f987 	bl	8005e20 <ssd1306_UpdateScreen>

//*
		int end_of_log_reached = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	22b0      	movs	r2, #176	; 0xb0
 8002b16:	2108      	movs	r1, #8
 8002b18:	468c      	mov	ip, r1
 8002b1a:	44bc      	add	ip, r7
 8002b1c:	4462      	add	r2, ip
 8002b1e:	6013      	str	r3, [r2, #0]
		HAL_Delay(1000);
 8002b20:	23fa      	movs	r3, #250	; 0xfa
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	0018      	movs	r0, r3
 8002b26:	f003 fde5 	bl	80066f4 <HAL_Delay>
		uint16_t eeprom_debug_address = 64;
 8002b2a:	24ae      	movs	r4, #174	; 0xae
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	0011      	movs	r1, r2
 8002b30:	18bb      	adds	r3, r7, r2
 8002b32:	191b      	adds	r3, r3, r4
 8002b34:	2240      	movs	r2, #64	; 0x40
 8002b36:	801a      	strh	r2, [r3, #0]
		uint8_t b0;
		uint8_t at24c32_shifted_address = 0x50 << 1;
 8002b38:	25ad      	movs	r5, #173	; 0xad
 8002b3a:	000a      	movs	r2, r1
 8002b3c:	18bb      	adds	r3, r7, r2
 8002b3e:	195b      	adds	r3, r3, r5
 8002b40:	22a0      	movs	r2, #160	; 0xa0
 8002b42:	701a      	strb	r2, [r3, #0]
		static I2C_HandleTypeDef *at24c32_i2c_handle = &hi2c2;

		sprintf(message, "\r\n");
 8002b44:	4b52      	ldr	r3, [pc, #328]	; (8002c90 <main+0x41c>)
 8002b46:	4a5a      	ldr	r2, [pc, #360]	; (8002cb0 <main+0x43c>)
 8002b48:	8811      	ldrh	r1, [r2, #0]
 8002b4a:	8019      	strh	r1, [r3, #0]
 8002b4c:	7892      	ldrb	r2, [r2, #2]
 8002b4e:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8002b50:	4b4f      	ldr	r3, [pc, #316]	; (8002c90 <main+0x41c>)
 8002b52:	0018      	movs	r0, r3
 8002b54:	f7fd fad8 	bl	8000108 <strlen>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	23fa      	movs	r3, #250	; 0xfa
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	494b      	ldr	r1, [pc, #300]	; (8002c90 <main+0x41c>)
 8002b62:	4854      	ldr	r0, [pc, #336]	; (8002cb4 <main+0x440>)
 8002b64:	f006 fc20 	bl	80093a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8002b68:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <main+0x41c>)
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7fd facc 	bl	8000108 <strlen>
 8002b70:	0003      	movs	r3, r0
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	23fa      	movs	r3, #250	; 0xfa
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4945      	ldr	r1, [pc, #276]	; (8002c90 <main+0x41c>)
 8002b7a:	484e      	ldr	r0, [pc, #312]	; (8002cb4 <main+0x440>)
 8002b7c:	f006 fc14 	bl	80093a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8002b80:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <main+0x41c>)
 8002b82:	0018      	movs	r0, r3
 8002b84:	f7fd fac0 	bl	8000108 <strlen>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	23fa      	movs	r3, #250	; 0xfa
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	493f      	ldr	r1, [pc, #252]	; (8002c90 <main+0x41c>)
 8002b92:	4848      	ldr	r0, [pc, #288]	; (8002cb4 <main+0x440>)
 8002b94:	f006 fc08 	bl	80093a8 <HAL_UART_Transmit>

		sprintf(message, "log bank 1 start\r\n***********\r\n");
 8002b98:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <main+0x41c>)
 8002b9a:	4a47      	ldr	r2, [pc, #284]	; (8002cb8 <main+0x444>)
 8002b9c:	ca43      	ldmia	r2!, {r0, r1, r6}
 8002b9e:	c343      	stmia	r3!, {r0, r1, r6}
 8002ba0:	ca43      	ldmia	r2!, {r0, r1, r6}
 8002ba2:	c343      	stmia	r3!, {r0, r1, r6}
 8002ba4:	ca03      	ldmia	r2!, {r0, r1}
 8002ba6:	c303      	stmia	r3!, {r0, r1}
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8002ba8:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <main+0x41c>)
 8002baa:	0018      	movs	r0, r3
 8002bac:	f7fd faac 	bl	8000108 <strlen>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	23fa      	movs	r3, #250	; 0xfa
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4935      	ldr	r1, [pc, #212]	; (8002c90 <main+0x41c>)
 8002bba:	483e      	ldr	r0, [pc, #248]	; (8002cb4 <main+0x440>)
 8002bbc:	f006 fbf4 	bl	80093a8 <HAL_UART_Transmit>
	
		// read timestamp time
		char log1_time_txt[5];

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);		
 8002bc0:	4b3e      	ldr	r3, [pc, #248]	; (8002cbc <main+0x448>)
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	002e      	movs	r6, r5
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	18bb      	adds	r3, r7, r2
 8002bca:	199b      	adds	r3, r3, r6
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	b299      	uxth	r1, r3
 8002bd0:	18bb      	adds	r3, r7, r2
 8002bd2:	191b      	adds	r3, r3, r4
 8002bd4:	881a      	ldrh	r2, [r3, #0]
 8002bd6:	2364      	movs	r3, #100	; 0x64
 8002bd8:	9302      	str	r3, [sp, #8]
 8002bda:	2301      	movs	r3, #1
 8002bdc:	9301      	str	r3, [sp, #4]
 8002bde:	2543      	movs	r5, #67	; 0x43
 8002be0:	2308      	movs	r3, #8
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	195b      	adds	r3, r3, r5
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	2302      	movs	r3, #2
 8002bea:	f004 fd4d 	bl	8007688 <HAL_I2C_Mem_Read>
		message[0] = b0;
 8002bee:	2108      	movs	r1, #8
 8002bf0:	187b      	adds	r3, r7, r1
 8002bf2:	195b      	adds	r3, r3, r5
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <main+0x41c>)
 8002bf8:	701a      	strb	r2, [r3, #0]
		eeprom_debug_address++;
 8002bfa:	187b      	adds	r3, r7, r1
 8002bfc:	191b      	adds	r3, r3, r4
 8002bfe:	881a      	ldrh	r2, [r3, #0]
 8002c00:	187b      	adds	r3, r7, r1
 8002c02:	191b      	adds	r3, r3, r4
 8002c04:	3201      	adds	r2, #1
 8002c06:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8002c08:	4b2c      	ldr	r3, [pc, #176]	; (8002cbc <main+0x448>)
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	000a      	movs	r2, r1
 8002c0e:	18bb      	adds	r3, r7, r2
 8002c10:	199b      	adds	r3, r3, r6
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	b299      	uxth	r1, r3
 8002c16:	18bb      	adds	r3, r7, r2
 8002c18:	191b      	adds	r3, r3, r4
 8002c1a:	881a      	ldrh	r2, [r3, #0]
 8002c1c:	2364      	movs	r3, #100	; 0x64
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	2301      	movs	r3, #1
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	2308      	movs	r3, #8
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	195b      	adds	r3, r3, r5
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	f004 fd2b 	bl	8007688 <HAL_I2C_Mem_Read>
		message[1] = b0;
 8002c32:	2108      	movs	r1, #8
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	195b      	adds	r3, r3, r5
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <main+0x41c>)
 8002c3c:	705a      	strb	r2, [r3, #1]
		eeprom_debug_address++;
 8002c3e:	187b      	adds	r3, r7, r1
 8002c40:	191b      	adds	r3, r3, r4
 8002c42:	881a      	ldrh	r2, [r3, #0]
 8002c44:	187b      	adds	r3, r7, r1
 8002c46:	191b      	adds	r3, r3, r4
 8002c48:	3201      	adds	r2, #1
 8002c4a:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <main+0x448>)
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	000a      	movs	r2, r1
 8002c52:	18bb      	adds	r3, r7, r2
 8002c54:	199b      	adds	r3, r3, r6
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b299      	uxth	r1, r3
 8002c5a:	18bb      	adds	r3, r7, r2
 8002c5c:	191b      	adds	r3, r3, r4
 8002c5e:	881a      	ldrh	r2, [r3, #0]
 8002c60:	2364      	movs	r3, #100	; 0x64
 8002c62:	9302      	str	r3, [sp, #8]
 8002c64:	2301      	movs	r3, #1
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	2308      	movs	r3, #8
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	195b      	adds	r3, r3, r5
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	e026      	b.n	8002cc0 <main+0x44c>
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	200007dc 	.word	0x200007dc
 8002c78:	20000018 	.word	0x20000018
 8002c7c:	0800b0a4 	.word	0x0800b0a4
 8002c80:	0800b0ac 	.word	0x0800b0ac
 8002c84:	40013000 	.word	0x40013000
 8002c88:	20000828 	.word	0x20000828
 8002c8c:	00018bcd 	.word	0x00018bcd
 8002c90:	20000234 	.word	0x20000234
 8002c94:	0800b0b4 	.word	0x0800b0b4
 8002c98:	20000010 	.word	0x20000010
 8002c9c:	0800b0c0 	.word	0x0800b0c0
 8002ca0:	0800b0cc 	.word	0x0800b0cc
 8002ca4:	0800b0d8 	.word	0x0800b0d8
 8002ca8:	0800b0e4 	.word	0x0800b0e4
 8002cac:	0800b0f0 	.word	0x0800b0f0
 8002cb0:	0800b0fc 	.word	0x0800b0fc
 8002cb4:	2000090c 	.word	0x2000090c
 8002cb8:	0800b100 	.word	0x0800b100
 8002cbc:	20000020 	.word	0x20000020
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f004 fce1 	bl	8007688 <HAL_I2C_Mem_Read>
		message[2] = b0;
 8002cc6:	2108      	movs	r1, #8
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	195b      	adds	r3, r3, r5
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	4b94      	ldr	r3, [pc, #592]	; (8002f20 <main+0x6ac>)
 8002cd0:	709a      	strb	r2, [r3, #2]
		eeprom_debug_address++;
 8002cd2:	187b      	adds	r3, r7, r1
 8002cd4:	191b      	adds	r3, r3, r4
 8002cd6:	881a      	ldrh	r2, [r3, #0]
 8002cd8:	187b      	adds	r3, r7, r1
 8002cda:	191b      	adds	r3, r3, r4
 8002cdc:	3201      	adds	r2, #1
 8002cde:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8002ce0:	4b90      	ldr	r3, [pc, #576]	; (8002f24 <main+0x6b0>)
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	000a      	movs	r2, r1
 8002ce6:	18bb      	adds	r3, r7, r2
 8002ce8:	199b      	adds	r3, r3, r6
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	b299      	uxth	r1, r3
 8002cee:	0016      	movs	r6, r2
 8002cf0:	18bb      	adds	r3, r7, r2
 8002cf2:	191b      	adds	r3, r3, r4
 8002cf4:	881a      	ldrh	r2, [r3, #0]
 8002cf6:	2364      	movs	r3, #100	; 0x64
 8002cf8:	9302      	str	r3, [sp, #8]
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	0033      	movs	r3, r6
 8002d00:	001e      	movs	r6, r3
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	195b      	adds	r3, r3, r5
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	2302      	movs	r3, #2
 8002d0a:	f004 fcbd 	bl	8007688 <HAL_I2C_Mem_Read>
		message[3] = b0;
 8002d0e:	0032      	movs	r2, r6
 8002d10:	0011      	movs	r1, r2
 8002d12:	18bb      	adds	r3, r7, r2
 8002d14:	195b      	adds	r3, r3, r5
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	4b81      	ldr	r3, [pc, #516]	; (8002f20 <main+0x6ac>)
 8002d1a:	70da      	strb	r2, [r3, #3]
		eeprom_debug_address++;
 8002d1c:	187b      	adds	r3, r7, r1
 8002d1e:	191b      	adds	r3, r3, r4
 8002d20:	881a      	ldrh	r2, [r3, #0]
 8002d22:	187b      	adds	r3, r7, r1
 8002d24:	191b      	adds	r3, r3, r4
 8002d26:	3201      	adds	r2, #1
 8002d28:	801a      	strh	r2, [r3, #0]

		if((message[0] == 0) && (message[1] == 0))
 8002d2a:	4b7d      	ldr	r3, [pc, #500]	; (8002f20 <main+0x6ac>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10b      	bne.n	8002d4a <main+0x4d6>
 8002d32:	4b7b      	ldr	r3, [pc, #492]	; (8002f20 <main+0x6ac>)
 8002d34:	785b      	ldrb	r3, [r3, #1]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d107      	bne.n	8002d4a <main+0x4d6>
		{
			end_of_log_reached = 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	22b0      	movs	r2, #176	; 0xb0
 8002d3e:	2108      	movs	r1, #8
 8002d40:	468c      	mov	ip, r1
 8002d42:	44bc      	add	ip, r7
 8002d44:	4462      	add	r2, ip
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	e01e      	b.n	8002d88 <main+0x514>
		}
		else
		{
			strncpy(log1_time_txt, message, 4);
 8002d4a:	4975      	ldr	r1, [pc, #468]	; (8002f20 <main+0x6ac>)
 8002d4c:	233c      	movs	r3, #60	; 0x3c
 8002d4e:	2208      	movs	r2, #8
 8002d50:	4694      	mov	ip, r2
 8002d52:	44bc      	add	ip, r7
 8002d54:	4463      	add	r3, ip
 8002d56:	2204      	movs	r2, #4
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f007 f8a5 	bl	8009ea8 <strncpy>

			message[4] = '\r';
 8002d5e:	4b70      	ldr	r3, [pc, #448]	; (8002f20 <main+0x6ac>)
 8002d60:	220d      	movs	r2, #13
 8002d62:	711a      	strb	r2, [r3, #4]
			message[5] = '\n';
 8002d64:	4b6e      	ldr	r3, [pc, #440]	; (8002f20 <main+0x6ac>)
 8002d66:	220a      	movs	r2, #10
 8002d68:	715a      	strb	r2, [r3, #5]
			message[6] = 0;
 8002d6a:	4b6d      	ldr	r3, [pc, #436]	; (8002f20 <main+0x6ac>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	719a      	strb	r2, [r3, #6]
			HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8002d70:	4b6b      	ldr	r3, [pc, #428]	; (8002f20 <main+0x6ac>)
 8002d72:	0018      	movs	r0, r3
 8002d74:	f7fd f9c8 	bl	8000108 <strlen>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	23fa      	movs	r3, #250	; 0xfa
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4967      	ldr	r1, [pc, #412]	; (8002f20 <main+0x6ac>)
 8002d82:	4869      	ldr	r0, [pc, #420]	; (8002f28 <main+0x6b4>)
 8002d84:	f006 fb10 	bl	80093a8 <HAL_UART_Transmit>
		}
		// read timestamp date
		char log1_date_txt[5];

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);		
 8002d88:	4b66      	ldr	r3, [pc, #408]	; (8002f24 <main+0x6b0>)
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	26ad      	movs	r6, #173	; 0xad
 8002d8e:	2208      	movs	r2, #8
 8002d90:	18bb      	adds	r3, r7, r2
 8002d92:	199b      	adds	r3, r3, r6
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	b299      	uxth	r1, r3
 8002d98:	24ae      	movs	r4, #174	; 0xae
 8002d9a:	18bb      	adds	r3, r7, r2
 8002d9c:	191b      	adds	r3, r3, r4
 8002d9e:	881a      	ldrh	r2, [r3, #0]
 8002da0:	2364      	movs	r3, #100	; 0x64
 8002da2:	9302      	str	r3, [sp, #8]
 8002da4:	2301      	movs	r3, #1
 8002da6:	9301      	str	r3, [sp, #4]
 8002da8:	2543      	movs	r5, #67	; 0x43
 8002daa:	2308      	movs	r3, #8
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	195b      	adds	r3, r3, r5
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	2302      	movs	r3, #2
 8002db4:	f004 fc68 	bl	8007688 <HAL_I2C_Mem_Read>
		message[0] = b0;
 8002db8:	2108      	movs	r1, #8
 8002dba:	187b      	adds	r3, r7, r1
 8002dbc:	195b      	adds	r3, r3, r5
 8002dbe:	781a      	ldrb	r2, [r3, #0]
 8002dc0:	4b57      	ldr	r3, [pc, #348]	; (8002f20 <main+0x6ac>)
 8002dc2:	701a      	strb	r2, [r3, #0]
		eeprom_debug_address++;
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	191b      	adds	r3, r3, r4
 8002dc8:	881a      	ldrh	r2, [r3, #0]
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	191b      	adds	r3, r3, r4
 8002dce:	3201      	adds	r2, #1
 8002dd0:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8002dd2:	4b54      	ldr	r3, [pc, #336]	; (8002f24 <main+0x6b0>)
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	000a      	movs	r2, r1
 8002dd8:	18bb      	adds	r3, r7, r2
 8002dda:	199b      	adds	r3, r3, r6
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	b299      	uxth	r1, r3
 8002de0:	18bb      	adds	r3, r7, r2
 8002de2:	191b      	adds	r3, r3, r4
 8002de4:	881a      	ldrh	r2, [r3, #0]
 8002de6:	2364      	movs	r3, #100	; 0x64
 8002de8:	9302      	str	r3, [sp, #8]
 8002dea:	2301      	movs	r3, #1
 8002dec:	9301      	str	r3, [sp, #4]
 8002dee:	2308      	movs	r3, #8
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	195b      	adds	r3, r3, r5
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	2302      	movs	r3, #2
 8002df8:	f004 fc46 	bl	8007688 <HAL_I2C_Mem_Read>
		message[1] = b0;
 8002dfc:	2108      	movs	r1, #8
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	195b      	adds	r3, r3, r5
 8002e02:	781a      	ldrb	r2, [r3, #0]
 8002e04:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <main+0x6ac>)
 8002e06:	705a      	strb	r2, [r3, #1]
		eeprom_debug_address++;
 8002e08:	187b      	adds	r3, r7, r1
 8002e0a:	191b      	adds	r3, r3, r4
 8002e0c:	881a      	ldrh	r2, [r3, #0]
 8002e0e:	187b      	adds	r3, r7, r1
 8002e10:	191b      	adds	r3, r3, r4
 8002e12:	3201      	adds	r2, #1
 8002e14:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8002e16:	4b43      	ldr	r3, [pc, #268]	; (8002f24 <main+0x6b0>)
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	000a      	movs	r2, r1
 8002e1c:	18bb      	adds	r3, r7, r2
 8002e1e:	199b      	adds	r3, r3, r6
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	b299      	uxth	r1, r3
 8002e24:	18bb      	adds	r3, r7, r2
 8002e26:	191b      	adds	r3, r3, r4
 8002e28:	881a      	ldrh	r2, [r3, #0]
 8002e2a:	2364      	movs	r3, #100	; 0x64
 8002e2c:	9302      	str	r3, [sp, #8]
 8002e2e:	2301      	movs	r3, #1
 8002e30:	9301      	str	r3, [sp, #4]
 8002e32:	2308      	movs	r3, #8
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	195b      	adds	r3, r3, r5
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	f004 fc24 	bl	8007688 <HAL_I2C_Mem_Read>
		message[2] = b0;
 8002e40:	2108      	movs	r1, #8
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	195b      	adds	r3, r3, r5
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <main+0x6ac>)
 8002e4a:	709a      	strb	r2, [r3, #2]
		eeprom_debug_address++;
 8002e4c:	187b      	adds	r3, r7, r1
 8002e4e:	191b      	adds	r3, r3, r4
 8002e50:	881a      	ldrh	r2, [r3, #0]
 8002e52:	187b      	adds	r3, r7, r1
 8002e54:	191b      	adds	r3, r3, r4
 8002e56:	3201      	adds	r2, #1
 8002e58:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8002e5a:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <main+0x6b0>)
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	000a      	movs	r2, r1
 8002e60:	18bb      	adds	r3, r7, r2
 8002e62:	199b      	adds	r3, r3, r6
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	b299      	uxth	r1, r3
 8002e68:	0016      	movs	r6, r2
 8002e6a:	18bb      	adds	r3, r7, r2
 8002e6c:	191b      	adds	r3, r3, r4
 8002e6e:	881a      	ldrh	r2, [r3, #0]
 8002e70:	2364      	movs	r3, #100	; 0x64
 8002e72:	9302      	str	r3, [sp, #8]
 8002e74:	2301      	movs	r3, #1
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	0033      	movs	r3, r6
 8002e7a:	001e      	movs	r6, r3
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	195b      	adds	r3, r3, r5
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	2302      	movs	r3, #2
 8002e84:	f004 fc00 	bl	8007688 <HAL_I2C_Mem_Read>
		message[3] = b0;
 8002e88:	0032      	movs	r2, r6
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	18bb      	adds	r3, r7, r2
 8002e8e:	195b      	adds	r3, r3, r5
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <main+0x6ac>)
 8002e94:	70da      	strb	r2, [r3, #3]
		eeprom_debug_address++;
 8002e96:	187b      	adds	r3, r7, r1
 8002e98:	191b      	adds	r3, r3, r4
 8002e9a:	881a      	ldrh	r2, [r3, #0]
 8002e9c:	187b      	adds	r3, r7, r1
 8002e9e:	191b      	adds	r3, r3, r4
 8002ea0:	3201      	adds	r2, #1
 8002ea2:	801a      	strh	r2, [r3, #0]

		if((message[0] == 0) && (message[1] == 0))
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	; (8002f20 <main+0x6ac>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10b      	bne.n	8002ec4 <main+0x650>
 8002eac:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <main+0x6ac>)
 8002eae:	785b      	ldrb	r3, [r3, #1]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d107      	bne.n	8002ec4 <main+0x650>
		{
			end_of_log_reached = 1;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	22b0      	movs	r2, #176	; 0xb0
 8002eb8:	2108      	movs	r1, #8
 8002eba:	468c      	mov	ip, r1
 8002ebc:	44bc      	add	ip, r7
 8002ebe:	4462      	add	r2, ip
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e01e      	b.n	8002f02 <main+0x68e>
		}
		else
		{
			strncpy(log1_date_txt, message, 4);
 8002ec4:	4916      	ldr	r1, [pc, #88]	; (8002f20 <main+0x6ac>)
 8002ec6:	2334      	movs	r3, #52	; 0x34
 8002ec8:	2208      	movs	r2, #8
 8002eca:	4694      	mov	ip, r2
 8002ecc:	44bc      	add	ip, r7
 8002ece:	4463      	add	r3, ip
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f006 ffe8 	bl	8009ea8 <strncpy>

			message[4] = '\r';
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <main+0x6ac>)
 8002eda:	220d      	movs	r2, #13
 8002edc:	711a      	strb	r2, [r3, #4]
			message[5] = '\n';
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <main+0x6ac>)
 8002ee0:	220a      	movs	r2, #10
 8002ee2:	715a      	strb	r2, [r3, #5]
			message[6] = 0;
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <main+0x6ac>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	719a      	strb	r2, [r3, #6]
			HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <main+0x6ac>)
 8002eec:	0018      	movs	r0, r3
 8002eee:	f7fd f90b 	bl	8000108 <strlen>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	23fa      	movs	r3, #250	; 0xfa
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4909      	ldr	r1, [pc, #36]	; (8002f20 <main+0x6ac>)
 8002efc:	480a      	ldr	r0, [pc, #40]	; (8002f28 <main+0x6b4>)
 8002efe:	f006 fa53 	bl	80093a8 <HAL_UART_Transmit>
		}
		
		int seconds_counter = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	22a8      	movs	r2, #168	; 0xa8
 8002f06:	2108      	movs	r1, #8
 8002f08:	468c      	mov	ip, r1
 8002f0a:	44bc      	add	ip, r7
 8002f0c:	4462      	add	r2, ip
 8002f0e:	6013      	str	r3, [r2, #0]
		int dive_hours = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	663b      	str	r3, [r7, #96]	; 0x60
		int dive_minutes = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	65fb      	str	r3, [r7, #92]	; 0x5c
		int dive_seconds = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	65bb      	str	r3, [r7, #88]	; 0x58


		while(!end_of_log_reached)
 8002f1c:	e0eb      	b.n	80030f6 <main+0x882>
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	20000234 	.word	0x20000234
 8002f24:	20000020 	.word	0x20000020
 8002f28:	2000090c 	.word	0x2000090c
		{

			HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8002f2c:	4b65      	ldr	r3, [pc, #404]	; (80030c4 <main+0x850>)
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	26ad      	movs	r6, #173	; 0xad
 8002f32:	2208      	movs	r2, #8
 8002f34:	18bb      	adds	r3, r7, r2
 8002f36:	199b      	adds	r3, r3, r6
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	b299      	uxth	r1, r3
 8002f3c:	24ae      	movs	r4, #174	; 0xae
 8002f3e:	18bb      	adds	r3, r7, r2
 8002f40:	191b      	adds	r3, r3, r4
 8002f42:	881a      	ldrh	r2, [r3, #0]
 8002f44:	2364      	movs	r3, #100	; 0x64
 8002f46:	9302      	str	r3, [sp, #8]
 8002f48:	2301      	movs	r3, #1
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	2543      	movs	r5, #67	; 0x43
 8002f4e:	2308      	movs	r3, #8
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	195b      	adds	r3, r3, r5
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	2302      	movs	r3, #2
 8002f58:	f004 fb96 	bl	8007688 <HAL_I2C_Mem_Read>
			message[0] = b0;
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	0011      	movs	r1, r2
 8002f60:	18bb      	adds	r3, r7, r2
 8002f62:	195b      	adds	r3, r3, r5
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	4b58      	ldr	r3, [pc, #352]	; (80030c8 <main+0x854>)
 8002f68:	701a      	strb	r2, [r3, #0]
			eeprom_debug_address++;
 8002f6a:	187b      	adds	r3, r7, r1
 8002f6c:	191b      	adds	r3, r3, r4
 8002f6e:	881a      	ldrh	r2, [r3, #0]
 8002f70:	187b      	adds	r3, r7, r1
 8002f72:	191b      	adds	r3, r3, r4
 8002f74:	3201      	adds	r2, #1
 8002f76:	801a      	strh	r2, [r3, #0]
			HAL_Delay(3);
 8002f78:	2003      	movs	r0, #3
 8002f7a:	f003 fbbb 	bl	80066f4 <HAL_Delay>

			HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8002f7e:	4b51      	ldr	r3, [pc, #324]	; (80030c4 <main+0x850>)
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	2108      	movs	r1, #8
 8002f84:	000a      	movs	r2, r1
 8002f86:	187b      	adds	r3, r7, r1
 8002f88:	199b      	adds	r3, r3, r6
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	b299      	uxth	r1, r3
 8002f8e:	18bb      	adds	r3, r7, r2
 8002f90:	191b      	adds	r3, r3, r4
 8002f92:	881a      	ldrh	r2, [r3, #0]
 8002f94:	2364      	movs	r3, #100	; 0x64
 8002f96:	9302      	str	r3, [sp, #8]
 8002f98:	2301      	movs	r3, #1
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	195b      	adds	r3, r3, r5
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	f004 fb6f 	bl	8007688 <HAL_I2C_Mem_Read>
			message[1] = b0;
 8002faa:	2108      	movs	r1, #8
 8002fac:	187b      	adds	r3, r7, r1
 8002fae:	195b      	adds	r3, r3, r5
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	4b45      	ldr	r3, [pc, #276]	; (80030c8 <main+0x854>)
 8002fb4:	705a      	strb	r2, [r3, #1]
			eeprom_debug_address++;
 8002fb6:	187b      	adds	r3, r7, r1
 8002fb8:	191b      	adds	r3, r3, r4
 8002fba:	881a      	ldrh	r2, [r3, #0]
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	191b      	adds	r3, r3, r4
 8002fc0:	3201      	adds	r2, #1
 8002fc2:	801a      	strh	r2, [r3, #0]

			message[2] = '.';
 8002fc4:	4b40      	ldr	r3, [pc, #256]	; (80030c8 <main+0x854>)
 8002fc6:	222e      	movs	r2, #46	; 0x2e
 8002fc8:	709a      	strb	r2, [r3, #2]

			HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8002fca:	4b3e      	ldr	r3, [pc, #248]	; (80030c4 <main+0x850>)
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	000a      	movs	r2, r1
 8002fd0:	18bb      	adds	r3, r7, r2
 8002fd2:	199b      	adds	r3, r3, r6
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	b299      	uxth	r1, r3
 8002fd8:	18bb      	adds	r3, r7, r2
 8002fda:	191b      	adds	r3, r3, r4
 8002fdc:	881a      	ldrh	r2, [r3, #0]
 8002fde:	2364      	movs	r3, #100	; 0x64
 8002fe0:	9302      	str	r3, [sp, #8]
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	9301      	str	r3, [sp, #4]
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	195b      	adds	r3, r3, r5
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f004 fb4a 	bl	8007688 <HAL_I2C_Mem_Read>
			message[3] = b0;
 8002ff4:	2108      	movs	r1, #8
 8002ff6:	187b      	adds	r3, r7, r1
 8002ff8:	195b      	adds	r3, r3, r5
 8002ffa:	781a      	ldrb	r2, [r3, #0]
 8002ffc:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <main+0x854>)
 8002ffe:	70da      	strb	r2, [r3, #3]
			eeprom_debug_address++;
 8003000:	187b      	adds	r3, r7, r1
 8003002:	191b      	adds	r3, r3, r4
 8003004:	881a      	ldrh	r2, [r3, #0]
 8003006:	187b      	adds	r3, r7, r1
 8003008:	191b      	adds	r3, r3, r4
 800300a:	3201      	adds	r2, #1
 800300c:	801a      	strh	r2, [r3, #0]

			message[4] = ' ';
 800300e:	4b2e      	ldr	r3, [pc, #184]	; (80030c8 <main+0x854>)
 8003010:	2220      	movs	r2, #32
 8003012:	711a      	strb	r2, [r3, #4]

			HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003014:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <main+0x850>)
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	000a      	movs	r2, r1
 800301a:	18bb      	adds	r3, r7, r2
 800301c:	199b      	adds	r3, r3, r6
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b299      	uxth	r1, r3
 8003022:	18bb      	adds	r3, r7, r2
 8003024:	191b      	adds	r3, r3, r4
 8003026:	881a      	ldrh	r2, [r3, #0]
 8003028:	2364      	movs	r3, #100	; 0x64
 800302a:	9302      	str	r3, [sp, #8]
 800302c:	2301      	movs	r3, #1
 800302e:	9301      	str	r3, [sp, #4]
 8003030:	2308      	movs	r3, #8
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	195b      	adds	r3, r3, r5
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2302      	movs	r3, #2
 800303a:	f004 fb25 	bl	8007688 <HAL_I2C_Mem_Read>
			message[5] = b0;
 800303e:	2108      	movs	r1, #8
 8003040:	187b      	adds	r3, r7, r1
 8003042:	195b      	adds	r3, r3, r5
 8003044:	781a      	ldrb	r2, [r3, #0]
 8003046:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <main+0x854>)
 8003048:	715a      	strb	r2, [r3, #5]
			eeprom_debug_address++;
 800304a:	187b      	adds	r3, r7, r1
 800304c:	191b      	adds	r3, r3, r4
 800304e:	881a      	ldrh	r2, [r3, #0]
 8003050:	187b      	adds	r3, r7, r1
 8003052:	191b      	adds	r3, r3, r4
 8003054:	3201      	adds	r2, #1
 8003056:	801a      	strh	r2, [r3, #0]

			HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003058:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <main+0x850>)
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	000a      	movs	r2, r1
 800305e:	18bb      	adds	r3, r7, r2
 8003060:	199b      	adds	r3, r3, r6
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	b299      	uxth	r1, r3
 8003066:	0016      	movs	r6, r2
 8003068:	18bb      	adds	r3, r7, r2
 800306a:	191b      	adds	r3, r3, r4
 800306c:	881a      	ldrh	r2, [r3, #0]
 800306e:	2364      	movs	r3, #100	; 0x64
 8003070:	9302      	str	r3, [sp, #8]
 8003072:	2301      	movs	r3, #1
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	0033      	movs	r3, r6
 8003078:	001e      	movs	r6, r3
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	195b      	adds	r3, r3, r5
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2302      	movs	r3, #2
 8003082:	f004 fb01 	bl	8007688 <HAL_I2C_Mem_Read>
			message[6] = b0;
 8003086:	0032      	movs	r2, r6
 8003088:	0011      	movs	r1, r2
 800308a:	18bb      	adds	r3, r7, r2
 800308c:	195b      	adds	r3, r3, r5
 800308e:	781a      	ldrb	r2, [r3, #0]
 8003090:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <main+0x854>)
 8003092:	719a      	strb	r2, [r3, #6]
			eeprom_debug_address++;
 8003094:	187b      	adds	r3, r7, r1
 8003096:	191b      	adds	r3, r3, r4
 8003098:	881a      	ldrh	r2, [r3, #0]
 800309a:	187b      	adds	r3, r7, r1
 800309c:	191b      	adds	r3, r3, r4
 800309e:	3201      	adds	r2, #1
 80030a0:	801a      	strh	r2, [r3, #0]

			if((message[0] == 0) && (message[1] == 0))
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <main+0x854>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d110      	bne.n	80030cc <main+0x858>
 80030aa:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <main+0x854>)
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <main+0x858>
			{
				end_of_log_reached = 1;
 80030b2:	2301      	movs	r3, #1
 80030b4:	22b0      	movs	r2, #176	; 0xb0
 80030b6:	2108      	movs	r1, #8
 80030b8:	468c      	mov	ip, r1
 80030ba:	44bc      	add	ip, r7
 80030bc:	4462      	add	r2, ip
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	e019      	b.n	80030f6 <main+0x882>
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	20000020 	.word	0x20000020
 80030c8:	20000234 	.word	0x20000234
				HAL_Delay(700);
				*/
				//********************************************************************************
				// debug output on lcd

				message[7] = '\r';
 80030cc:	4b99      	ldr	r3, [pc, #612]	; (8003334 <main+0xac0>)
 80030ce:	220d      	movs	r2, #13
 80030d0:	71da      	strb	r2, [r3, #7]
				message[8] = '\n';
 80030d2:	4b98      	ldr	r3, [pc, #608]	; (8003334 <main+0xac0>)
 80030d4:	220a      	movs	r2, #10
 80030d6:	721a      	strb	r2, [r3, #8]
				message[9] = 0;
 80030d8:	4b96      	ldr	r3, [pc, #600]	; (8003334 <main+0xac0>)
 80030da:	2200      	movs	r2, #0
 80030dc:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 80030de:	4b95      	ldr	r3, [pc, #596]	; (8003334 <main+0xac0>)
 80030e0:	0018      	movs	r0, r3
 80030e2:	f7fd f811 	bl	8000108 <strlen>
 80030e6:	0003      	movs	r3, r0
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	23fa      	movs	r3, #250	; 0xfa
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4991      	ldr	r1, [pc, #580]	; (8003334 <main+0xac0>)
 80030f0:	4891      	ldr	r0, [pc, #580]	; (8003338 <main+0xac4>)
 80030f2:	f006 f959 	bl	80093a8 <HAL_UART_Transmit>
		while(!end_of_log_reached)
 80030f6:	23b0      	movs	r3, #176	; 0xb0
 80030f8:	2208      	movs	r2, #8
 80030fa:	4694      	mov	ip, r2
 80030fc:	44bc      	add	ip, r7
 80030fe:	4463      	add	r3, ip
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d100      	bne.n	8003108 <main+0x894>
 8003106:	e711      	b.n	8002f2c <main+0x6b8>
			}
		}  // while(!end_of_log_reached)

		sprintf(message, "\r\n");
 8003108:	4b8a      	ldr	r3, [pc, #552]	; (8003334 <main+0xac0>)
 800310a:	4a8c      	ldr	r2, [pc, #560]	; (800333c <main+0xac8>)
 800310c:	8811      	ldrh	r1, [r2, #0]
 800310e:	8019      	strh	r1, [r3, #0]
 8003110:	7892      	ldrb	r2, [r2, #2]
 8003112:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8003114:	4b87      	ldr	r3, [pc, #540]	; (8003334 <main+0xac0>)
 8003116:	0018      	movs	r0, r3
 8003118:	f7fc fff6 	bl	8000108 <strlen>
 800311c:	0003      	movs	r3, r0
 800311e:	b29a      	uxth	r2, r3
 8003120:	23fa      	movs	r3, #250	; 0xfa
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4983      	ldr	r1, [pc, #524]	; (8003334 <main+0xac0>)
 8003126:	4884      	ldr	r0, [pc, #528]	; (8003338 <main+0xac4>)
 8003128:	f006 f93e 	bl	80093a8 <HAL_UART_Transmit>
		sprintf(message, "**********\r\nlog bank 1 finish\r\n");
 800312c:	4b81      	ldr	r3, [pc, #516]	; (8003334 <main+0xac0>)
 800312e:	4a84      	ldr	r2, [pc, #528]	; (8003340 <main+0xacc>)
 8003130:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003132:	c313      	stmia	r3!, {r0, r1, r4}
 8003134:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003136:	c313      	stmia	r3!, {r0, r1, r4}
 8003138:	ca03      	ldmia	r2!, {r0, r1}
 800313a:	c303      	stmia	r3!, {r0, r1}
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 800313c:	4b7d      	ldr	r3, [pc, #500]	; (8003334 <main+0xac0>)
 800313e:	0018      	movs	r0, r3
 8003140:	f7fc ffe2 	bl	8000108 <strlen>
 8003144:	0003      	movs	r3, r0
 8003146:	b29a      	uxth	r2, r3
 8003148:	23fa      	movs	r3, #250	; 0xfa
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4979      	ldr	r1, [pc, #484]	; (8003334 <main+0xac0>)
 800314e:	487a      	ldr	r0, [pc, #488]	; (8003338 <main+0xac4>)
 8003150:	f006 f92a 	bl	80093a8 <HAL_UART_Transmit>


		eeprom_debug_address = 64;
 8003154:	24ae      	movs	r4, #174	; 0xae
 8003156:	2208      	movs	r2, #8
 8003158:	0011      	movs	r1, r2
 800315a:	18bb      	adds	r3, r7, r2
 800315c:	191b      	adds	r3, r3, r4
 800315e:	2240      	movs	r2, #64	; 0x40
 8003160:	801a      	strh	r2, [r3, #0]
		at24c32_shifted_address = 0x51 << 1;
 8003162:	25ad      	movs	r5, #173	; 0xad
 8003164:	000a      	movs	r2, r1
 8003166:	18bb      	adds	r3, r7, r2
 8003168:	195b      	adds	r3, r3, r5
 800316a:	22a2      	movs	r2, #162	; 0xa2
 800316c:	701a      	strb	r2, [r3, #0]

		sprintf(message, "\r\n");
 800316e:	4b71      	ldr	r3, [pc, #452]	; (8003334 <main+0xac0>)
 8003170:	4a72      	ldr	r2, [pc, #456]	; (800333c <main+0xac8>)
 8003172:	8811      	ldrh	r1, [r2, #0]
 8003174:	8019      	strh	r1, [r3, #0]
 8003176:	7892      	ldrb	r2, [r2, #2]
 8003178:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 800317a:	4b6e      	ldr	r3, [pc, #440]	; (8003334 <main+0xac0>)
 800317c:	0018      	movs	r0, r3
 800317e:	f7fc ffc3 	bl	8000108 <strlen>
 8003182:	0003      	movs	r3, r0
 8003184:	b29a      	uxth	r2, r3
 8003186:	23fa      	movs	r3, #250	; 0xfa
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	496a      	ldr	r1, [pc, #424]	; (8003334 <main+0xac0>)
 800318c:	486a      	ldr	r0, [pc, #424]	; (8003338 <main+0xac4>)
 800318e:	f006 f90b 	bl	80093a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8003192:	4b68      	ldr	r3, [pc, #416]	; (8003334 <main+0xac0>)
 8003194:	0018      	movs	r0, r3
 8003196:	f7fc ffb7 	bl	8000108 <strlen>
 800319a:	0003      	movs	r3, r0
 800319c:	b29a      	uxth	r2, r3
 800319e:	23fa      	movs	r3, #250	; 0xfa
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4964      	ldr	r1, [pc, #400]	; (8003334 <main+0xac0>)
 80031a4:	4864      	ldr	r0, [pc, #400]	; (8003338 <main+0xac4>)
 80031a6:	f006 f8ff 	bl	80093a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 80031aa:	4b62      	ldr	r3, [pc, #392]	; (8003334 <main+0xac0>)
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7fc ffab 	bl	8000108 <strlen>
 80031b2:	0003      	movs	r3, r0
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	23fa      	movs	r3, #250	; 0xfa
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	495e      	ldr	r1, [pc, #376]	; (8003334 <main+0xac0>)
 80031bc:	485e      	ldr	r0, [pc, #376]	; (8003338 <main+0xac4>)
 80031be:	f006 f8f3 	bl	80093a8 <HAL_UART_Transmit>

		sprintf(message, "log bank 2 start\r\n***********\r\n");
 80031c2:	4b5c      	ldr	r3, [pc, #368]	; (8003334 <main+0xac0>)
 80031c4:	4a5f      	ldr	r2, [pc, #380]	; (8003344 <main+0xad0>)
 80031c6:	ca43      	ldmia	r2!, {r0, r1, r6}
 80031c8:	c343      	stmia	r3!, {r0, r1, r6}
 80031ca:	ca43      	ldmia	r2!, {r0, r1, r6}
 80031cc:	c343      	stmia	r3!, {r0, r1, r6}
 80031ce:	ca03      	ldmia	r2!, {r0, r1}
 80031d0:	c303      	stmia	r3!, {r0, r1}
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 80031d2:	4b58      	ldr	r3, [pc, #352]	; (8003334 <main+0xac0>)
 80031d4:	0018      	movs	r0, r3
 80031d6:	f7fc ff97 	bl	8000108 <strlen>
 80031da:	0003      	movs	r3, r0
 80031dc:	b29a      	uxth	r2, r3
 80031de:	23fa      	movs	r3, #250	; 0xfa
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4954      	ldr	r1, [pc, #336]	; (8003334 <main+0xac0>)
 80031e4:	4854      	ldr	r0, [pc, #336]	; (8003338 <main+0xac4>)
 80031e6:	f006 f8df 	bl	80093a8 <HAL_UART_Transmit>

		end_of_log_reached = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	22b0      	movs	r2, #176	; 0xb0
 80031ee:	2008      	movs	r0, #8
 80031f0:	4684      	mov	ip, r0
 80031f2:	44bc      	add	ip, r7
 80031f4:	4462      	add	r2, ip
 80031f6:	6013      	str	r3, [r2, #0]

	
		// read timestamp time
		char log2_time_txt[5];

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);		
 80031f8:	4b53      	ldr	r3, [pc, #332]	; (8003348 <main+0xad4>)
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	002e      	movs	r6, r5
 80031fe:	2208      	movs	r2, #8
 8003200:	18bb      	adds	r3, r7, r2
 8003202:	199b      	adds	r3, r3, r6
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b299      	uxth	r1, r3
 8003208:	18bb      	adds	r3, r7, r2
 800320a:	191b      	adds	r3, r3, r4
 800320c:	881a      	ldrh	r2, [r3, #0]
 800320e:	2364      	movs	r3, #100	; 0x64
 8003210:	9302      	str	r3, [sp, #8]
 8003212:	2301      	movs	r3, #1
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	2543      	movs	r5, #67	; 0x43
 8003218:	2308      	movs	r3, #8
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	195b      	adds	r3, r3, r5
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2302      	movs	r3, #2
 8003222:	f004 fa31 	bl	8007688 <HAL_I2C_Mem_Read>
		message[0] = b0;
 8003226:	2108      	movs	r1, #8
 8003228:	187b      	adds	r3, r7, r1
 800322a:	195b      	adds	r3, r3, r5
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	4b41      	ldr	r3, [pc, #260]	; (8003334 <main+0xac0>)
 8003230:	701a      	strb	r2, [r3, #0]
		eeprom_debug_address++;
 8003232:	187b      	adds	r3, r7, r1
 8003234:	191b      	adds	r3, r3, r4
 8003236:	881a      	ldrh	r2, [r3, #0]
 8003238:	187b      	adds	r3, r7, r1
 800323a:	191b      	adds	r3, r3, r4
 800323c:	3201      	adds	r2, #1
 800323e:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003240:	4b41      	ldr	r3, [pc, #260]	; (8003348 <main+0xad4>)
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	000a      	movs	r2, r1
 8003246:	18bb      	adds	r3, r7, r2
 8003248:	199b      	adds	r3, r3, r6
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	b299      	uxth	r1, r3
 800324e:	18bb      	adds	r3, r7, r2
 8003250:	191b      	adds	r3, r3, r4
 8003252:	881a      	ldrh	r2, [r3, #0]
 8003254:	2364      	movs	r3, #100	; 0x64
 8003256:	9302      	str	r3, [sp, #8]
 8003258:	2301      	movs	r3, #1
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	2308      	movs	r3, #8
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	195b      	adds	r3, r3, r5
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	2302      	movs	r3, #2
 8003266:	f004 fa0f 	bl	8007688 <HAL_I2C_Mem_Read>
		message[1] = b0;
 800326a:	2108      	movs	r1, #8
 800326c:	187b      	adds	r3, r7, r1
 800326e:	195b      	adds	r3, r3, r5
 8003270:	781a      	ldrb	r2, [r3, #0]
 8003272:	4b30      	ldr	r3, [pc, #192]	; (8003334 <main+0xac0>)
 8003274:	705a      	strb	r2, [r3, #1]
		eeprom_debug_address++;
 8003276:	187b      	adds	r3, r7, r1
 8003278:	191b      	adds	r3, r3, r4
 800327a:	881a      	ldrh	r2, [r3, #0]
 800327c:	187b      	adds	r3, r7, r1
 800327e:	191b      	adds	r3, r3, r4
 8003280:	3201      	adds	r2, #1
 8003282:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003284:	4b30      	ldr	r3, [pc, #192]	; (8003348 <main+0xad4>)
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	000a      	movs	r2, r1
 800328a:	18bb      	adds	r3, r7, r2
 800328c:	199b      	adds	r3, r3, r6
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	b299      	uxth	r1, r3
 8003292:	18bb      	adds	r3, r7, r2
 8003294:	191b      	adds	r3, r3, r4
 8003296:	881a      	ldrh	r2, [r3, #0]
 8003298:	2364      	movs	r3, #100	; 0x64
 800329a:	9302      	str	r3, [sp, #8]
 800329c:	2301      	movs	r3, #1
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	2308      	movs	r3, #8
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	195b      	adds	r3, r3, r5
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	2302      	movs	r3, #2
 80032aa:	f004 f9ed 	bl	8007688 <HAL_I2C_Mem_Read>
		message[2] = b0;
 80032ae:	2108      	movs	r1, #8
 80032b0:	187b      	adds	r3, r7, r1
 80032b2:	195b      	adds	r3, r3, r5
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <main+0xac0>)
 80032b8:	709a      	strb	r2, [r3, #2]
		eeprom_debug_address++;
 80032ba:	187b      	adds	r3, r7, r1
 80032bc:	191b      	adds	r3, r3, r4
 80032be:	881a      	ldrh	r2, [r3, #0]
 80032c0:	187b      	adds	r3, r7, r1
 80032c2:	191b      	adds	r3, r3, r4
 80032c4:	3201      	adds	r2, #1
 80032c6:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80032c8:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <main+0xad4>)
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	000a      	movs	r2, r1
 80032ce:	18bb      	adds	r3, r7, r2
 80032d0:	199b      	adds	r3, r3, r6
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	b299      	uxth	r1, r3
 80032d6:	0016      	movs	r6, r2
 80032d8:	18bb      	adds	r3, r7, r2
 80032da:	191b      	adds	r3, r3, r4
 80032dc:	881a      	ldrh	r2, [r3, #0]
 80032de:	2364      	movs	r3, #100	; 0x64
 80032e0:	9302      	str	r3, [sp, #8]
 80032e2:	2301      	movs	r3, #1
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	0033      	movs	r3, r6
 80032e8:	001e      	movs	r6, r3
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	195b      	adds	r3, r3, r5
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	2302      	movs	r3, #2
 80032f2:	f004 f9c9 	bl	8007688 <HAL_I2C_Mem_Read>
		message[3] = b0;
 80032f6:	0032      	movs	r2, r6
 80032f8:	0011      	movs	r1, r2
 80032fa:	18bb      	adds	r3, r7, r2
 80032fc:	195b      	adds	r3, r3, r5
 80032fe:	781a      	ldrb	r2, [r3, #0]
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <main+0xac0>)
 8003302:	70da      	strb	r2, [r3, #3]
		eeprom_debug_address++;
 8003304:	187b      	adds	r3, r7, r1
 8003306:	191b      	adds	r3, r3, r4
 8003308:	881a      	ldrh	r2, [r3, #0]
 800330a:	187b      	adds	r3, r7, r1
 800330c:	191b      	adds	r3, r3, r4
 800330e:	3201      	adds	r2, #1
 8003310:	801a      	strh	r2, [r3, #0]

		if((message[0] == 0) && (message[1] == 0))
 8003312:	4b08      	ldr	r3, [pc, #32]	; (8003334 <main+0xac0>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d118      	bne.n	800334c <main+0xad8>
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <main+0xac0>)
 800331c:	785b      	ldrb	r3, [r3, #1]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d114      	bne.n	800334c <main+0xad8>
		{
			end_of_log_reached = 1;
 8003322:	2301      	movs	r3, #1
 8003324:	22b0      	movs	r2, #176	; 0xb0
 8003326:	2108      	movs	r1, #8
 8003328:	468c      	mov	ip, r1
 800332a:	44bc      	add	ip, r7
 800332c:	4462      	add	r2, ip
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	e02b      	b.n	800338a <main+0xb16>
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	20000234 	.word	0x20000234
 8003338:	2000090c 	.word	0x2000090c
 800333c:	0800b0fc 	.word	0x0800b0fc
 8003340:	0800b120 	.word	0x0800b120
 8003344:	0800b140 	.word	0x0800b140
 8003348:	20000020 	.word	0x20000020
		}
		else
		{
			strncpy(log2_time_txt, message, 4);
 800334c:	49d3      	ldr	r1, [pc, #844]	; (800369c <main+0xe28>)
 800334e:	232c      	movs	r3, #44	; 0x2c
 8003350:	2208      	movs	r2, #8
 8003352:	4694      	mov	ip, r2
 8003354:	44bc      	add	ip, r7
 8003356:	4463      	add	r3, ip
 8003358:	2204      	movs	r2, #4
 800335a:	0018      	movs	r0, r3
 800335c:	f006 fda4 	bl	8009ea8 <strncpy>

			message[4] = '\r';
 8003360:	4bce      	ldr	r3, [pc, #824]	; (800369c <main+0xe28>)
 8003362:	220d      	movs	r2, #13
 8003364:	711a      	strb	r2, [r3, #4]
			message[5] = '\n';
 8003366:	4bcd      	ldr	r3, [pc, #820]	; (800369c <main+0xe28>)
 8003368:	220a      	movs	r2, #10
 800336a:	715a      	strb	r2, [r3, #5]
			message[6] = 0;
 800336c:	4bcb      	ldr	r3, [pc, #812]	; (800369c <main+0xe28>)
 800336e:	2200      	movs	r2, #0
 8003370:	719a      	strb	r2, [r3, #6]
			HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8003372:	4bca      	ldr	r3, [pc, #808]	; (800369c <main+0xe28>)
 8003374:	0018      	movs	r0, r3
 8003376:	f7fc fec7 	bl	8000108 <strlen>
 800337a:	0003      	movs	r3, r0
 800337c:	b29a      	uxth	r2, r3
 800337e:	23fa      	movs	r3, #250	; 0xfa
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	49c6      	ldr	r1, [pc, #792]	; (800369c <main+0xe28>)
 8003384:	48c6      	ldr	r0, [pc, #792]	; (80036a0 <main+0xe2c>)
 8003386:	f006 f80f 	bl	80093a8 <HAL_UART_Transmit>
		}
		// read timestamp date
		char log2_date_txt[5];

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);		
 800338a:	4bc6      	ldr	r3, [pc, #792]	; (80036a4 <main+0xe30>)
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	26ad      	movs	r6, #173	; 0xad
 8003390:	2208      	movs	r2, #8
 8003392:	18bb      	adds	r3, r7, r2
 8003394:	199b      	adds	r3, r3, r6
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	b299      	uxth	r1, r3
 800339a:	24ae      	movs	r4, #174	; 0xae
 800339c:	18bb      	adds	r3, r7, r2
 800339e:	191b      	adds	r3, r3, r4
 80033a0:	881a      	ldrh	r2, [r3, #0]
 80033a2:	2364      	movs	r3, #100	; 0x64
 80033a4:	9302      	str	r3, [sp, #8]
 80033a6:	2301      	movs	r3, #1
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	2543      	movs	r5, #67	; 0x43
 80033ac:	2308      	movs	r3, #8
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	195b      	adds	r3, r3, r5
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2302      	movs	r3, #2
 80033b6:	f004 f967 	bl	8007688 <HAL_I2C_Mem_Read>
		message[0] = b0;
 80033ba:	2108      	movs	r1, #8
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	195b      	adds	r3, r3, r5
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	4bb6      	ldr	r3, [pc, #728]	; (800369c <main+0xe28>)
 80033c4:	701a      	strb	r2, [r3, #0]
		eeprom_debug_address++;
 80033c6:	187b      	adds	r3, r7, r1
 80033c8:	191b      	adds	r3, r3, r4
 80033ca:	881a      	ldrh	r2, [r3, #0]
 80033cc:	187b      	adds	r3, r7, r1
 80033ce:	191b      	adds	r3, r3, r4
 80033d0:	3201      	adds	r2, #1
 80033d2:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80033d4:	4bb3      	ldr	r3, [pc, #716]	; (80036a4 <main+0xe30>)
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	000a      	movs	r2, r1
 80033da:	18bb      	adds	r3, r7, r2
 80033dc:	199b      	adds	r3, r3, r6
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	b299      	uxth	r1, r3
 80033e2:	18bb      	adds	r3, r7, r2
 80033e4:	191b      	adds	r3, r3, r4
 80033e6:	881a      	ldrh	r2, [r3, #0]
 80033e8:	2364      	movs	r3, #100	; 0x64
 80033ea:	9302      	str	r3, [sp, #8]
 80033ec:	2301      	movs	r3, #1
 80033ee:	9301      	str	r3, [sp, #4]
 80033f0:	2308      	movs	r3, #8
 80033f2:	18fb      	adds	r3, r7, r3
 80033f4:	195b      	adds	r3, r3, r5
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2302      	movs	r3, #2
 80033fa:	f004 f945 	bl	8007688 <HAL_I2C_Mem_Read>
		message[1] = b0;
 80033fe:	2108      	movs	r1, #8
 8003400:	187b      	adds	r3, r7, r1
 8003402:	195b      	adds	r3, r3, r5
 8003404:	781a      	ldrb	r2, [r3, #0]
 8003406:	4ba5      	ldr	r3, [pc, #660]	; (800369c <main+0xe28>)
 8003408:	705a      	strb	r2, [r3, #1]
		eeprom_debug_address++;
 800340a:	187b      	adds	r3, r7, r1
 800340c:	191b      	adds	r3, r3, r4
 800340e:	881a      	ldrh	r2, [r3, #0]
 8003410:	187b      	adds	r3, r7, r1
 8003412:	191b      	adds	r3, r3, r4
 8003414:	3201      	adds	r2, #1
 8003416:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003418:	4ba2      	ldr	r3, [pc, #648]	; (80036a4 <main+0xe30>)
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	000a      	movs	r2, r1
 800341e:	18bb      	adds	r3, r7, r2
 8003420:	199b      	adds	r3, r3, r6
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	b299      	uxth	r1, r3
 8003426:	18bb      	adds	r3, r7, r2
 8003428:	191b      	adds	r3, r3, r4
 800342a:	881a      	ldrh	r2, [r3, #0]
 800342c:	2364      	movs	r3, #100	; 0x64
 800342e:	9302      	str	r3, [sp, #8]
 8003430:	2301      	movs	r3, #1
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	2308      	movs	r3, #8
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	195b      	adds	r3, r3, r5
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	2302      	movs	r3, #2
 800343e:	f004 f923 	bl	8007688 <HAL_I2C_Mem_Read>
		message[2] = b0;
 8003442:	2108      	movs	r1, #8
 8003444:	187b      	adds	r3, r7, r1
 8003446:	195b      	adds	r3, r3, r5
 8003448:	781a      	ldrb	r2, [r3, #0]
 800344a:	4b94      	ldr	r3, [pc, #592]	; (800369c <main+0xe28>)
 800344c:	709a      	strb	r2, [r3, #2]
		eeprom_debug_address++;
 800344e:	187b      	adds	r3, r7, r1
 8003450:	191b      	adds	r3, r3, r4
 8003452:	881a      	ldrh	r2, [r3, #0]
 8003454:	187b      	adds	r3, r7, r1
 8003456:	191b      	adds	r3, r3, r4
 8003458:	3201      	adds	r2, #1
 800345a:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 800345c:	4b91      	ldr	r3, [pc, #580]	; (80036a4 <main+0xe30>)
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	000a      	movs	r2, r1
 8003462:	18bb      	adds	r3, r7, r2
 8003464:	199b      	adds	r3, r3, r6
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	b299      	uxth	r1, r3
 800346a:	0016      	movs	r6, r2
 800346c:	18bb      	adds	r3, r7, r2
 800346e:	191b      	adds	r3, r3, r4
 8003470:	881a      	ldrh	r2, [r3, #0]
 8003472:	2364      	movs	r3, #100	; 0x64
 8003474:	9302      	str	r3, [sp, #8]
 8003476:	2301      	movs	r3, #1
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	0033      	movs	r3, r6
 800347c:	001e      	movs	r6, r3
 800347e:	18fb      	adds	r3, r7, r3
 8003480:	195b      	adds	r3, r3, r5
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	2302      	movs	r3, #2
 8003486:	f004 f8ff 	bl	8007688 <HAL_I2C_Mem_Read>
		message[3] = b0;
 800348a:	0032      	movs	r2, r6
 800348c:	0011      	movs	r1, r2
 800348e:	18bb      	adds	r3, r7, r2
 8003490:	195b      	adds	r3, r3, r5
 8003492:	781a      	ldrb	r2, [r3, #0]
 8003494:	4b81      	ldr	r3, [pc, #516]	; (800369c <main+0xe28>)
 8003496:	70da      	strb	r2, [r3, #3]
		eeprom_debug_address++;
 8003498:	187b      	adds	r3, r7, r1
 800349a:	191b      	adds	r3, r3, r4
 800349c:	881a      	ldrh	r2, [r3, #0]
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	191b      	adds	r3, r3, r4
 80034a2:	3201      	adds	r2, #1
 80034a4:	801a      	strh	r2, [r3, #0]

		if((message[0] == 0) && (message[1] == 0))
 80034a6:	4b7d      	ldr	r3, [pc, #500]	; (800369c <main+0xe28>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <main+0xc52>
 80034ae:	4b7b      	ldr	r3, [pc, #492]	; (800369c <main+0xe28>)
 80034b0:	785b      	ldrb	r3, [r3, #1]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d107      	bne.n	80034c6 <main+0xc52>
		{
			end_of_log_reached = 1;
 80034b6:	2301      	movs	r3, #1
 80034b8:	22b0      	movs	r2, #176	; 0xb0
 80034ba:	2108      	movs	r1, #8
 80034bc:	468c      	mov	ip, r1
 80034be:	44bc      	add	ip, r7
 80034c0:	4462      	add	r2, ip
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	e01e      	b.n	8003504 <main+0xc90>
		}
		else
		{
			strncpy(log2_date_txt, message, 4);
 80034c6:	4975      	ldr	r1, [pc, #468]	; (800369c <main+0xe28>)
 80034c8:	2324      	movs	r3, #36	; 0x24
 80034ca:	2208      	movs	r2, #8
 80034cc:	4694      	mov	ip, r2
 80034ce:	44bc      	add	ip, r7
 80034d0:	4463      	add	r3, ip
 80034d2:	2204      	movs	r2, #4
 80034d4:	0018      	movs	r0, r3
 80034d6:	f006 fce7 	bl	8009ea8 <strncpy>

			message[4] = '\r';
 80034da:	4b70      	ldr	r3, [pc, #448]	; (800369c <main+0xe28>)
 80034dc:	220d      	movs	r2, #13
 80034de:	711a      	strb	r2, [r3, #4]
			message[5] = '\n';
 80034e0:	4b6e      	ldr	r3, [pc, #440]	; (800369c <main+0xe28>)
 80034e2:	220a      	movs	r2, #10
 80034e4:	715a      	strb	r2, [r3, #5]
			message[6] = 0;
 80034e6:	4b6d      	ldr	r3, [pc, #436]	; (800369c <main+0xe28>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	719a      	strb	r2, [r3, #6]
			HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 80034ec:	4b6b      	ldr	r3, [pc, #428]	; (800369c <main+0xe28>)
 80034ee:	0018      	movs	r0, r3
 80034f0:	f7fc fe0a 	bl	8000108 <strlen>
 80034f4:	0003      	movs	r3, r0
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	23fa      	movs	r3, #250	; 0xfa
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4967      	ldr	r1, [pc, #412]	; (800369c <main+0xe28>)
 80034fe:	4868      	ldr	r0, [pc, #416]	; (80036a0 <main+0xe2c>)
 8003500:	f005 ff52 	bl	80093a8 <HAL_UART_Transmit>
		}


		while(!end_of_log_reached)
 8003504:	e0e5      	b.n	80036d2 <main+0xe5e>
		{

			HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003506:	4b67      	ldr	r3, [pc, #412]	; (80036a4 <main+0xe30>)
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	26ad      	movs	r6, #173	; 0xad
 800350c:	2208      	movs	r2, #8
 800350e:	18bb      	adds	r3, r7, r2
 8003510:	199b      	adds	r3, r3, r6
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	b299      	uxth	r1, r3
 8003516:	24ae      	movs	r4, #174	; 0xae
 8003518:	18bb      	adds	r3, r7, r2
 800351a:	191b      	adds	r3, r3, r4
 800351c:	881a      	ldrh	r2, [r3, #0]
 800351e:	2364      	movs	r3, #100	; 0x64
 8003520:	9302      	str	r3, [sp, #8]
 8003522:	2301      	movs	r3, #1
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	2543      	movs	r5, #67	; 0x43
 8003528:	2308      	movs	r3, #8
 800352a:	18fb      	adds	r3, r7, r3
 800352c:	195b      	adds	r3, r3, r5
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2302      	movs	r3, #2
 8003532:	f004 f8a9 	bl	8007688 <HAL_I2C_Mem_Read>
			message[0] = b0;
 8003536:	2208      	movs	r2, #8
 8003538:	0011      	movs	r1, r2
 800353a:	18bb      	adds	r3, r7, r2
 800353c:	195b      	adds	r3, r3, r5
 800353e:	781a      	ldrb	r2, [r3, #0]
 8003540:	4b56      	ldr	r3, [pc, #344]	; (800369c <main+0xe28>)
 8003542:	701a      	strb	r2, [r3, #0]
			eeprom_debug_address++;
 8003544:	187b      	adds	r3, r7, r1
 8003546:	191b      	adds	r3, r3, r4
 8003548:	881a      	ldrh	r2, [r3, #0]
 800354a:	187b      	adds	r3, r7, r1
 800354c:	191b      	adds	r3, r3, r4
 800354e:	3201      	adds	r2, #1
 8003550:	801a      	strh	r2, [r3, #0]
			HAL_Delay(3);
 8003552:	2003      	movs	r0, #3
 8003554:	f003 f8ce 	bl	80066f4 <HAL_Delay>

			HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003558:	4b52      	ldr	r3, [pc, #328]	; (80036a4 <main+0xe30>)
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	2108      	movs	r1, #8
 800355e:	000a      	movs	r2, r1
 8003560:	187b      	adds	r3, r7, r1
 8003562:	199b      	adds	r3, r3, r6
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	b299      	uxth	r1, r3
 8003568:	18bb      	adds	r3, r7, r2
 800356a:	191b      	adds	r3, r3, r4
 800356c:	881a      	ldrh	r2, [r3, #0]
 800356e:	2364      	movs	r3, #100	; 0x64
 8003570:	9302      	str	r3, [sp, #8]
 8003572:	2301      	movs	r3, #1
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	2308      	movs	r3, #8
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	195b      	adds	r3, r3, r5
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	2302      	movs	r3, #2
 8003580:	f004 f882 	bl	8007688 <HAL_I2C_Mem_Read>
			message[1] = b0;
 8003584:	2108      	movs	r1, #8
 8003586:	187b      	adds	r3, r7, r1
 8003588:	195b      	adds	r3, r3, r5
 800358a:	781a      	ldrb	r2, [r3, #0]
 800358c:	4b43      	ldr	r3, [pc, #268]	; (800369c <main+0xe28>)
 800358e:	705a      	strb	r2, [r3, #1]
			eeprom_debug_address++;
 8003590:	187b      	adds	r3, r7, r1
 8003592:	191b      	adds	r3, r3, r4
 8003594:	881a      	ldrh	r2, [r3, #0]
 8003596:	187b      	adds	r3, r7, r1
 8003598:	191b      	adds	r3, r3, r4
 800359a:	3201      	adds	r2, #1
 800359c:	801a      	strh	r2, [r3, #0]

			message[2] = '.';
 800359e:	4b3f      	ldr	r3, [pc, #252]	; (800369c <main+0xe28>)
 80035a0:	222e      	movs	r2, #46	; 0x2e
 80035a2:	709a      	strb	r2, [r3, #2]

			HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80035a4:	4b3f      	ldr	r3, [pc, #252]	; (80036a4 <main+0xe30>)
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	000a      	movs	r2, r1
 80035aa:	18bb      	adds	r3, r7, r2
 80035ac:	199b      	adds	r3, r3, r6
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	b299      	uxth	r1, r3
 80035b2:	18bb      	adds	r3, r7, r2
 80035b4:	191b      	adds	r3, r3, r4
 80035b6:	881a      	ldrh	r2, [r3, #0]
 80035b8:	2364      	movs	r3, #100	; 0x64
 80035ba:	9302      	str	r3, [sp, #8]
 80035bc:	2301      	movs	r3, #1
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	2308      	movs	r3, #8
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	195b      	adds	r3, r3, r5
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	2302      	movs	r3, #2
 80035ca:	f004 f85d 	bl	8007688 <HAL_I2C_Mem_Read>
			message[3] = b0;
 80035ce:	2108      	movs	r1, #8
 80035d0:	187b      	adds	r3, r7, r1
 80035d2:	195b      	adds	r3, r3, r5
 80035d4:	781a      	ldrb	r2, [r3, #0]
 80035d6:	4b31      	ldr	r3, [pc, #196]	; (800369c <main+0xe28>)
 80035d8:	70da      	strb	r2, [r3, #3]
			eeprom_debug_address++;
 80035da:	187b      	adds	r3, r7, r1
 80035dc:	191b      	adds	r3, r3, r4
 80035de:	881a      	ldrh	r2, [r3, #0]
 80035e0:	187b      	adds	r3, r7, r1
 80035e2:	191b      	adds	r3, r3, r4
 80035e4:	3201      	adds	r2, #1
 80035e6:	801a      	strh	r2, [r3, #0]

			message[4] = ' ';
 80035e8:	4b2c      	ldr	r3, [pc, #176]	; (800369c <main+0xe28>)
 80035ea:	2220      	movs	r2, #32
 80035ec:	711a      	strb	r2, [r3, #4]

			HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80035ee:	4b2d      	ldr	r3, [pc, #180]	; (80036a4 <main+0xe30>)
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	000a      	movs	r2, r1
 80035f4:	18bb      	adds	r3, r7, r2
 80035f6:	199b      	adds	r3, r3, r6
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	b299      	uxth	r1, r3
 80035fc:	18bb      	adds	r3, r7, r2
 80035fe:	191b      	adds	r3, r3, r4
 8003600:	881a      	ldrh	r2, [r3, #0]
 8003602:	2364      	movs	r3, #100	; 0x64
 8003604:	9302      	str	r3, [sp, #8]
 8003606:	2301      	movs	r3, #1
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	2308      	movs	r3, #8
 800360c:	18fb      	adds	r3, r7, r3
 800360e:	195b      	adds	r3, r3, r5
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	2302      	movs	r3, #2
 8003614:	f004 f838 	bl	8007688 <HAL_I2C_Mem_Read>
			message[5] = b0;
 8003618:	2108      	movs	r1, #8
 800361a:	187b      	adds	r3, r7, r1
 800361c:	195b      	adds	r3, r3, r5
 800361e:	781a      	ldrb	r2, [r3, #0]
 8003620:	4b1e      	ldr	r3, [pc, #120]	; (800369c <main+0xe28>)
 8003622:	715a      	strb	r2, [r3, #5]
			eeprom_debug_address++;
 8003624:	187b      	adds	r3, r7, r1
 8003626:	191b      	adds	r3, r3, r4
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	187b      	adds	r3, r7, r1
 800362c:	191b      	adds	r3, r3, r4
 800362e:	3201      	adds	r2, #1
 8003630:	801a      	strh	r2, [r3, #0]

			HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003632:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <main+0xe30>)
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	000a      	movs	r2, r1
 8003638:	18bb      	adds	r3, r7, r2
 800363a:	199b      	adds	r3, r3, r6
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	b299      	uxth	r1, r3
 8003640:	0016      	movs	r6, r2
 8003642:	18bb      	adds	r3, r7, r2
 8003644:	191b      	adds	r3, r3, r4
 8003646:	881a      	ldrh	r2, [r3, #0]
 8003648:	2364      	movs	r3, #100	; 0x64
 800364a:	9302      	str	r3, [sp, #8]
 800364c:	2301      	movs	r3, #1
 800364e:	9301      	str	r3, [sp, #4]
 8003650:	0033      	movs	r3, r6
 8003652:	001e      	movs	r6, r3
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	195b      	adds	r3, r3, r5
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2302      	movs	r3, #2
 800365c:	f004 f814 	bl	8007688 <HAL_I2C_Mem_Read>
			message[6] = b0;
 8003660:	0032      	movs	r2, r6
 8003662:	0011      	movs	r1, r2
 8003664:	18bb      	adds	r3, r7, r2
 8003666:	195b      	adds	r3, r3, r5
 8003668:	781a      	ldrb	r2, [r3, #0]
 800366a:	4b0c      	ldr	r3, [pc, #48]	; (800369c <main+0xe28>)
 800366c:	719a      	strb	r2, [r3, #6]
			eeprom_debug_address++;
 800366e:	187b      	adds	r3, r7, r1
 8003670:	191b      	adds	r3, r3, r4
 8003672:	881a      	ldrh	r2, [r3, #0]
 8003674:	187b      	adds	r3, r7, r1
 8003676:	191b      	adds	r3, r3, r4
 8003678:	3201      	adds	r2, #1
 800367a:	801a      	strh	r2, [r3, #0]

			if((message[0] == 0) && (message[1] == 0))
 800367c:	4b07      	ldr	r3, [pc, #28]	; (800369c <main+0xe28>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d111      	bne.n	80036a8 <main+0xe34>
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <main+0xe28>)
 8003686:	785b      	ldrb	r3, [r3, #1]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10d      	bne.n	80036a8 <main+0xe34>
			{
				end_of_log_reached = 1;
 800368c:	2301      	movs	r3, #1
 800368e:	22b0      	movs	r2, #176	; 0xb0
 8003690:	2108      	movs	r1, #8
 8003692:	468c      	mov	ip, r1
 8003694:	44bc      	add	ip, r7
 8003696:	4462      	add	r2, ip
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e01a      	b.n	80036d2 <main+0xe5e>
 800369c:	20000234 	.word	0x20000234
 80036a0:	2000090c 	.word	0x2000090c
 80036a4:	20000020 	.word	0x20000020
				//ssd1306_SetCursor(0,22);
				//ssd1306_WriteString(message, Font_11x18, White);
				//ssd1306_UpdateScreen();
				//HAL_Delay(700);

				message[7] = '\r';
 80036a8:	4bca      	ldr	r3, [pc, #808]	; (80039d4 <main+0x1160>)
 80036aa:	220d      	movs	r2, #13
 80036ac:	71da      	strb	r2, [r3, #7]
				message[8] = '\n';
 80036ae:	4bc9      	ldr	r3, [pc, #804]	; (80039d4 <main+0x1160>)
 80036b0:	220a      	movs	r2, #10
 80036b2:	721a      	strb	r2, [r3, #8]
				message[9] = 0;
 80036b4:	4bc7      	ldr	r3, [pc, #796]	; (80039d4 <main+0x1160>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 80036ba:	4bc6      	ldr	r3, [pc, #792]	; (80039d4 <main+0x1160>)
 80036bc:	0018      	movs	r0, r3
 80036be:	f7fc fd23 	bl	8000108 <strlen>
 80036c2:	0003      	movs	r3, r0
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	23fa      	movs	r3, #250	; 0xfa
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	49c2      	ldr	r1, [pc, #776]	; (80039d4 <main+0x1160>)
 80036cc:	48c2      	ldr	r0, [pc, #776]	; (80039d8 <main+0x1164>)
 80036ce:	f005 fe6b 	bl	80093a8 <HAL_UART_Transmit>
		while(!end_of_log_reached)
 80036d2:	23b0      	movs	r3, #176	; 0xb0
 80036d4:	2208      	movs	r2, #8
 80036d6:	4694      	mov	ip, r2
 80036d8:	44bc      	add	ip, r7
 80036da:	4463      	add	r3, ip
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d100      	bne.n	80036e4 <main+0xe70>
 80036e2:	e710      	b.n	8003506 <main+0xc92>
			}
		}

		sprintf(message, "\r\n");
 80036e4:	4bbb      	ldr	r3, [pc, #748]	; (80039d4 <main+0x1160>)
 80036e6:	4abd      	ldr	r2, [pc, #756]	; (80039dc <main+0x1168>)
 80036e8:	8811      	ldrh	r1, [r2, #0]
 80036ea:	8019      	strh	r1, [r3, #0]
 80036ec:	7892      	ldrb	r2, [r2, #2]
 80036ee:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 80036f0:	4bb8      	ldr	r3, [pc, #736]	; (80039d4 <main+0x1160>)
 80036f2:	0018      	movs	r0, r3
 80036f4:	f7fc fd08 	bl	8000108 <strlen>
 80036f8:	0003      	movs	r3, r0
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	23fa      	movs	r3, #250	; 0xfa
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	49b4      	ldr	r1, [pc, #720]	; (80039d4 <main+0x1160>)
 8003702:	48b5      	ldr	r0, [pc, #724]	; (80039d8 <main+0x1164>)
 8003704:	f005 fe50 	bl	80093a8 <HAL_UART_Transmit>
		sprintf(message, "**********\r\nlog bank 2 finish\r\n");
 8003708:	4bb2      	ldr	r3, [pc, #712]	; (80039d4 <main+0x1160>)
 800370a:	4ab5      	ldr	r2, [pc, #724]	; (80039e0 <main+0x116c>)
 800370c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800370e:	c313      	stmia	r3!, {r0, r1, r4}
 8003710:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003712:	c313      	stmia	r3!, {r0, r1, r4}
 8003714:	ca03      	ldmia	r2!, {r0, r1}
 8003716:	c303      	stmia	r3!, {r0, r1}
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8003718:	4bae      	ldr	r3, [pc, #696]	; (80039d4 <main+0x1160>)
 800371a:	0018      	movs	r0, r3
 800371c:	f7fc fcf4 	bl	8000108 <strlen>
 8003720:	0003      	movs	r3, r0
 8003722:	b29a      	uxth	r2, r3
 8003724:	23fa      	movs	r3, #250	; 0xfa
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	49aa      	ldr	r1, [pc, #680]	; (80039d4 <main+0x1160>)
 800372a:	48ab      	ldr	r0, [pc, #684]	; (80039d8 <main+0x1164>)
 800372c:	f005 fe3c 	bl	80093a8 <HAL_UART_Transmit>


		// loop menyu vybora loga
		int log_chosen = 0;
 8003730:	2300      	movs	r3, #0
 8003732:	22a4      	movs	r2, #164	; 0xa4
 8003734:	2108      	movs	r1, #8
 8003736:	468c      	mov	ip, r1
 8003738:	44bc      	add	ip, r7
 800373a:	4462      	add	r2, ip
 800373c:	6013      	str	r3, [r2, #0]
		int active_log = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	22a0      	movs	r2, #160	; 0xa0
 8003742:	2108      	movs	r1, #8
 8003744:	468c      	mov	ip, r1
 8003746:	44bc      	add	ip, r7
 8003748:	4462      	add	r2, ip
 800374a:	6013      	str	r3, [r2, #0]

		while(!log_chosen)
 800374c:	e15b      	b.n	8003a06 <main+0x1192>
		{
			if(active_log == 0)
 800374e:	23a0      	movs	r3, #160	; 0xa0
 8003750:	2208      	movs	r2, #8
 8003752:	4694      	mov	ip, r2
 8003754:	44bc      	add	ip, r7
 8003756:	4463      	add	r3, ip
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d000      	beq.n	8003760 <main+0xeec>
 800375e:	e085      	b.n	800386c <main+0xff8>
			{
				// vyvod menyu vybora odnogo iz dvuh logov
				ssd1306_SetCursor(0,0);
 8003760:	2100      	movs	r1, #0
 8003762:	2000      	movs	r0, #0
 8003764:	f002 fcc6 	bl	80060f4 <ssd1306_SetCursor>
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log1_date_txt[0], log1_date_txt[1], log1_date_txt[2], log1_date_txt[3],
 8003768:	2134      	movs	r1, #52	; 0x34
 800376a:	2008      	movs	r0, #8
 800376c:	183b      	adds	r3, r7, r0
 800376e:	185b      	adds	r3, r3, r1
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	607b      	str	r3, [r7, #4]
 8003774:	183b      	adds	r3, r7, r0
 8003776:	185b      	adds	r3, r3, r1
 8003778:	785b      	ldrb	r3, [r3, #1]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	183b      	adds	r3, r7, r0
 800377e:	185b      	adds	r3, r3, r1
 8003780:	789b      	ldrb	r3, [r3, #2]
 8003782:	001a      	movs	r2, r3
 8003784:	183b      	adds	r3, r7, r0
 8003786:	185b      	adds	r3, r3, r1
 8003788:	78db      	ldrb	r3, [r3, #3]
 800378a:	001c      	movs	r4, r3
														log1_time_txt[0], log1_time_txt[1], log1_time_txt[2], log1_time_txt[3]);
 800378c:	213c      	movs	r1, #60	; 0x3c
 800378e:	183b      	adds	r3, r7, r0
 8003790:	185b      	adds	r3, r3, r1
 8003792:	781b      	ldrb	r3, [r3, #0]
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log1_date_txt[0], log1_date_txt[1], log1_date_txt[2], log1_date_txt[3],
 8003794:	001d      	movs	r5, r3
														log1_time_txt[0], log1_time_txt[1], log1_time_txt[2], log1_time_txt[3]);
 8003796:	183b      	adds	r3, r7, r0
 8003798:	185b      	adds	r3, r3, r1
 800379a:	785b      	ldrb	r3, [r3, #1]
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log1_date_txt[0], log1_date_txt[1], log1_date_txt[2], log1_date_txt[3],
 800379c:	001e      	movs	r6, r3
														log1_time_txt[0], log1_time_txt[1], log1_time_txt[2], log1_time_txt[3]);
 800379e:	183b      	adds	r3, r7, r0
 80037a0:	185b      	adds	r3, r3, r1
 80037a2:	789b      	ldrb	r3, [r3, #2]
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log1_date_txt[0], log1_date_txt[1], log1_date_txt[2], log1_date_txt[3],
 80037a4:	469c      	mov	ip, r3
														log1_time_txt[0], log1_time_txt[1], log1_time_txt[2], log1_time_txt[3]);
 80037a6:	183b      	adds	r3, r7, r0
 80037a8:	185b      	adds	r3, r3, r1
 80037aa:	78db      	ldrb	r3, [r3, #3]
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log1_date_txt[0], log1_date_txt[1], log1_date_txt[2], log1_date_txt[3],
 80037ac:	498d      	ldr	r1, [pc, #564]	; (80039e4 <main+0x1170>)
 80037ae:	4889      	ldr	r0, [pc, #548]	; (80039d4 <main+0x1160>)
 80037b0:	9305      	str	r3, [sp, #20]
 80037b2:	4663      	mov	r3, ip
 80037b4:	9304      	str	r3, [sp, #16]
 80037b6:	9603      	str	r6, [sp, #12]
 80037b8:	9502      	str	r5, [sp, #8]
 80037ba:	9401      	str	r4, [sp, #4]
 80037bc:	9200      	str	r2, [sp, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	f006 fb27 	bl	8009e14 <siprintf>
				ssd1306_WriteString(message, Font_11x18, White);
 80037c6:	4a88      	ldr	r2, [pc, #544]	; (80039e8 <main+0x1174>)
 80037c8:	4882      	ldr	r0, [pc, #520]	; (80039d4 <main+0x1160>)
 80037ca:	2301      	movs	r3, #1
 80037cc:	6811      	ldr	r1, [r2, #0]
 80037ce:	6852      	ldr	r2, [r2, #4]
 80037d0:	f002 fc66 	bl	80060a0 <ssd1306_WriteString>
				ssd1306_SetCursor(0,44);
 80037d4:	212c      	movs	r1, #44	; 0x2c
 80037d6:	2000      	movs	r0, #0
 80037d8:	f002 fc8c 	bl	80060f4 <ssd1306_SetCursor>
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log2_date_txt[0], log2_date_txt[1], log2_date_txt[2], log2_date_txt[3],
 80037dc:	2124      	movs	r1, #36	; 0x24
 80037de:	2008      	movs	r0, #8
 80037e0:	183b      	adds	r3, r7, r0
 80037e2:	185b      	adds	r3, r3, r1
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	607b      	str	r3, [r7, #4]
 80037e8:	183b      	adds	r3, r7, r0
 80037ea:	185b      	adds	r3, r3, r1
 80037ec:	785b      	ldrb	r3, [r3, #1]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	183b      	adds	r3, r7, r0
 80037f2:	185b      	adds	r3, r3, r1
 80037f4:	789b      	ldrb	r3, [r3, #2]
 80037f6:	001a      	movs	r2, r3
 80037f8:	183b      	adds	r3, r7, r0
 80037fa:	185b      	adds	r3, r3, r1
 80037fc:	78db      	ldrb	r3, [r3, #3]
 80037fe:	001c      	movs	r4, r3
														log2_time_txt[0], log2_time_txt[1], log2_time_txt[2], log2_time_txt[3]);
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	183b      	adds	r3, r7, r0
 8003804:	185b      	adds	r3, r3, r1
 8003806:	781b      	ldrb	r3, [r3, #0]
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log2_date_txt[0], log2_date_txt[1], log2_date_txt[2], log2_date_txt[3],
 8003808:	001d      	movs	r5, r3
														log2_time_txt[0], log2_time_txt[1], log2_time_txt[2], log2_time_txt[3]);
 800380a:	183b      	adds	r3, r7, r0
 800380c:	185b      	adds	r3, r3, r1
 800380e:	785b      	ldrb	r3, [r3, #1]
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log2_date_txt[0], log2_date_txt[1], log2_date_txt[2], log2_date_txt[3],
 8003810:	001e      	movs	r6, r3
														log2_time_txt[0], log2_time_txt[1], log2_time_txt[2], log2_time_txt[3]);
 8003812:	183b      	adds	r3, r7, r0
 8003814:	185b      	adds	r3, r3, r1
 8003816:	789b      	ldrb	r3, [r3, #2]
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log2_date_txt[0], log2_date_txt[1], log2_date_txt[2], log2_date_txt[3],
 8003818:	469c      	mov	ip, r3
														log2_time_txt[0], log2_time_txt[1], log2_time_txt[2], log2_time_txt[3]);
 800381a:	183b      	adds	r3, r7, r0
 800381c:	185b      	adds	r3, r3, r1
 800381e:	78db      	ldrb	r3, [r3, #3]
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log2_date_txt[0], log2_date_txt[1], log2_date_txt[2], log2_date_txt[3],
 8003820:	4970      	ldr	r1, [pc, #448]	; (80039e4 <main+0x1170>)
 8003822:	486c      	ldr	r0, [pc, #432]	; (80039d4 <main+0x1160>)
 8003824:	9305      	str	r3, [sp, #20]
 8003826:	4663      	mov	r3, ip
 8003828:	9304      	str	r3, [sp, #16]
 800382a:	9603      	str	r6, [sp, #12]
 800382c:	9502      	str	r5, [sp, #8]
 800382e:	9401      	str	r4, [sp, #4]
 8003830:	9200      	str	r2, [sp, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	f006 faed 	bl	8009e14 <siprintf>
				ssd1306_WriteString(message, Font_11x18, White);
 800383a:	4a6b      	ldr	r2, [pc, #428]	; (80039e8 <main+0x1174>)
 800383c:	4865      	ldr	r0, [pc, #404]	; (80039d4 <main+0x1160>)
 800383e:	2301      	movs	r3, #1
 8003840:	6811      	ldr	r1, [r2, #0]
 8003842:	6852      	ldr	r2, [r2, #4]
 8003844:	f002 fc2c 	bl	80060a0 <ssd1306_WriteString>
				ssd1306_SetCursor(0,19);
 8003848:	2113      	movs	r1, #19
 800384a:	2000      	movs	r0, #0
 800384c:	f002 fc52 	bl	80060f4 <ssd1306_SetCursor>
				sprintf(message, "^^^^^^^^^^^");
 8003850:	4b60      	ldr	r3, [pc, #384]	; (80039d4 <main+0x1160>)
 8003852:	4a66      	ldr	r2, [pc, #408]	; (80039ec <main+0x1178>)
 8003854:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003856:	c313      	stmia	r3!, {r0, r1, r4}
				ssd1306_WriteString(message, Font_11x18, White);
 8003858:	4a63      	ldr	r2, [pc, #396]	; (80039e8 <main+0x1174>)
 800385a:	485e      	ldr	r0, [pc, #376]	; (80039d4 <main+0x1160>)
 800385c:	2301      	movs	r3, #1
 800385e:	6811      	ldr	r1, [r2, #0]
 8003860:	6852      	ldr	r2, [r2, #4]
 8003862:	f002 fc1d 	bl	80060a0 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8003866:	f002 fadb 	bl	8005e20 <ssd1306_UpdateScreen>
 800386a:	e084      	b.n	8003976 <main+0x1102>
			}
			else
			{
				// vyvod menyu vybora odnogo iz dvuh logov
				ssd1306_SetCursor(0,0);
 800386c:	2100      	movs	r1, #0
 800386e:	2000      	movs	r0, #0
 8003870:	f002 fc40 	bl	80060f4 <ssd1306_SetCursor>
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log2_date_txt[0], log2_date_txt[1], log2_date_txt[2], log2_date_txt[3],
 8003874:	2124      	movs	r1, #36	; 0x24
 8003876:	2008      	movs	r0, #8
 8003878:	183b      	adds	r3, r7, r0
 800387a:	185b      	adds	r3, r3, r1
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	183b      	adds	r3, r7, r0
 8003882:	185b      	adds	r3, r3, r1
 8003884:	785b      	ldrb	r3, [r3, #1]
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	183b      	adds	r3, r7, r0
 800388a:	185b      	adds	r3, r3, r1
 800388c:	789b      	ldrb	r3, [r3, #2]
 800388e:	001a      	movs	r2, r3
 8003890:	183b      	adds	r3, r7, r0
 8003892:	185b      	adds	r3, r3, r1
 8003894:	78db      	ldrb	r3, [r3, #3]
 8003896:	001c      	movs	r4, r3
														log2_time_txt[0], log2_time_txt[1], log2_time_txt[2], log2_time_txt[3]);
 8003898:	212c      	movs	r1, #44	; 0x2c
 800389a:	183b      	adds	r3, r7, r0
 800389c:	185b      	adds	r3, r3, r1
 800389e:	781b      	ldrb	r3, [r3, #0]
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log2_date_txt[0], log2_date_txt[1], log2_date_txt[2], log2_date_txt[3],
 80038a0:	001d      	movs	r5, r3
														log2_time_txt[0], log2_time_txt[1], log2_time_txt[2], log2_time_txt[3]);
 80038a2:	183b      	adds	r3, r7, r0
 80038a4:	185b      	adds	r3, r3, r1
 80038a6:	785b      	ldrb	r3, [r3, #1]
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log2_date_txt[0], log2_date_txt[1], log2_date_txt[2], log2_date_txt[3],
 80038a8:	001e      	movs	r6, r3
														log2_time_txt[0], log2_time_txt[1], log2_time_txt[2], log2_time_txt[3]);
 80038aa:	183b      	adds	r3, r7, r0
 80038ac:	185b      	adds	r3, r3, r1
 80038ae:	789b      	ldrb	r3, [r3, #2]
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log2_date_txt[0], log2_date_txt[1], log2_date_txt[2], log2_date_txt[3],
 80038b0:	469c      	mov	ip, r3
														log2_time_txt[0], log2_time_txt[1], log2_time_txt[2], log2_time_txt[3]);
 80038b2:	183b      	adds	r3, r7, r0
 80038b4:	185b      	adds	r3, r3, r1
 80038b6:	78db      	ldrb	r3, [r3, #3]
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log2_date_txt[0], log2_date_txt[1], log2_date_txt[2], log2_date_txt[3],
 80038b8:	494a      	ldr	r1, [pc, #296]	; (80039e4 <main+0x1170>)
 80038ba:	4846      	ldr	r0, [pc, #280]	; (80039d4 <main+0x1160>)
 80038bc:	9305      	str	r3, [sp, #20]
 80038be:	4663      	mov	r3, ip
 80038c0:	9304      	str	r3, [sp, #16]
 80038c2:	9603      	str	r6, [sp, #12]
 80038c4:	9502      	str	r5, [sp, #8]
 80038c6:	9401      	str	r4, [sp, #4]
 80038c8:	9200      	str	r2, [sp, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	f006 faa1 	bl	8009e14 <siprintf>

				ssd1306_WriteString(message, Font_11x18, White);
 80038d2:	4a45      	ldr	r2, [pc, #276]	; (80039e8 <main+0x1174>)
 80038d4:	483f      	ldr	r0, [pc, #252]	; (80039d4 <main+0x1160>)
 80038d6:	2301      	movs	r3, #1
 80038d8:	6811      	ldr	r1, [r2, #0]
 80038da:	6852      	ldr	r2, [r2, #4]
 80038dc:	f002 fbe0 	bl	80060a0 <ssd1306_WriteString>
				ssd1306_SetCursor(0,44);
 80038e0:	212c      	movs	r1, #44	; 0x2c
 80038e2:	2000      	movs	r0, #0
 80038e4:	f002 fc06 	bl	80060f4 <ssd1306_SetCursor>
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log1_date_txt[0], log1_date_txt[1], log1_date_txt[2], log1_date_txt[3],
 80038e8:	2134      	movs	r1, #52	; 0x34
 80038ea:	2008      	movs	r0, #8
 80038ec:	183b      	adds	r3, r7, r0
 80038ee:	185b      	adds	r3, r3, r1
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	607b      	str	r3, [r7, #4]
 80038f4:	183b      	adds	r3, r7, r0
 80038f6:	185b      	adds	r3, r3, r1
 80038f8:	785b      	ldrb	r3, [r3, #1]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	183b      	adds	r3, r7, r0
 80038fe:	185b      	adds	r3, r3, r1
 8003900:	789b      	ldrb	r3, [r3, #2]
 8003902:	001a      	movs	r2, r3
 8003904:	183b      	adds	r3, r7, r0
 8003906:	185b      	adds	r3, r3, r1
 8003908:	78db      	ldrb	r3, [r3, #3]
 800390a:	001c      	movs	r4, r3
														log1_time_txt[0], log1_time_txt[1], log1_time_txt[2], log1_time_txt[3]);
 800390c:	213c      	movs	r1, #60	; 0x3c
 800390e:	183b      	adds	r3, r7, r0
 8003910:	185b      	adds	r3, r3, r1
 8003912:	781b      	ldrb	r3, [r3, #0]
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log1_date_txt[0], log1_date_txt[1], log1_date_txt[2], log1_date_txt[3],
 8003914:	001d      	movs	r5, r3
														log1_time_txt[0], log1_time_txt[1], log1_time_txt[2], log1_time_txt[3]);
 8003916:	183b      	adds	r3, r7, r0
 8003918:	185b      	adds	r3, r3, r1
 800391a:	785b      	ldrb	r3, [r3, #1]
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log1_date_txt[0], log1_date_txt[1], log1_date_txt[2], log1_date_txt[3],
 800391c:	001e      	movs	r6, r3
														log1_time_txt[0], log1_time_txt[1], log1_time_txt[2], log1_time_txt[3]);
 800391e:	183b      	adds	r3, r7, r0
 8003920:	185b      	adds	r3, r3, r1
 8003922:	789b      	ldrb	r3, [r3, #2]
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log1_date_txt[0], log1_date_txt[1], log1_date_txt[2], log1_date_txt[3],
 8003924:	469c      	mov	ip, r3
														log1_time_txt[0], log1_time_txt[1], log1_time_txt[2], log1_time_txt[3]);
 8003926:	183b      	adds	r3, r7, r0
 8003928:	185b      	adds	r3, r3, r1
 800392a:	78db      	ldrb	r3, [r3, #3]
				sprintf(message, "%c%c.%c%c %c%c:%c%c", log1_date_txt[0], log1_date_txt[1], log1_date_txt[2], log1_date_txt[3],
 800392c:	492d      	ldr	r1, [pc, #180]	; (80039e4 <main+0x1170>)
 800392e:	4829      	ldr	r0, [pc, #164]	; (80039d4 <main+0x1160>)
 8003930:	9305      	str	r3, [sp, #20]
 8003932:	4663      	mov	r3, ip
 8003934:	9304      	str	r3, [sp, #16]
 8003936:	9603      	str	r6, [sp, #12]
 8003938:	9502      	str	r5, [sp, #8]
 800393a:	9401      	str	r4, [sp, #4]
 800393c:	9200      	str	r2, [sp, #0]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	f006 fa67 	bl	8009e14 <siprintf>
				ssd1306_WriteString(message, Font_11x18, White);
 8003946:	4a28      	ldr	r2, [pc, #160]	; (80039e8 <main+0x1174>)
 8003948:	4822      	ldr	r0, [pc, #136]	; (80039d4 <main+0x1160>)
 800394a:	2301      	movs	r3, #1
 800394c:	6811      	ldr	r1, [r2, #0]
 800394e:	6852      	ldr	r2, [r2, #4]
 8003950:	f002 fba6 	bl	80060a0 <ssd1306_WriteString>
				ssd1306_SetCursor(0,19);
 8003954:	2113      	movs	r1, #19
 8003956:	2000      	movs	r0, #0
 8003958:	f002 fbcc 	bl	80060f4 <ssd1306_SetCursor>
				sprintf(message, "^^^^^^^^^^^");
 800395c:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <main+0x1160>)
 800395e:	4a23      	ldr	r2, [pc, #140]	; (80039ec <main+0x1178>)
 8003960:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003962:	c313      	stmia	r3!, {r0, r1, r4}
				ssd1306_WriteString(message, Font_11x18, White);
 8003964:	4a20      	ldr	r2, [pc, #128]	; (80039e8 <main+0x1174>)
 8003966:	481b      	ldr	r0, [pc, #108]	; (80039d4 <main+0x1160>)
 8003968:	2301      	movs	r3, #1
 800396a:	6811      	ldr	r1, [r2, #0]
 800396c:	6852      	ldr	r2, [r2, #4]
 800396e:	f002 fb97 	bl	80060a0 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8003972:	f002 fa55 	bl	8005e20 <ssd1306_UpdateScreen>
			}

			if(!depth_switch_check_gpio())
 8003976:	f7fe fcdf 	bl	8002338 <depth_switch_check_gpio>
 800397a:	1e03      	subs	r3, r0, #0
 800397c:	d143      	bne.n	8003a06 <main+0x1192>
			{
				int start_counter = one_second_timer_get_counter();
 800397e:	f001 fcb5 	bl	80052ec <one_second_timer_get_counter>
 8003982:	0003      	movs	r3, r0
 8003984:	64fb      	str	r3, [r7, #76]	; 0x4c
				HAL_Delay(1100);
 8003986:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <main+0x117c>)
 8003988:	0018      	movs	r0, r3
 800398a:	f002 feb3 	bl	80066f4 <HAL_Delay>
				while(!depth_switch_check_gpio());
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	f7fe fcd2 	bl	8002338 <depth_switch_check_gpio>
 8003994:	1e03      	subs	r3, r0, #0
 8003996:	d0fb      	beq.n	8003990 <main+0x111c>
				if((one_second_timer_get_counter() - start_counter) <= 2)
 8003998:	f001 fca8 	bl	80052ec <one_second_timer_get_counter>
 800399c:	0002      	movs	r2, r0
 800399e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d828      	bhi.n	80039f8 <main+0x1184>
					active_log = (active_log + 1)%2;
 80039a6:	23a0      	movs	r3, #160	; 0xa0
 80039a8:	2208      	movs	r2, #8
 80039aa:	4694      	mov	ip, r2
 80039ac:	44bc      	add	ip, r7
 80039ae:	4463      	add	r3, ip
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3301      	adds	r3, #1
 80039b4:	4a0f      	ldr	r2, [pc, #60]	; (80039f4 <main+0x1180>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	d504      	bpl.n	80039c4 <main+0x1150>
 80039ba:	3b01      	subs	r3, #1
 80039bc:	2202      	movs	r2, #2
 80039be:	4252      	negs	r2, r2
 80039c0:	4313      	orrs	r3, r2
 80039c2:	3301      	adds	r3, #1
 80039c4:	22a0      	movs	r2, #160	; 0xa0
 80039c6:	2108      	movs	r1, #8
 80039c8:	468c      	mov	ip, r1
 80039ca:	44bc      	add	ip, r7
 80039cc:	4462      	add	r2, ip
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	e019      	b.n	8003a06 <main+0x1192>
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	20000234 	.word	0x20000234
 80039d8:	2000090c 	.word	0x2000090c
 80039dc:	0800b0fc 	.word	0x0800b0fc
 80039e0:	0800b160 	.word	0x0800b160
 80039e4:	0800b180 	.word	0x0800b180
 80039e8:	20000010 	.word	0x20000010
 80039ec:	0800b194 	.word	0x0800b194
 80039f0:	0000044c 	.word	0x0000044c
 80039f4:	80000001 	.word	0x80000001
				else
					log_chosen = 1;
 80039f8:	2301      	movs	r3, #1
 80039fa:	22a4      	movs	r2, #164	; 0xa4
 80039fc:	2108      	movs	r1, #8
 80039fe:	468c      	mov	ip, r1
 8003a00:	44bc      	add	ip, r7
 8003a02:	4462      	add	r2, ip
 8003a04:	6013      	str	r3, [r2, #0]
		while(!log_chosen)
 8003a06:	23a4      	movs	r3, #164	; 0xa4
 8003a08:	2208      	movs	r2, #8
 8003a0a:	4694      	mov	ip, r2
 8003a0c:	44bc      	add	ip, r7
 8003a0e:	4463      	add	r3, ip
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d100      	bne.n	8003a18 <main+0x11a4>
 8003a16:	e69a      	b.n	800374e <main+0xeda>


		//ssd1306_Fill(Black);
		//ssd1306_UpdateScreen();

		ssd1306_SetCursor(0,19);
 8003a18:	2113      	movs	r1, #19
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	f002 fb6a 	bl	80060f4 <ssd1306_SetCursor>
		sprintf(message, "           ");
 8003a20:	4b9d      	ldr	r3, [pc, #628]	; (8003c98 <main+0x1424>)
 8003a22:	4a9e      	ldr	r2, [pc, #632]	; (8003c9c <main+0x1428>)
 8003a24:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003a26:	c313      	stmia	r3!, {r0, r1, r4}
		ssd1306_WriteString(message, Font_11x18, White);
 8003a28:	4a9d      	ldr	r2, [pc, #628]	; (8003ca0 <main+0x142c>)
 8003a2a:	489b      	ldr	r0, [pc, #620]	; (8003c98 <main+0x1424>)
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	6811      	ldr	r1, [r2, #0]
 8003a30:	6852      	ldr	r2, [r2, #4]
 8003a32:	f002 fb35 	bl	80060a0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8003a36:	f002 f9f3 	bl	8005e20 <ssd1306_UpdateScreen>


		ssd1306_SetCursor(0,26);
 8003a3a:	211a      	movs	r1, #26
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	f002 fb59 	bl	80060f4 <ssd1306_SetCursor>
		sprintf(message, "ok nazhmite");
 8003a42:	4b95      	ldr	r3, [pc, #596]	; (8003c98 <main+0x1424>)
 8003a44:	4a97      	ldr	r2, [pc, #604]	; (8003ca4 <main+0x1430>)
 8003a46:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003a48:	c313      	stmia	r3!, {r0, r1, r4}
		ssd1306_WriteString(message, Font_11x18, White);
 8003a4a:	4a95      	ldr	r2, [pc, #596]	; (8003ca0 <main+0x142c>)
 8003a4c:	4892      	ldr	r0, [pc, #584]	; (8003c98 <main+0x1424>)
 8003a4e:	2301      	movs	r3, #1
 8003a50:	6811      	ldr	r1, [r2, #0]
 8003a52:	6852      	ldr	r2, [r2, #4]
 8003a54:	f002 fb24 	bl	80060a0 <ssd1306_WriteString>
		ssd1306_SetCursor(0,44);
 8003a58:	212c      	movs	r1, #44	; 0x2c
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f002 fb4a 	bl	80060f4 <ssd1306_SetCursor>
		sprintf(message, "           ");
 8003a60:	4b8d      	ldr	r3, [pc, #564]	; (8003c98 <main+0x1424>)
 8003a62:	4a8e      	ldr	r2, [pc, #568]	; (8003c9c <main+0x1428>)
 8003a64:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003a66:	c313      	stmia	r3!, {r0, r1, r4}
		ssd1306_WriteString(message, Font_11x18, White);
 8003a68:	4a8d      	ldr	r2, [pc, #564]	; (8003ca0 <main+0x142c>)
 8003a6a:	488b      	ldr	r0, [pc, #556]	; (8003c98 <main+0x1424>)
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	6811      	ldr	r1, [r2, #0]
 8003a70:	6852      	ldr	r2, [r2, #4]
 8003a72:	f002 fb15 	bl	80060a0 <ssd1306_WriteString>
		ssd1306_SetCursor(0,44);
 8003a76:	212c      	movs	r1, #44	; 0x2c
 8003a78:	2000      	movs	r0, #0
 8003a7a:	f002 fb3b 	bl	80060f4 <ssd1306_SetCursor>
		sprintf(message, "knopku     ");
 8003a7e:	4b86      	ldr	r3, [pc, #536]	; (8003c98 <main+0x1424>)
 8003a80:	4a89      	ldr	r2, [pc, #548]	; (8003ca8 <main+0x1434>)
 8003a82:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003a84:	c313      	stmia	r3!, {r0, r1, r4}
		ssd1306_WriteString(message, Font_11x18, White);
 8003a86:	4a86      	ldr	r2, [pc, #536]	; (8003ca0 <main+0x142c>)
 8003a88:	4883      	ldr	r0, [pc, #524]	; (8003c98 <main+0x1424>)
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	6811      	ldr	r1, [r2, #0]
 8003a8e:	6852      	ldr	r2, [r2, #4]
 8003a90:	f002 fb06 	bl	80060a0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8003a94:	f002 f9c4 	bl	8005e20 <ssd1306_UpdateScreen>

		while(depth_switch_check_gpio());
 8003a98:	46c0      	nop			; (mov r8, r8)
 8003a9a:	f7fe fc4d 	bl	8002338 <depth_switch_check_gpio>
 8003a9e:	1e03      	subs	r3, r0, #0
 8003aa0:	d1fb      	bne.n	8003a9a <main+0x1226>
		HAL_Delay(330);
 8003aa2:	23a5      	movs	r3, #165	; 0xa5
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f002 fe24 	bl	80066f4 <HAL_Delay>
		while(!depth_switch_check_gpio());
 8003aac:	46c0      	nop			; (mov r8, r8)
 8003aae:	f7fe fc43 	bl	8002338 <depth_switch_check_gpio>
 8003ab2:	1e03      	subs	r3, r0, #0
 8003ab4:	d0fb      	beq.n	8003aae <main+0x123a>

		eeprom_debug_address = 64 + 8;
 8003ab6:	23ae      	movs	r3, #174	; 0xae
 8003ab8:	2208      	movs	r2, #8
 8003aba:	4694      	mov	ip, r2
 8003abc:	44bc      	add	ip, r7
 8003abe:	4463      	add	r3, ip
 8003ac0:	2248      	movs	r2, #72	; 0x48
 8003ac2:	801a      	strh	r2, [r3, #0]
		if(active_log == 0)
 8003ac4:	23a0      	movs	r3, #160	; 0xa0
 8003ac6:	2208      	movs	r2, #8
 8003ac8:	4694      	mov	ip, r2
 8003aca:	44bc      	add	ip, r7
 8003acc:	4463      	add	r3, ip
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d107      	bne.n	8003ae4 <main+0x1270>
			at24c32_shifted_address = 0x50 << 1;
 8003ad4:	23ad      	movs	r3, #173	; 0xad
 8003ad6:	2208      	movs	r2, #8
 8003ad8:	4694      	mov	ip, r2
 8003ada:	44bc      	add	ip, r7
 8003adc:	4463      	add	r3, ip
 8003ade:	22a0      	movs	r2, #160	; 0xa0
 8003ae0:	701a      	strb	r2, [r3, #0]
 8003ae2:	e006      	b.n	8003af2 <main+0x127e>
		else
			at24c32_shifted_address = 0x51 << 1;
 8003ae4:	23ad      	movs	r3, #173	; 0xad
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	4694      	mov	ip, r2
 8003aea:	44bc      	add	ip, r7
 8003aec:	4463      	add	r3, ip
 8003aee:	22a2      	movs	r2, #162	; 0xa2
 8003af0:	701a      	strb	r2, [r3, #0]
		end_of_log_reached = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	22b0      	movs	r2, #176	; 0xb0
 8003af6:	2108      	movs	r1, #8
 8003af8:	468c      	mov	ip, r1
 8003afa:	44bc      	add	ip, r7
 8003afc:	4462      	add	r2, ip
 8003afe:	6013      	str	r3, [r2, #0]

		while(!end_of_log_reached)
 8003b00:	e1a2      	b.n	8003e48 <main+0x15d4>
		{

			HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003b02:	4b6a      	ldr	r3, [pc, #424]	; (8003cac <main+0x1438>)
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	26ad      	movs	r6, #173	; 0xad
 8003b08:	2208      	movs	r2, #8
 8003b0a:	18bb      	adds	r3, r7, r2
 8003b0c:	199b      	adds	r3, r3, r6
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	b299      	uxth	r1, r3
 8003b12:	24ae      	movs	r4, #174	; 0xae
 8003b14:	18bb      	adds	r3, r7, r2
 8003b16:	191b      	adds	r3, r3, r4
 8003b18:	881a      	ldrh	r2, [r3, #0]
 8003b1a:	2364      	movs	r3, #100	; 0x64
 8003b1c:	9302      	str	r3, [sp, #8]
 8003b1e:	2301      	movs	r3, #1
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	2543      	movs	r5, #67	; 0x43
 8003b24:	2308      	movs	r3, #8
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	195b      	adds	r3, r3, r5
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	f003 fdab 	bl	8007688 <HAL_I2C_Mem_Read>
			message[0] = b0;
 8003b32:	2208      	movs	r2, #8
 8003b34:	0011      	movs	r1, r2
 8003b36:	18bb      	adds	r3, r7, r2
 8003b38:	195b      	adds	r3, r3, r5
 8003b3a:	781a      	ldrb	r2, [r3, #0]
 8003b3c:	4b56      	ldr	r3, [pc, #344]	; (8003c98 <main+0x1424>)
 8003b3e:	701a      	strb	r2, [r3, #0]
			eeprom_debug_address++;
 8003b40:	187b      	adds	r3, r7, r1
 8003b42:	191b      	adds	r3, r3, r4
 8003b44:	881a      	ldrh	r2, [r3, #0]
 8003b46:	187b      	adds	r3, r7, r1
 8003b48:	191b      	adds	r3, r3, r4
 8003b4a:	3201      	adds	r2, #1
 8003b4c:	801a      	strh	r2, [r3, #0]
			HAL_Delay(3);
 8003b4e:	2003      	movs	r0, #3
 8003b50:	f002 fdd0 	bl	80066f4 <HAL_Delay>

			HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003b54:	4b55      	ldr	r3, [pc, #340]	; (8003cac <main+0x1438>)
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	2108      	movs	r1, #8
 8003b5a:	000a      	movs	r2, r1
 8003b5c:	187b      	adds	r3, r7, r1
 8003b5e:	199b      	adds	r3, r3, r6
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	b299      	uxth	r1, r3
 8003b64:	18bb      	adds	r3, r7, r2
 8003b66:	191b      	adds	r3, r3, r4
 8003b68:	881a      	ldrh	r2, [r3, #0]
 8003b6a:	2364      	movs	r3, #100	; 0x64
 8003b6c:	9302      	str	r3, [sp, #8]
 8003b6e:	2301      	movs	r3, #1
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	2308      	movs	r3, #8
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	195b      	adds	r3, r3, r5
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	f003 fd84 	bl	8007688 <HAL_I2C_Mem_Read>
			message[1] = b0;
 8003b80:	2108      	movs	r1, #8
 8003b82:	187b      	adds	r3, r7, r1
 8003b84:	195b      	adds	r3, r3, r5
 8003b86:	781a      	ldrb	r2, [r3, #0]
 8003b88:	4b43      	ldr	r3, [pc, #268]	; (8003c98 <main+0x1424>)
 8003b8a:	705a      	strb	r2, [r3, #1]
			eeprom_debug_address++;
 8003b8c:	187b      	adds	r3, r7, r1
 8003b8e:	191b      	adds	r3, r3, r4
 8003b90:	881a      	ldrh	r2, [r3, #0]
 8003b92:	187b      	adds	r3, r7, r1
 8003b94:	191b      	adds	r3, r3, r4
 8003b96:	3201      	adds	r2, #1
 8003b98:	801a      	strh	r2, [r3, #0]

			message[2] = '.';
 8003b9a:	4b3f      	ldr	r3, [pc, #252]	; (8003c98 <main+0x1424>)
 8003b9c:	222e      	movs	r2, #46	; 0x2e
 8003b9e:	709a      	strb	r2, [r3, #2]

			HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003ba0:	4b42      	ldr	r3, [pc, #264]	; (8003cac <main+0x1438>)
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	000a      	movs	r2, r1
 8003ba6:	18bb      	adds	r3, r7, r2
 8003ba8:	199b      	adds	r3, r3, r6
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	b299      	uxth	r1, r3
 8003bae:	18bb      	adds	r3, r7, r2
 8003bb0:	191b      	adds	r3, r3, r4
 8003bb2:	881a      	ldrh	r2, [r3, #0]
 8003bb4:	2364      	movs	r3, #100	; 0x64
 8003bb6:	9302      	str	r3, [sp, #8]
 8003bb8:	2301      	movs	r3, #1
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	2308      	movs	r3, #8
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	195b      	adds	r3, r3, r5
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	f003 fd5f 	bl	8007688 <HAL_I2C_Mem_Read>
			message[3] = b0;
 8003bca:	2108      	movs	r1, #8
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	195b      	adds	r3, r3, r5
 8003bd0:	781a      	ldrb	r2, [r3, #0]
 8003bd2:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <main+0x1424>)
 8003bd4:	70da      	strb	r2, [r3, #3]
			eeprom_debug_address++;
 8003bd6:	187b      	adds	r3, r7, r1
 8003bd8:	191b      	adds	r3, r3, r4
 8003bda:	881a      	ldrh	r2, [r3, #0]
 8003bdc:	187b      	adds	r3, r7, r1
 8003bde:	191b      	adds	r3, r3, r4
 8003be0:	3201      	adds	r2, #1
 8003be2:	801a      	strh	r2, [r3, #0]

			message[4] = ' ';
 8003be4:	4b2c      	ldr	r3, [pc, #176]	; (8003c98 <main+0x1424>)
 8003be6:	2220      	movs	r2, #32
 8003be8:	711a      	strb	r2, [r3, #4]

			HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003bea:	4b30      	ldr	r3, [pc, #192]	; (8003cac <main+0x1438>)
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	000a      	movs	r2, r1
 8003bf0:	18bb      	adds	r3, r7, r2
 8003bf2:	199b      	adds	r3, r3, r6
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b299      	uxth	r1, r3
 8003bf8:	18bb      	adds	r3, r7, r2
 8003bfa:	191b      	adds	r3, r3, r4
 8003bfc:	881a      	ldrh	r2, [r3, #0]
 8003bfe:	2364      	movs	r3, #100	; 0x64
 8003c00:	9302      	str	r3, [sp, #8]
 8003c02:	2301      	movs	r3, #1
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	2308      	movs	r3, #8
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	195b      	adds	r3, r3, r5
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2302      	movs	r3, #2
 8003c10:	f003 fd3a 	bl	8007688 <HAL_I2C_Mem_Read>
			message[5] = b0;
 8003c14:	2108      	movs	r1, #8
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	195b      	adds	r3, r3, r5
 8003c1a:	781a      	ldrb	r2, [r3, #0]
 8003c1c:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <main+0x1424>)
 8003c1e:	715a      	strb	r2, [r3, #5]
			eeprom_debug_address++;
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	191b      	adds	r3, r3, r4
 8003c24:	881a      	ldrh	r2, [r3, #0]
 8003c26:	187b      	adds	r3, r7, r1
 8003c28:	191b      	adds	r3, r3, r4
 8003c2a:	3201      	adds	r2, #1
 8003c2c:	801a      	strh	r2, [r3, #0]

			HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003c2e:	4b1f      	ldr	r3, [pc, #124]	; (8003cac <main+0x1438>)
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	000a      	movs	r2, r1
 8003c34:	18bb      	adds	r3, r7, r2
 8003c36:	199b      	adds	r3, r3, r6
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	b299      	uxth	r1, r3
 8003c3c:	0016      	movs	r6, r2
 8003c3e:	18bb      	adds	r3, r7, r2
 8003c40:	191b      	adds	r3, r3, r4
 8003c42:	881a      	ldrh	r2, [r3, #0]
 8003c44:	2364      	movs	r3, #100	; 0x64
 8003c46:	9302      	str	r3, [sp, #8]
 8003c48:	2301      	movs	r3, #1
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	0033      	movs	r3, r6
 8003c4e:	001e      	movs	r6, r3
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	195b      	adds	r3, r3, r5
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2302      	movs	r3, #2
 8003c58:	f003 fd16 	bl	8007688 <HAL_I2C_Mem_Read>
			message[6] = b0;
 8003c5c:	0032      	movs	r2, r6
 8003c5e:	0011      	movs	r1, r2
 8003c60:	18bb      	adds	r3, r7, r2
 8003c62:	195b      	adds	r3, r3, r5
 8003c64:	781a      	ldrb	r2, [r3, #0]
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <main+0x1424>)
 8003c68:	719a      	strb	r2, [r3, #6]
			eeprom_debug_address++;
 8003c6a:	187b      	adds	r3, r7, r1
 8003c6c:	191b      	adds	r3, r3, r4
 8003c6e:	881a      	ldrh	r2, [r3, #0]
 8003c70:	187b      	adds	r3, r7, r1
 8003c72:	191b      	adds	r3, r3, r4
 8003c74:	3201      	adds	r2, #1
 8003c76:	801a      	strh	r2, [r3, #0]

			if((message[0] == 0) && (message[1] == 0))
 8003c78:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <main+0x1424>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d117      	bne.n	8003cb0 <main+0x143c>
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <main+0x1424>)
 8003c82:	785b      	ldrb	r3, [r3, #1]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d113      	bne.n	8003cb0 <main+0x143c>
			{
				end_of_log_reached = 1;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	22b0      	movs	r2, #176	; 0xb0
 8003c8c:	2108      	movs	r1, #8
 8003c8e:	468c      	mov	ip, r1
 8003c90:	44bc      	add	ip, r7
 8003c92:	4462      	add	r2, ip
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e0d7      	b.n	8003e48 <main+0x15d4>
 8003c98:	20000234 	.word	0x20000234
 8003c9c:	0800b1a0 	.word	0x0800b1a0
 8003ca0:	20000010 	.word	0x20000010
 8003ca4:	0800b1ac 	.word	0x0800b1ac
 8003ca8:	0800b0cc 	.word	0x0800b0cc
 8003cac:	20000020 	.word	0x20000020
				//**************************************************************************
				//*
				char aux_message[16];
				int depth_int, depth_fract, temp;
				// prochitat' glubinu i temperaturu
				sscanf(message, "%02d.%01d%02d", &depth_int, &depth_fract, &temp);
 8003cb0:	230c      	movs	r3, #12
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	18b9      	adds	r1, r7, r2
 8003cb6:	18cc      	adds	r4, r1, r3
 8003cb8:	2310      	movs	r3, #16
 8003cba:	18ba      	adds	r2, r7, r2
 8003cbc:	18d2      	adds	r2, r2, r3
 8003cbe:	4992      	ldr	r1, [pc, #584]	; (8003f08 <main+0x1694>)
 8003cc0:	4892      	ldr	r0, [pc, #584]	; (8003f0c <main+0x1698>)
 8003cc2:	2308      	movs	r3, #8
 8003cc4:	2508      	movs	r5, #8
 8003cc6:	46ac      	mov	ip, r5
 8003cc8:	44bc      	add	ip, r7
 8003cca:	4463      	add	r3, ip
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	0023      	movs	r3, r4
 8003cd0:	f006 f8c0 	bl	8009e54 <siscanf>
				double dive_depth = depth_int + (double)(((double)depth_fract)/10.0);
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f7fe f9e8 	bl	80020ac <__aeabi_i2d>
 8003cdc:	0004      	movs	r4, r0
 8003cde:	000d      	movs	r5, r1
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f7fe f9e2 	bl	80020ac <__aeabi_i2d>
 8003ce8:	2200      	movs	r2, #0
 8003cea:	4b89      	ldr	r3, [pc, #548]	; (8003f10 <main+0x169c>)
 8003cec:	f7fc ffe4 	bl	8000cb8 <__aeabi_ddiv>
 8003cf0:	0002      	movs	r2, r0
 8003cf2:	000b      	movs	r3, r1
 8003cf4:	0020      	movs	r0, r4
 8003cf6:	0029      	movs	r1, r5
 8003cf8:	f7fc fcc2 	bl	8000680 <__aeabi_dadd>
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	000c      	movs	r4, r1
 8003d00:	653b      	str	r3, [r7, #80]	; 0x50
 8003d02:	657c      	str	r4, [r7, #84]	; 0x54
				if(max_depth < dive_depth)
 8003d04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d08:	21b8      	movs	r1, #184	; 0xb8
 8003d0a:	2008      	movs	r0, #8
 8003d0c:	4684      	mov	ip, r0
 8003d0e:	44bc      	add	ip, r7
 8003d10:	4461      	add	r1, ip
 8003d12:	6808      	ldr	r0, [r1, #0]
 8003d14:	6849      	ldr	r1, [r1, #4]
 8003d16:	f7fc fb8b 	bl	8000430 <__aeabi_dcmplt>
 8003d1a:	1e03      	subs	r3, r0, #0
 8003d1c:	d00f      	beq.n	8003d3e <main+0x14ca>
				{
					max_depth = dive_depth;
 8003d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d20:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8003d22:	22b8      	movs	r2, #184	; 0xb8
 8003d24:	2108      	movs	r1, #8
 8003d26:	468c      	mov	ip, r1
 8003d28:	44bc      	add	ip, r7
 8003d2a:	4462      	add	r2, ip
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	6054      	str	r4, [r2, #4]
					max_depth_temperature = temp;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	22b4      	movs	r2, #180	; 0xb4
 8003d34:	2108      	movs	r1, #8
 8003d36:	468c      	mov	ip, r1
 8003d38:	44bc      	add	ip, r7
 8003d3a:	4462      	add	r2, ip
 8003d3c:	6013      	str	r3, [r2, #0]
				}
				ssd1306_SetCursor(0,0);
 8003d3e:	2100      	movs	r1, #0
 8003d40:	2000      	movs	r0, #0
 8003d42:	f002 f9d7 	bl	80060f4 <ssd1306_SetCursor>
				sprintf(aux_message, "gl %02d.%01d m  ", depth_int, depth_fract);
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	4972      	ldr	r1, [pc, #456]	; (8003f14 <main+0x16a0>)
 8003d4c:	2514      	movs	r5, #20
 8003d4e:	2408      	movs	r4, #8
 8003d50:	1938      	adds	r0, r7, r4
 8003d52:	1940      	adds	r0, r0, r5
 8003d54:	f006 f85e 	bl	8009e14 <siprintf>
				ssd1306_WriteString(aux_message, Font_11x18, White);
 8003d58:	4a6f      	ldr	r2, [pc, #444]	; (8003f18 <main+0x16a4>)
 8003d5a:	193b      	adds	r3, r7, r4
 8003d5c:	1958      	adds	r0, r3, r5
 8003d5e:	2301      	movs	r3, #1
 8003d60:	6811      	ldr	r1, [r2, #0]
 8003d62:	6852      	ldr	r2, [r2, #4]
 8003d64:	f002 f99c 	bl	80060a0 <ssd1306_WriteString>
				ssd1306_SetCursor(0,22);
 8003d68:	2116      	movs	r1, #22
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f002 f9c2 	bl	80060f4 <ssd1306_SetCursor>
				dive_minutes = seconds_counter/60;
 8003d70:	26a8      	movs	r6, #168	; 0xa8
 8003d72:	193b      	adds	r3, r7, r4
 8003d74:	199b      	adds	r3, r3, r6
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	213c      	movs	r1, #60	; 0x3c
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7fc fa56 	bl	800022c <__divsi3>
 8003d80:	0003      	movs	r3, r0
 8003d82:	65fb      	str	r3, [r7, #92]	; 0x5c
				dive_seconds = seconds_counter % 60;
 8003d84:	193a      	adds	r2, r7, r4
 8003d86:	1993      	adds	r3, r2, r6
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	213c      	movs	r1, #60	; 0x3c
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f7fc fb33 	bl	80003f8 <__aeabi_idivmod>
 8003d92:	000b      	movs	r3, r1
 8003d94:	65bb      	str	r3, [r7, #88]	; 0x58
				dive_hours = dive_minutes/60;
 8003d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d98:	213c      	movs	r1, #60	; 0x3c
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f7fc fa46 	bl	800022c <__divsi3>
 8003da0:	0003      	movs	r3, r0
 8003da2:	663b      	str	r3, [r7, #96]	; 0x60
				dive_minutes = dive_minutes % 60;
 8003da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da6:	213c      	movs	r1, #60	; 0x3c
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7fc fb25 	bl	80003f8 <__aeabi_idivmod>
 8003dae:	000b      	movs	r3, r1
 8003db0:	65fb      	str	r3, [r7, #92]	; 0x5c
				sprintf(aux_message, "%02dh %02d'%02d''", dive_hours, dive_minutes, dive_seconds);
 8003db2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003db4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003db6:	4959      	ldr	r1, [pc, #356]	; (8003f1c <main+0x16a8>)
 8003db8:	2308      	movs	r3, #8
 8003dba:	18f8      	adds	r0, r7, r3
 8003dbc:	1940      	adds	r0, r0, r5
 8003dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	0023      	movs	r3, r4
 8003dc4:	f006 f826 	bl	8009e14 <siprintf>
				ssd1306_WriteString(aux_message, Font_11x18, White);
 8003dc8:	4a53      	ldr	r2, [pc, #332]	; (8003f18 <main+0x16a4>)
 8003dca:	2408      	movs	r4, #8
 8003dcc:	193b      	adds	r3, r7, r4
 8003dce:	1958      	adds	r0, r3, r5
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	6811      	ldr	r1, [r2, #0]
 8003dd4:	6852      	ldr	r2, [r2, #4]
 8003dd6:	f002 f963 	bl	80060a0 <ssd1306_WriteString>
				ssd1306_SetCursor(0,44);
 8003dda:	212c      	movs	r1, #44	; 0x2c
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f002 f989 	bl	80060f4 <ssd1306_SetCursor>
				sprintf(aux_message, "T %+02d C    ", temp);
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	494e      	ldr	r1, [pc, #312]	; (8003f20 <main+0x16ac>)
 8003de6:	193b      	adds	r3, r7, r4
 8003de8:	195b      	adds	r3, r3, r5
 8003dea:	0018      	movs	r0, r3
 8003dec:	f006 f812 	bl	8009e14 <siprintf>
				ssd1306_WriteString(aux_message, Font_11x18, White);
 8003df0:	4a49      	ldr	r2, [pc, #292]	; (8003f18 <main+0x16a4>)
 8003df2:	193b      	adds	r3, r7, r4
 8003df4:	1958      	adds	r0, r3, r5
 8003df6:	2301      	movs	r3, #1
 8003df8:	6811      	ldr	r1, [r2, #0]
 8003dfa:	6852      	ldr	r2, [r2, #4]
 8003dfc:	f002 f950 	bl	80060a0 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8003e00:	f002 f80e 	bl	8005e20 <ssd1306_UpdateScreen>
				seconds_counter++;
 8003e04:	0022      	movs	r2, r4
 8003e06:	193b      	adds	r3, r7, r4
 8003e08:	199b      	adds	r3, r3, r6
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	18ba      	adds	r2, r7, r2
 8003e10:	1992      	adds	r2, r2, r6
 8003e12:	6013      	str	r3, [r2, #0]
				HAL_Delay(700);
 8003e14:	23af      	movs	r3, #175	; 0xaf
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f002 fc6b 	bl	80066f4 <HAL_Delay>
				//*/
				//********************************************************************************
				// debug output on lcd

				// debug!!!!!
				message[7] = '\r';
 8003e1e:	4b3b      	ldr	r3, [pc, #236]	; (8003f0c <main+0x1698>)
 8003e20:	220d      	movs	r2, #13
 8003e22:	71da      	strb	r2, [r3, #7]
				message[8] = '\n';
 8003e24:	4b39      	ldr	r3, [pc, #228]	; (8003f0c <main+0x1698>)
 8003e26:	220a      	movs	r2, #10
 8003e28:	721a      	strb	r2, [r3, #8]
				message[9] = 0;
 8003e2a:	4b38      	ldr	r3, [pc, #224]	; (8003f0c <main+0x1698>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8003e30:	4b36      	ldr	r3, [pc, #216]	; (8003f0c <main+0x1698>)
 8003e32:	0018      	movs	r0, r3
 8003e34:	f7fc f968 	bl	8000108 <strlen>
 8003e38:	0003      	movs	r3, r0
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	23fa      	movs	r3, #250	; 0xfa
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4932      	ldr	r1, [pc, #200]	; (8003f0c <main+0x1698>)
 8003e42:	4838      	ldr	r0, [pc, #224]	; (8003f24 <main+0x16b0>)
 8003e44:	f005 fab0 	bl	80093a8 <HAL_UART_Transmit>
		while(!end_of_log_reached)
 8003e48:	23b0      	movs	r3, #176	; 0xb0
 8003e4a:	2208      	movs	r2, #8
 8003e4c:	4694      	mov	ip, r2
 8003e4e:	44bc      	add	ip, r7
 8003e50:	4463      	add	r3, ip
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d100      	bne.n	8003e5a <main+0x15e6>
 8003e58:	e653      	b.n	8003b02 <main+0x128e>
			}
		}  // while(!end_of_log_reached)

		ssd1306_SetCursor(0,0);
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f002 f949 	bl	80060f4 <ssd1306_SetCursor>
		sprintf(message, "Max %02d.%01d m ", (int)max_depth, (int)((max_depth - (int)max_depth)*10));
 8003e62:	26b8      	movs	r6, #184	; 0xb8
 8003e64:	2408      	movs	r4, #8
 8003e66:	193b      	adds	r3, r7, r4
 8003e68:	199b      	adds	r3, r3, r6
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	6859      	ldr	r1, [r3, #4]
 8003e6e:	f7fe f8e7 	bl	8002040 <__aeabi_d2iz>
 8003e72:	0005      	movs	r5, r0
 8003e74:	193b      	adds	r3, r7, r4
 8003e76:	199b      	adds	r3, r3, r6
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	6859      	ldr	r1, [r3, #4]
 8003e7c:	f7fe f8e0 	bl	8002040 <__aeabi_d2iz>
 8003e80:	0003      	movs	r3, r0
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7fe f912 	bl	80020ac <__aeabi_i2d>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	000c      	movs	r4, r1
 8003e8c:	001a      	movs	r2, r3
 8003e8e:	0023      	movs	r3, r4
 8003e90:	2408      	movs	r4, #8
 8003e92:	1939      	adds	r1, r7, r4
 8003e94:	1989      	adds	r1, r1, r6
 8003e96:	6808      	ldr	r0, [r1, #0]
 8003e98:	6849      	ldr	r1, [r1, #4]
 8003e9a:	f7fd fd89 	bl	80019b0 <__aeabi_dsub>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	000c      	movs	r4, r1
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	0021      	movs	r1, r4
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <main+0x169c>)
 8003eaa:	f7fd fb0f 	bl	80014cc <__aeabi_dmul>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	000c      	movs	r4, r1
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	0021      	movs	r1, r4
 8003eb6:	f7fe f8c3 	bl	8002040 <__aeabi_d2iz>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	491a      	ldr	r1, [pc, #104]	; (8003f28 <main+0x16b4>)
 8003ebe:	4813      	ldr	r0, [pc, #76]	; (8003f0c <main+0x1698>)
 8003ec0:	002a      	movs	r2, r5
 8003ec2:	f005 ffa7 	bl	8009e14 <siprintf>
		ssd1306_WriteString(message, Font_11x18, White);
 8003ec6:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <main+0x16a4>)
 8003ec8:	4810      	ldr	r0, [pc, #64]	; (8003f0c <main+0x1698>)
 8003eca:	2301      	movs	r3, #1
 8003ecc:	6811      	ldr	r1, [r2, #0]
 8003ece:	6852      	ldr	r2, [r2, #4]
 8003ed0:	f002 f8e6 	bl	80060a0 <ssd1306_WriteString>
		ssd1306_SetCursor(0,44);
 8003ed4:	212c      	movs	r1, #44	; 0x2c
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	f002 f90c 	bl	80060f4 <ssd1306_SetCursor>
		sprintf(message, "Min T %+02d C", max_depth_temperature);
 8003edc:	23b4      	movs	r3, #180	; 0xb4
 8003ede:	2208      	movs	r2, #8
 8003ee0:	4694      	mov	ip, r2
 8003ee2:	44bc      	add	ip, r7
 8003ee4:	4463      	add	r3, ip
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4910      	ldr	r1, [pc, #64]	; (8003f2c <main+0x16b8>)
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <main+0x1698>)
 8003eec:	0018      	movs	r0, r3
 8003eee:	f005 ff91 	bl	8009e14 <siprintf>
		ssd1306_WriteString(message, Font_11x18, White);
 8003ef2:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <main+0x16a4>)
 8003ef4:	4805      	ldr	r0, [pc, #20]	; (8003f0c <main+0x1698>)
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	6811      	ldr	r1, [r2, #0]
 8003efa:	6852      	ldr	r2, [r2, #4]
 8003efc:	f002 f8d0 	bl	80060a0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8003f00:	f001 ff8e 	bl	8005e20 <ssd1306_UpdateScreen>


		while(1)
 8003f04:	e7fe      	b.n	8003f04 <main+0x1690>
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	0800b1b8 	.word	0x0800b1b8
 8003f0c:	20000234 	.word	0x20000234
 8003f10:	40240000 	.word	0x40240000
 8003f14:	0800b1c8 	.word	0x0800b1c8
 8003f18:	20000010 	.word	0x20000010
 8003f1c:	0800b1dc 	.word	0x0800b1dc
 8003f20:	0800b1f0 	.word	0x0800b1f0
 8003f24:	2000090c 	.word	0x2000090c
 8003f28:	0800b200 	.word	0x0800b200
 8003f2c:	0800b214 	.word	0x0800b214
	{
		while(1)                                                                                                         
	    {
                                                                                                                                                                      
                                                                                                                                                                      
	    	if(one_second_timer_get_flag())
 8003f30:	f001 f9c6 	bl	80052c0 <one_second_timer_get_flag>
 8003f34:	1e03      	subs	r3, r0, #0
 8003f36:	d0fb      	beq.n	8003f30 <main+0x16bc>
	    	{
	    		one_second_timer_reset_flag();
 8003f38:	f001 f9b8 	bl	80052ac <one_second_timer_reset_flag>
	    		odd_even = (odd_even+1)%2;
 8003f3c:	23d0      	movs	r3, #208	; 0xd0
 8003f3e:	2208      	movs	r2, #8
 8003f40:	4694      	mov	ip, r2
 8003f42:	44bc      	add	ip, r7
 8003f44:	4463      	add	r3, ip
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	4ac6      	ldr	r2, [pc, #792]	; (8004264 <main+0x19f0>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d504      	bpl.n	8003f5a <main+0x16e6>
 8003f50:	3b01      	subs	r3, #1
 8003f52:	2202      	movs	r2, #2
 8003f54:	4252      	negs	r2, r2
 8003f56:	4313      	orrs	r3, r2
 8003f58:	3301      	adds	r3, #1
 8003f5a:	22d0      	movs	r2, #208	; 0xd0
 8003f5c:	2108      	movs	r1, #8
 8003f5e:	468c      	mov	ip, r1
 8003f60:	44bc      	add	ip, r7
 8003f62:	4462      	add	r2, ip
 8003f64:	6013      	str	r3, [r2, #0]
  	    
	    		pressure_sensor_measure_pressure_temperature();                                                                                                   	
 8003f66:	f001 fa49 	bl	80053fc <pressure_sensor_measure_pressure_temperature>
	    	    double P = pressure_sensor_get_pressure();
 8003f6a:	f001 fca9 	bl	80058c0 <pressure_sensor_get_pressure>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	000c      	movs	r4, r1
 8003f72:	2580      	movs	r5, #128	; 0x80
 8003f74:	197a      	adds	r2, r7, r5
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	6054      	str	r4, [r2, #4]
	    	    double actual_temperature = pressure_sensor_get_temperature();
 8003f7a:	f001 fcad 	bl	80058d8 <pressure_sensor_get_temperature>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	000c      	movs	r4, r1
 8003f82:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f84:	67fc      	str	r4, [r7, #124]	; 0x7c
                                                                                                                                                                  
	    	    voltmeter_measure_voltage();
 8003f86:	f002 fa5f 	bl	8006448 <voltmeter_measure_voltage>
	    	    double accu_voltage = voltmeter_get_voltage();
 8003f8a:	f002 fb11 	bl	80065b0 <voltmeter_get_voltage>
 8003f8e:	0003      	movs	r3, r0
 8003f90:	000c      	movs	r4, r1
 8003f92:	673b      	str	r3, [r7, #112]	; 0x70
 8003f94:	677c      	str	r4, [r7, #116]	; 0x74
	    	    double accu_percentage = voltmeter_get_percentage();
 8003f96:	f002 fb17 	bl	80065c8 <voltmeter_get_percentage>
 8003f9a:	0003      	movs	r3, r0
 8003f9c:	000c      	movs	r4, r1
 8003f9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fa0:	66fc      	str	r4, [r7, #108]	; 0x6c
	                                                                                                                                                              
	    		rtc_ds3231_action();
 8003fa2:	f001 fceb 	bl	800597c <rtc_ds3231_action>
	    		// time-date calculation ----------------------------------------
	    		uint8_t seconds, minutes, hours;
	    		rtc_ds3231_get_time(&hours, &minutes, &seconds);
 8003fa6:	230f      	movs	r3, #15
 8003fa8:	18fa      	adds	r2, r7, r3
 8003faa:	230e      	movs	r3, #14
 8003fac:	18f9      	adds	r1, r7, r3
 8003fae:	230d      	movs	r3, #13
 8003fb0:	18fb      	adds	r3, r7, r3
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f001 fcb8 	bl	8005928 <rtc_ds3231_get_time>
	    		uint8_t date, month, year;
	    		rtc_ds3231_get_date(&date, &month, &year);
 8003fb8:	230a      	movs	r3, #10
 8003fba:	18fa      	adds	r2, r7, r3
 8003fbc:	230b      	movs	r3, #11
 8003fbe:	18f9      	adds	r1, r7, r3
 8003fc0:	230c      	movs	r3, #12
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f001 fc93 	bl	80058f0 <rtc_ds3231_get_date>
	    		// debug!!!
	    	  	//P_sym += 980;
	    		//P = P_sym;
                                                                                                                                                                      
                                                                                                                                                                      
	    		if(P <= surface_pressure)
 8003fca:	23d4      	movs	r3, #212	; 0xd4
 8003fcc:	2208      	movs	r2, #8
 8003fce:	4694      	mov	ip, r2
 8003fd0:	44bc      	add	ip, r7
 8003fd2:	4463      	add	r3, ip
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	f7fe f8a3 	bl	8002120 <__aeabi_ui2d>
 8003fda:	0003      	movs	r3, r0
 8003fdc:	000c      	movs	r4, r1
 8003fde:	001a      	movs	r2, r3
 8003fe0:	0023      	movs	r3, r4
 8003fe2:	1979      	adds	r1, r7, r5
 8003fe4:	6808      	ldr	r0, [r1, #0]
 8003fe6:	6849      	ldr	r1, [r1, #4]
 8003fe8:	f7fc fa2c 	bl	8000444 <__aeabi_dcmple>
 8003fec:	1e03      	subs	r3, r0, #0
 8003fee:	d00c      	beq.n	800400a <main+0x1796>
	    			surface_pressure = P;
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	f7fc fa62 	bl	80004c0 <__aeabi_d2uiz>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	22d4      	movs	r2, #212	; 0xd4
 8004000:	2108      	movs	r1, #8
 8004002:	468c      	mov	ip, r1
 8004004:	44bc      	add	ip, r7
 8004006:	4462      	add	r2, ip
 8004008:	6013      	str	r3, [r2, #0]
                                                                                                                                                                      
	    		int we_are_under_water = 0;
 800400a:	2300      	movs	r3, #0
 800400c:	229c      	movs	r2, #156	; 0x9c
 800400e:	2108      	movs	r1, #8
 8004010:	468c      	mov	ip, r1
 8004012:	44bc      	add	ip, r7
 8004014:	4462      	add	r2, ip
 8004016:	6013      	str	r3, [r2, #0]
                                                                                                                                                                      
	    		if(P > (surface_pressure + 9800)) // underwater
 8004018:	23d4      	movs	r3, #212	; 0xd4
 800401a:	2208      	movs	r2, #8
 800401c:	4694      	mov	ip, r2
 800401e:	44bc      	add	ip, r7
 8004020:	4463      	add	r3, ip
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a90      	ldr	r2, [pc, #576]	; (8004268 <main+0x19f4>)
 8004026:	4694      	mov	ip, r2
 8004028:	4463      	add	r3, ip
 800402a:	0018      	movs	r0, r3
 800402c:	f7fe f878 	bl	8002120 <__aeabi_ui2d>
 8004030:	0003      	movs	r3, r0
 8004032:	000c      	movs	r4, r1
 8004034:	001a      	movs	r2, r3
 8004036:	0023      	movs	r3, r4
 8004038:	2180      	movs	r1, #128	; 0x80
 800403a:	1879      	adds	r1, r7, r1
 800403c:	6808      	ldr	r0, [r1, #0]
 800403e:	6849      	ldr	r1, [r1, #4]
 8004040:	f7fc fa0a 	bl	8000458 <__aeabi_dcmpgt>
 8004044:	1e03      	subs	r3, r0, #0
 8004046:	d006      	beq.n	8004056 <main+0x17e2>
	    			we_are_under_water = 1;
 8004048:	2301      	movs	r3, #1
 800404a:	229c      	movs	r2, #156	; 0x9c
 800404c:	2108      	movs	r1, #8
 800404e:	468c      	mov	ip, r1
 8004050:	44bc      	add	ip, r7
 8004052:	4462      	add	r2, ip
 8004054:	6013      	str	r3, [r2, #0]
                                                                                                                                                                      
	    		if(!we_are_under_water)  // we are not under water
 8004056:	239c      	movs	r3, #156	; 0x9c
 8004058:	2208      	movs	r2, #8
 800405a:	4694      	mov	ip, r2
 800405c:	44bc      	add	ip, r7
 800405e:	4463      	add	r3, ip
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d000      	beq.n	8004068 <main+0x17f4>
 8004066:	e07d      	b.n	8004164 <main+0x18f0>
	    		{
	    			depth_switch_action();		    
 8004068:	f7fe fa4e 	bl	8002508 <depth_switch_action>
                                                                                                                                                                      
	    			
	    			if(actuator_counter == 0)
 800406c:	23c0      	movs	r3, #192	; 0xc0
 800406e:	2208      	movs	r2, #8
 8004070:	4694      	mov	ip, r2
 8004072:	44bc      	add	ip, r7
 8004074:	4463      	add	r3, ip
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d000      	beq.n	800407e <main+0x180a>
 800407c:	e758      	b.n	8003f30 <main+0x16bc>
	    			{
	    				//ssd1306_Fill(Black);                                                                                         
  	    	        	ssd1306_SetCursor(0,0);
 800407e:	2100      	movs	r1, #0
 8004080:	2000      	movs	r0, #0
 8004082:	f002 f837 	bl	80060f4 <ssd1306_SetCursor>
	    	        	//sprintf(timestamp, "%02d:%02d %02d.%02d", hours, minutes, date, month);
	    				if(odd_even)
 8004086:	23d0      	movs	r3, #208	; 0xd0
 8004088:	2208      	movs	r2, #8
 800408a:	4694      	mov	ip, r2
 800408c:	44bc      	add	ip, r7
 800408e:	4463      	add	r3, ip
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d017      	beq.n	80040c6 <main+0x1852>
	    	        		sprintf(timestamp, "%02d:%02d %02d.%02d", hours, minutes, date, month);
 8004096:	230d      	movs	r3, #13
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	001c      	movs	r4, r3
 800409e:	230e      	movs	r3, #14
 80040a0:	18fb      	adds	r3, r7, r3
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	001d      	movs	r5, r3
 80040a6:	230c      	movs	r3, #12
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	001a      	movs	r2, r3
 80040ae:	230b      	movs	r3, #11
 80040b0:	18fb      	adds	r3, r7, r3
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	496d      	ldr	r1, [pc, #436]	; (800426c <main+0x19f8>)
 80040b6:	486e      	ldr	r0, [pc, #440]	; (8004270 <main+0x19fc>)
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	9200      	str	r2, [sp, #0]
 80040bc:	002b      	movs	r3, r5
 80040be:	0022      	movs	r2, r4
 80040c0:	f005 fea8 	bl	8009e14 <siprintf>
 80040c4:	e016      	b.n	80040f4 <main+0x1880>
	    				else
	    	        		sprintf(timestamp, "%02d %02d %02d %02d", hours, minutes, date, month);
 80040c6:	230d      	movs	r3, #13
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	001c      	movs	r4, r3
 80040ce:	230e      	movs	r3, #14
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	001d      	movs	r5, r3
 80040d6:	230c      	movs	r3, #12
 80040d8:	18fb      	adds	r3, r7, r3
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	001a      	movs	r2, r3
 80040de:	230b      	movs	r3, #11
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	4963      	ldr	r1, [pc, #396]	; (8004274 <main+0x1a00>)
 80040e6:	4862      	ldr	r0, [pc, #392]	; (8004270 <main+0x19fc>)
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	9200      	str	r2, [sp, #0]
 80040ec:	002b      	movs	r3, r5
 80040ee:	0022      	movs	r2, r4
 80040f0:	f005 fe90 	bl	8009e14 <siprintf>
  	    	        	ssd1306_WriteString(timestamp, Font_11x18, White);
 80040f4:	4a60      	ldr	r2, [pc, #384]	; (8004278 <main+0x1a04>)
 80040f6:	485e      	ldr	r0, [pc, #376]	; (8004270 <main+0x19fc>)
 80040f8:	2301      	movs	r3, #1
 80040fa:	6811      	ldr	r1, [r2, #0]
 80040fc:	6852      	ldr	r2, [r2, #4]
 80040fe:	f001 ffcf 	bl	80060a0 <ssd1306_WriteString>
  	    	        	ssd1306_SetCursor(0,22);
 8004102:	2116      	movs	r1, #22
 8004104:	2000      	movs	r0, #0
 8004106:	f001 fff5 	bl	80060f4 <ssd1306_SetCursor>
	    	        	sprintf(message, "AVAR GL %02dm", (int)depth_switch_get_current_depth());
 800410a:	f7fe f9f1 	bl	80024f0 <depth_switch_get_current_depth>
 800410e:	0003      	movs	r3, r0
 8004110:	000c      	movs	r4, r1
 8004112:	0018      	movs	r0, r3
 8004114:	0021      	movs	r1, r4
 8004116:	f7fd ff93 	bl	8002040 <__aeabi_d2iz>
 800411a:	0002      	movs	r2, r0
 800411c:	4957      	ldr	r1, [pc, #348]	; (800427c <main+0x1a08>)
 800411e:	4b58      	ldr	r3, [pc, #352]	; (8004280 <main+0x1a0c>)
 8004120:	0018      	movs	r0, r3
 8004122:	f005 fe77 	bl	8009e14 <siprintf>
	    	        	//sprintf(message, "%d", (int)actual_temperature);
  	    	        	ssd1306_WriteString(message, Font_11x18, White);
 8004126:	4a54      	ldr	r2, [pc, #336]	; (8004278 <main+0x1a04>)
 8004128:	4855      	ldr	r0, [pc, #340]	; (8004280 <main+0x1a0c>)
 800412a:	2301      	movs	r3, #1
 800412c:	6811      	ldr	r1, [r2, #0]
 800412e:	6852      	ldr	r2, [r2, #4]
 8004130:	f001 ffb6 	bl	80060a0 <ssd1306_WriteString>
  	    	        	ssd1306_SetCursor(0,44);
 8004134:	212c      	movs	r1, #44	; 0x2c
 8004136:	2000      	movs	r0, #0
 8004138:	f001 ffdc 	bl	80060f4 <ssd1306_SetCursor>
	    	        	sprintf(message, "akkum %02d%%", (int)accu_percentage);
 800413c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800413e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004140:	f7fd ff7e 	bl	8002040 <__aeabi_d2iz>
 8004144:	0002      	movs	r2, r0
 8004146:	494f      	ldr	r1, [pc, #316]	; (8004284 <main+0x1a10>)
 8004148:	4b4d      	ldr	r3, [pc, #308]	; (8004280 <main+0x1a0c>)
 800414a:	0018      	movs	r0, r3
 800414c:	f005 fe62 	bl	8009e14 <siprintf>
	    	        	//sprintf(message, "%d", (int)P);
  	    	        	ssd1306_WriteString(message, Font_11x18, White);
 8004150:	4a49      	ldr	r2, [pc, #292]	; (8004278 <main+0x1a04>)
 8004152:	484b      	ldr	r0, [pc, #300]	; (8004280 <main+0x1a0c>)
 8004154:	2301      	movs	r3, #1
 8004156:	6811      	ldr	r1, [r2, #0]
 8004158:	6852      	ldr	r2, [r2, #4]
 800415a:	f001 ffa1 	bl	80060a0 <ssd1306_WriteString>
  	    	        	ssd1306_UpdateScreen();
 800415e:	f001 fe5f 	bl	8005e20 <ssd1306_UpdateScreen>
 8004162:	e6e5      	b.n	8003f30 <main+0x16bc>
	    		else // we are under water
	    		{
        //*
	    			uint16_t data;
                                                                                                                                                                      
	    			log_counter++;
 8004164:	22c4      	movs	r2, #196	; 0xc4
 8004166:	2508      	movs	r5, #8
 8004168:	197b      	adds	r3, r7, r5
 800416a:	189b      	adds	r3, r3, r2
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3301      	adds	r3, #1
 8004170:	2108      	movs	r1, #8
 8004172:	468c      	mov	ip, r1
 8004174:	44bc      	add	ip, r7
 8004176:	4462      	add	r2, ip
 8004178:	6013      	str	r3, [r2, #0]
                                                                                                                                                                      
	    			// calculate depth
	    			double depth = ((double)(P - surface_pressure))/9800.0;
 800417a:	23d4      	movs	r3, #212	; 0xd4
 800417c:	2208      	movs	r2, #8
 800417e:	4694      	mov	ip, r2
 8004180:	44bc      	add	ip, r7
 8004182:	4463      	add	r3, ip
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	f7fd ffcb 	bl	8002120 <__aeabi_ui2d>
 800418a:	0003      	movs	r3, r0
 800418c:	000c      	movs	r4, r1
 800418e:	001a      	movs	r2, r3
 8004190:	0023      	movs	r3, r4
 8004192:	2180      	movs	r1, #128	; 0x80
 8004194:	1879      	adds	r1, r7, r1
 8004196:	6808      	ldr	r0, [r1, #0]
 8004198:	6849      	ldr	r1, [r1, #4]
 800419a:	f7fd fc09 	bl	80019b0 <__aeabi_dsub>
 800419e:	0003      	movs	r3, r0
 80041a0:	000c      	movs	r4, r1
 80041a2:	0018      	movs	r0, r3
 80041a4:	0021      	movs	r1, r4
 80041a6:	2200      	movs	r2, #0
 80041a8:	4b37      	ldr	r3, [pc, #220]	; (8004288 <main+0x1a14>)
 80041aa:	f7fc fd85 	bl	8000cb8 <__aeabi_ddiv>
 80041ae:	0003      	movs	r3, r0
 80041b0:	000c      	movs	r4, r1
 80041b2:	2190      	movs	r1, #144	; 0x90
 80041b4:	197a      	adds	r2, r7, r5
 80041b6:	1852      	adds	r2, r2, r1
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	6054      	str	r4, [r2, #4]
	    			if(depth > 1.0)
 80041bc:	2200      	movs	r2, #0
 80041be:	4b33      	ldr	r3, [pc, #204]	; (800428c <main+0x1a18>)
 80041c0:	2008      	movs	r0, #8
 80041c2:	4684      	mov	ip, r0
 80041c4:	44bc      	add	ip, r7
 80041c6:	4461      	add	r1, ip
 80041c8:	6808      	ldr	r0, [r1, #0]
 80041ca:	6849      	ldr	r1, [r1, #4]
 80041cc:	f7fc f944 	bl	8000458 <__aeabi_dcmpgt>
 80041d0:	1e03      	subs	r3, r0, #0
 80041d2:	d010      	beq.n	80041f6 <main+0x1982>
	    				depth -= 1.0;
 80041d4:	2200      	movs	r2, #0
 80041d6:	4b2d      	ldr	r3, [pc, #180]	; (800428c <main+0x1a18>)
 80041d8:	2590      	movs	r5, #144	; 0x90
 80041da:	2608      	movs	r6, #8
 80041dc:	19b9      	adds	r1, r7, r6
 80041de:	1949      	adds	r1, r1, r5
 80041e0:	6808      	ldr	r0, [r1, #0]
 80041e2:	6849      	ldr	r1, [r1, #4]
 80041e4:	f7fd fbe4 	bl	80019b0 <__aeabi_dsub>
 80041e8:	0003      	movs	r3, r0
 80041ea:	000c      	movs	r4, r1
 80041ec:	19ba      	adds	r2, r7, r6
 80041ee:	1952      	adds	r2, r2, r5
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	6054      	str	r4, [r2, #4]
 80041f4:	e008      	b.n	8004208 <main+0x1994>
	    			else
	    				depth = 0.0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	2400      	movs	r4, #0
 80041fa:	2290      	movs	r2, #144	; 0x90
 80041fc:	2108      	movs	r1, #8
 80041fe:	468c      	mov	ip, r1
 8004200:	44bc      	add	ip, r7
 8004202:	4462      	add	r2, ip
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	6054      	str	r4, [r2, #4]
                                                                                                                                                                      
	    			if(actuator_counter == 0)
 8004208:	23c0      	movs	r3, #192	; 0xc0
 800420a:	2208      	movs	r2, #8
 800420c:	4694      	mov	ip, r2
 800420e:	44bc      	add	ip, r7
 8004210:	4463      	add	r3, ip
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d000      	beq.n	800421a <main+0x19a6>
 8004218:	e0ac      	b.n	8004374 <main+0x1b00>
	    			{
  	    	        	ssd1306_SetCursor(0,0);
 800421a:	2100      	movs	r1, #0
 800421c:	2000      	movs	r0, #0
 800421e:	f001 ff69 	bl	80060f4 <ssd1306_SetCursor>
	    	        	//sprintf(timestamp, "%02d:%02d %02d.%02d", hours, minutes, date, month);
	    				if(odd_even)
 8004222:	23d0      	movs	r3, #208	; 0xd0
 8004224:	2208      	movs	r2, #8
 8004226:	4694      	mov	ip, r2
 8004228:	44bc      	add	ip, r7
 800422a:	4463      	add	r3, ip
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d02e      	beq.n	8004290 <main+0x1a1c>
	    	        		sprintf(timestamp, "%02d:%02d %02d.%02d", hours, minutes, date, month);
 8004232:	230d      	movs	r3, #13
 8004234:	18fb      	adds	r3, r7, r3
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	001c      	movs	r4, r3
 800423a:	230e      	movs	r3, #14
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	001d      	movs	r5, r3
 8004242:	230c      	movs	r3, #12
 8004244:	18fb      	adds	r3, r7, r3
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	001a      	movs	r2, r3
 800424a:	230b      	movs	r3, #11
 800424c:	18fb      	adds	r3, r7, r3
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	4906      	ldr	r1, [pc, #24]	; (800426c <main+0x19f8>)
 8004252:	4807      	ldr	r0, [pc, #28]	; (8004270 <main+0x19fc>)
 8004254:	9301      	str	r3, [sp, #4]
 8004256:	9200      	str	r2, [sp, #0]
 8004258:	002b      	movs	r3, r5
 800425a:	0022      	movs	r2, r4
 800425c:	f005 fdda 	bl	8009e14 <siprintf>
 8004260:	e02d      	b.n	80042be <main+0x1a4a>
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	80000001 	.word	0x80000001
 8004268:	00002648 	.word	0x00002648
 800426c:	0800b224 	.word	0x0800b224
 8004270:	20000274 	.word	0x20000274
 8004274:	0800b238 	.word	0x0800b238
 8004278:	20000010 	.word	0x20000010
 800427c:	0800b24c 	.word	0x0800b24c
 8004280:	20000234 	.word	0x20000234
 8004284:	0800b25c 	.word	0x0800b25c
 8004288:	40c32400 	.word	0x40c32400
 800428c:	3ff00000 	.word	0x3ff00000
	    				else
	    	        		sprintf(timestamp, "%02d %02d %02d %02d", hours, minutes, date, month);
 8004290:	230d      	movs	r3, #13
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	001c      	movs	r4, r3
 8004298:	230e      	movs	r3, #14
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	001d      	movs	r5, r3
 80042a0:	230c      	movs	r3, #12
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	001a      	movs	r2, r3
 80042a8:	230b      	movs	r3, #11
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	4952      	ldr	r1, [pc, #328]	; (80043f8 <main+0x1b84>)
 80042b0:	4852      	ldr	r0, [pc, #328]	; (80043fc <main+0x1b88>)
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	9200      	str	r2, [sp, #0]
 80042b6:	002b      	movs	r3, r5
 80042b8:	0022      	movs	r2, r4
 80042ba:	f005 fdab 	bl	8009e14 <siprintf>
	    	        	//sprintf(timestamp, "timestamp");
  	    	        	ssd1306_WriteString(timestamp, Font_11x18, White);
 80042be:	4a50      	ldr	r2, [pc, #320]	; (8004400 <main+0x1b8c>)
 80042c0:	484e      	ldr	r0, [pc, #312]	; (80043fc <main+0x1b88>)
 80042c2:	2301      	movs	r3, #1
 80042c4:	6811      	ldr	r1, [r2, #0]
 80042c6:	6852      	ldr	r2, [r2, #4]
 80042c8:	f001 feea 	bl	80060a0 <ssd1306_WriteString>
  	    	        	ssd1306_SetCursor(0,22);
 80042cc:	2116      	movs	r1, #22
 80042ce:	2000      	movs	r0, #0
 80042d0:	f001 ff10 	bl	80060f4 <ssd1306_SetCursor>
	    	        	//sprintf(message, "glubina %02dm", (int)depth);
	    	        	sprintf(message, "gl--> %02d.%01dm", (int)depth, (int)((depth - (int)depth)*10.0));
 80042d4:	2690      	movs	r6, #144	; 0x90
 80042d6:	2408      	movs	r4, #8
 80042d8:	193b      	adds	r3, r7, r4
 80042da:	199b      	adds	r3, r3, r6
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	6859      	ldr	r1, [r3, #4]
 80042e0:	f7fd feae 	bl	8002040 <__aeabi_d2iz>
 80042e4:	0005      	movs	r5, r0
 80042e6:	193b      	adds	r3, r7, r4
 80042e8:	199b      	adds	r3, r3, r6
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	6859      	ldr	r1, [r3, #4]
 80042ee:	f7fd fea7 	bl	8002040 <__aeabi_d2iz>
 80042f2:	0003      	movs	r3, r0
 80042f4:	0018      	movs	r0, r3
 80042f6:	f7fd fed9 	bl	80020ac <__aeabi_i2d>
 80042fa:	0003      	movs	r3, r0
 80042fc:	000c      	movs	r4, r1
 80042fe:	001a      	movs	r2, r3
 8004300:	0023      	movs	r3, r4
 8004302:	2408      	movs	r4, #8
 8004304:	1939      	adds	r1, r7, r4
 8004306:	1989      	adds	r1, r1, r6
 8004308:	6808      	ldr	r0, [r1, #0]
 800430a:	6849      	ldr	r1, [r1, #4]
 800430c:	f7fd fb50 	bl	80019b0 <__aeabi_dsub>
 8004310:	0003      	movs	r3, r0
 8004312:	000c      	movs	r4, r1
 8004314:	0018      	movs	r0, r3
 8004316:	0021      	movs	r1, r4
 8004318:	2200      	movs	r2, #0
 800431a:	4b3a      	ldr	r3, [pc, #232]	; (8004404 <main+0x1b90>)
 800431c:	f7fd f8d6 	bl	80014cc <__aeabi_dmul>
 8004320:	0003      	movs	r3, r0
 8004322:	000c      	movs	r4, r1
 8004324:	0018      	movs	r0, r3
 8004326:	0021      	movs	r1, r4
 8004328:	f7fd fe8a 	bl	8002040 <__aeabi_d2iz>
 800432c:	0003      	movs	r3, r0
 800432e:	4936      	ldr	r1, [pc, #216]	; (8004408 <main+0x1b94>)
 8004330:	4836      	ldr	r0, [pc, #216]	; (800440c <main+0x1b98>)
 8004332:	002a      	movs	r2, r5
 8004334:	f005 fd6e 	bl	8009e14 <siprintf>
  	    	        	ssd1306_WriteString(message, Font_11x18, White);
 8004338:	4a31      	ldr	r2, [pc, #196]	; (8004400 <main+0x1b8c>)
 800433a:	4834      	ldr	r0, [pc, #208]	; (800440c <main+0x1b98>)
 800433c:	2301      	movs	r3, #1
 800433e:	6811      	ldr	r1, [r2, #0]
 8004340:	6852      	ldr	r2, [r2, #4]
 8004342:	f001 fead 	bl	80060a0 <ssd1306_WriteString>
  	    	        	ssd1306_SetCursor(0,44);
 8004346:	212c      	movs	r1, #44	; 0x2c
 8004348:	2000      	movs	r0, #0
 800434a:	f001 fed3 	bl	80060f4 <ssd1306_SetCursor>
	    	        	sprintf(message, "akkum %02d%%", (int)accu_percentage);
 800434e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004350:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004352:	f7fd fe75 	bl	8002040 <__aeabi_d2iz>
 8004356:	0002      	movs	r2, r0
 8004358:	492d      	ldr	r1, [pc, #180]	; (8004410 <main+0x1b9c>)
 800435a:	4b2c      	ldr	r3, [pc, #176]	; (800440c <main+0x1b98>)
 800435c:	0018      	movs	r0, r3
 800435e:	f005 fd59 	bl	8009e14 <siprintf>
  	    	        	ssd1306_WriteString(message, Font_11x18, White);
 8004362:	4a27      	ldr	r2, [pc, #156]	; (8004400 <main+0x1b8c>)
 8004364:	4829      	ldr	r0, [pc, #164]	; (800440c <main+0x1b98>)
 8004366:	2301      	movs	r3, #1
 8004368:	6811      	ldr	r1, [r2, #0]
 800436a:	6852      	ldr	r2, [r2, #4]
 800436c:	f001 fe98 	bl	80060a0 <ssd1306_WriteString>
  	    	        	ssd1306_UpdateScreen();  
 8004370:	f001 fd56 	bl	8005e20 <ssd1306_UpdateScreen>
	    			}
                                                                                                                                                                      
	    			// log depth
	    			//--------------------------------------------------------------------------
	    			uint8_t b0;
	    			int write_delay = 5;
 8004374:	2305      	movs	r3, #5
 8004376:	667b      	str	r3, [r7, #100]	; 0x64
	    			static I2C_HandleTypeDef *at24c32_i2c_handle = &hi2c2;
                                                                                                                                                                      
	    			if(eeprom_number_of_records == 0)
 8004378:	23c8      	movs	r3, #200	; 0xc8
 800437a:	2208      	movs	r2, #8
 800437c:	4694      	mov	ip, r2
 800437e:	44bc      	add	ip, r7
 8004380:	4463      	add	r3, ip
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d000      	beq.n	800438a <main+0x1b16>
 8004388:	e30e      	b.n	80049a8 <main+0x2134>
	    			{
	    				// no records yet
	    				
	    				// read memory bank id
	    				HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, 0, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);	
 800438a:	4b22      	ldr	r3, [pc, #136]	; (8004414 <main+0x1ba0>)
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	23cf      	movs	r3, #207	; 0xcf
 8004390:	2208      	movs	r2, #8
 8004392:	4694      	mov	ip, r2
 8004394:	44bc      	add	ip, r7
 8004396:	4463      	add	r3, ip
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	b299      	uxth	r1, r3
 800439c:	2364      	movs	r3, #100	; 0x64
 800439e:	9302      	str	r3, [sp, #8]
 80043a0:	2301      	movs	r3, #1
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	2409      	movs	r4, #9
 80043a6:	193b      	adds	r3, r7, r4
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	2302      	movs	r3, #2
 80043ac:	2200      	movs	r2, #0
 80043ae:	f003 f96b 	bl	8007688 <HAL_I2C_Mem_Read>
                                                                                                                                                                      
	    				if(b0 == 1)   // pishem v bank 1
 80043b2:	193b      	adds	r3, r7, r4
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d12e      	bne.n	8004418 <main+0x1ba4>
	    				{
	    					// pri sleduyuschem zapuske budem pisat' v bank 0
	    					b0 = 0;
 80043ba:	2609      	movs	r6, #9
 80043bc:	19bb      	adds	r3, r7, r6
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]
	    					HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, 0, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80043c2:	4b14      	ldr	r3, [pc, #80]	; (8004414 <main+0x1ba0>)
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	24cf      	movs	r4, #207	; 0xcf
 80043c8:	2508      	movs	r5, #8
 80043ca:	197b      	adds	r3, r7, r5
 80043cc:	191b      	adds	r3, r3, r4
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	b299      	uxth	r1, r3
 80043d2:	2364      	movs	r3, #100	; 0x64
 80043d4:	9302      	str	r3, [sp, #8]
 80043d6:	2301      	movs	r3, #1
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	19bb      	adds	r3, r7, r6
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	2302      	movs	r3, #2
 80043e0:	2200      	movs	r2, #0
 80043e2:	f003 f823 	bl	800742c <HAL_I2C_Mem_Write>
	    					HAL_Delay(write_delay);
 80043e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043e8:	0018      	movs	r0, r3
 80043ea:	f002 f983 	bl	80066f4 <HAL_Delay>
                                                                                                                                                                      
	    					// nastraivaem address i2c banka pamyati (nomer 1)
	    					at24c32_shifted_address = 0x51 << 1;
 80043ee:	197b      	adds	r3, r7, r5
 80043f0:	191b      	adds	r3, r3, r4
 80043f2:	22a2      	movs	r2, #162	; 0xa2
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	e02a      	b.n	800444e <main+0x1bda>
 80043f8:	0800b238 	.word	0x0800b238
 80043fc:	20000274 	.word	0x20000274
 8004400:	20000010 	.word	0x20000010
 8004404:	40240000 	.word	0x40240000
 8004408:	0800b26c 	.word	0x0800b26c
 800440c:	20000234 	.word	0x20000234
 8004410:	0800b25c 	.word	0x0800b25c
 8004414:	20000024 	.word	0x20000024
	    				}
	    				else
	    				{
	    					// pri sleduyuschem zapuske budem pisat' v bank 1
	    					b0 = 1;
 8004418:	2409      	movs	r4, #9
 800441a:	193b      	adds	r3, r7, r4
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]
	    					HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, 0, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004420:	4bf2      	ldr	r3, [pc, #968]	; (80047ec <main+0x1f78>)
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	23cf      	movs	r3, #207	; 0xcf
 8004426:	2208      	movs	r2, #8
 8004428:	4694      	mov	ip, r2
 800442a:	44bc      	add	ip, r7
 800442c:	4463      	add	r3, ip
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	b299      	uxth	r1, r3
 8004432:	2364      	movs	r3, #100	; 0x64
 8004434:	9302      	str	r3, [sp, #8]
 8004436:	2301      	movs	r3, #1
 8004438:	9301      	str	r3, [sp, #4]
 800443a:	193b      	adds	r3, r7, r4
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	2302      	movs	r3, #2
 8004440:	2200      	movs	r2, #0
 8004442:	f002 fff3 	bl	800742c <HAL_I2C_Mem_Write>
	    					HAL_Delay(write_delay);
 8004446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004448:	0018      	movs	r0, r3
 800444a:	f002 f953 	bl	80066f4 <HAL_Delay>
	    				}
                                                                                                                                                                      
                                                                                                                                                                      
	    				// write timestamp
	    	        	sprintf(timestamp, "%02d:%02d %02d.%02d", hours, minutes, date, month);
 800444e:	230d      	movs	r3, #13
 8004450:	18fb      	adds	r3, r7, r3
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	001c      	movs	r4, r3
 8004456:	230e      	movs	r3, #14
 8004458:	18fb      	adds	r3, r7, r3
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	001d      	movs	r5, r3
 800445e:	230c      	movs	r3, #12
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	001a      	movs	r2, r3
 8004466:	230b      	movs	r3, #11
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	49e0      	ldr	r1, [pc, #896]	; (80047f0 <main+0x1f7c>)
 800446e:	48e1      	ldr	r0, [pc, #900]	; (80047f4 <main+0x1f80>)
 8004470:	9301      	str	r3, [sp, #4]
 8004472:	9200      	str	r2, [sp, #0]
 8004474:	002b      	movs	r3, r5
 8004476:	0022      	movs	r2, r4
 8004478:	f005 fccc 	bl	8009e14 <siprintf>
	    				b0 = timestamp[0];
 800447c:	4bdd      	ldr	r3, [pc, #884]	; (80047f4 <main+0x1f80>)
 800447e:	781a      	ldrb	r2, [r3, #0]
 8004480:	2309      	movs	r3, #9
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004486:	4bd9      	ldr	r3, [pc, #868]	; (80047ec <main+0x1f78>)
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	25cf      	movs	r5, #207	; 0xcf
 800448c:	2408      	movs	r4, #8
 800448e:	193a      	adds	r2, r7, r4
 8004490:	1953      	adds	r3, r2, r5
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	b299      	uxth	r1, r3
 8004496:	26cc      	movs	r6, #204	; 0xcc
 8004498:	193a      	adds	r2, r7, r4
 800449a:	1993      	adds	r3, r2, r6
 800449c:	881a      	ldrh	r2, [r3, #0]
 800449e:	2364      	movs	r3, #100	; 0x64
 80044a0:	9302      	str	r3, [sp, #8]
 80044a2:	2301      	movs	r3, #1
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	2309      	movs	r3, #9
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	2302      	movs	r3, #2
 80044ae:	f002 ffbd 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 80044b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044b4:	0018      	movs	r0, r3
 80044b6:	f002 f91d 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 80044ba:	0021      	movs	r1, r4
 80044bc:	187a      	adds	r2, r7, r1
 80044be:	1993      	adds	r3, r2, r6
 80044c0:	881a      	ldrh	r2, [r3, #0]
 80044c2:	1878      	adds	r0, r7, r1
 80044c4:	1983      	adds	r3, r0, r6
 80044c6:	3201      	adds	r2, #1
 80044c8:	801a      	strh	r2, [r3, #0]
	    				b0 = timestamp[1];
 80044ca:	4bca      	ldr	r3, [pc, #808]	; (80047f4 <main+0x1f80>)
 80044cc:	785a      	ldrb	r2, [r3, #1]
 80044ce:	2309      	movs	r3, #9
 80044d0:	18fb      	adds	r3, r7, r3
 80044d2:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80044d4:	4bc5      	ldr	r3, [pc, #788]	; (80047ec <main+0x1f78>)
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	000c      	movs	r4, r1
 80044da:	193a      	adds	r2, r7, r4
 80044dc:	1953      	adds	r3, r2, r5
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b299      	uxth	r1, r3
 80044e2:	193a      	adds	r2, r7, r4
 80044e4:	1993      	adds	r3, r2, r6
 80044e6:	881a      	ldrh	r2, [r3, #0]
 80044e8:	2364      	movs	r3, #100	; 0x64
 80044ea:	9302      	str	r3, [sp, #8]
 80044ec:	2301      	movs	r3, #1
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	2309      	movs	r3, #9
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	2302      	movs	r3, #2
 80044f8:	f002 ff98 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 80044fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044fe:	0018      	movs	r0, r3
 8004500:	f002 f8f8 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8004504:	0021      	movs	r1, r4
 8004506:	187a      	adds	r2, r7, r1
 8004508:	1993      	adds	r3, r2, r6
 800450a:	881a      	ldrh	r2, [r3, #0]
 800450c:	1878      	adds	r0, r7, r1
 800450e:	1983      	adds	r3, r0, r6
 8004510:	3201      	adds	r2, #1
 8004512:	801a      	strh	r2, [r3, #0]
	    				b0 = timestamp[3];
 8004514:	4bb7      	ldr	r3, [pc, #732]	; (80047f4 <main+0x1f80>)
 8004516:	78da      	ldrb	r2, [r3, #3]
 8004518:	2309      	movs	r3, #9
 800451a:	18fb      	adds	r3, r7, r3
 800451c:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 800451e:	4bb3      	ldr	r3, [pc, #716]	; (80047ec <main+0x1f78>)
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	000c      	movs	r4, r1
 8004524:	193a      	adds	r2, r7, r4
 8004526:	1953      	adds	r3, r2, r5
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	b299      	uxth	r1, r3
 800452c:	193a      	adds	r2, r7, r4
 800452e:	1993      	adds	r3, r2, r6
 8004530:	881a      	ldrh	r2, [r3, #0]
 8004532:	2364      	movs	r3, #100	; 0x64
 8004534:	9302      	str	r3, [sp, #8]
 8004536:	2301      	movs	r3, #1
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	2309      	movs	r3, #9
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	2302      	movs	r3, #2
 8004542:	f002 ff73 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004548:	0018      	movs	r0, r3
 800454a:	f002 f8d3 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 800454e:	0021      	movs	r1, r4
 8004550:	187a      	adds	r2, r7, r1
 8004552:	1993      	adds	r3, r2, r6
 8004554:	881a      	ldrh	r2, [r3, #0]
 8004556:	1878      	adds	r0, r7, r1
 8004558:	1983      	adds	r3, r0, r6
 800455a:	3201      	adds	r2, #1
 800455c:	801a      	strh	r2, [r3, #0]
	    				b0 = timestamp[4];
 800455e:	4ba5      	ldr	r3, [pc, #660]	; (80047f4 <main+0x1f80>)
 8004560:	791a      	ldrb	r2, [r3, #4]
 8004562:	2309      	movs	r3, #9
 8004564:	18fb      	adds	r3, r7, r3
 8004566:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004568:	4ba0      	ldr	r3, [pc, #640]	; (80047ec <main+0x1f78>)
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	000c      	movs	r4, r1
 800456e:	193a      	adds	r2, r7, r4
 8004570:	1953      	adds	r3, r2, r5
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	b299      	uxth	r1, r3
 8004576:	193a      	adds	r2, r7, r4
 8004578:	1993      	adds	r3, r2, r6
 800457a:	881a      	ldrh	r2, [r3, #0]
 800457c:	2364      	movs	r3, #100	; 0x64
 800457e:	9302      	str	r3, [sp, #8]
 8004580:	2301      	movs	r3, #1
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	2309      	movs	r3, #9
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	2302      	movs	r3, #2
 800458c:	f002 ff4e 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004592:	0018      	movs	r0, r3
 8004594:	f002 f8ae 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8004598:	0021      	movs	r1, r4
 800459a:	187a      	adds	r2, r7, r1
 800459c:	1993      	adds	r3, r2, r6
 800459e:	881a      	ldrh	r2, [r3, #0]
 80045a0:	1878      	adds	r0, r7, r1
 80045a2:	1983      	adds	r3, r0, r6
 80045a4:	3201      	adds	r2, #1
 80045a6:	801a      	strh	r2, [r3, #0]
	    				//b0 = ' ';
	    				//HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
	    				//HAL_Delay(write_delay);
	    				//eeprom_debug_address++;
	    				b0 = timestamp[6];
 80045a8:	4b92      	ldr	r3, [pc, #584]	; (80047f4 <main+0x1f80>)
 80045aa:	799a      	ldrb	r2, [r3, #6]
 80045ac:	2309      	movs	r3, #9
 80045ae:	18fb      	adds	r3, r7, r3
 80045b0:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80045b2:	4b8e      	ldr	r3, [pc, #568]	; (80047ec <main+0x1f78>)
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	000c      	movs	r4, r1
 80045b8:	193a      	adds	r2, r7, r4
 80045ba:	1953      	adds	r3, r2, r5
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	b299      	uxth	r1, r3
 80045c0:	193a      	adds	r2, r7, r4
 80045c2:	1993      	adds	r3, r2, r6
 80045c4:	881a      	ldrh	r2, [r3, #0]
 80045c6:	2364      	movs	r3, #100	; 0x64
 80045c8:	9302      	str	r3, [sp, #8]
 80045ca:	2301      	movs	r3, #1
 80045cc:	9301      	str	r3, [sp, #4]
 80045ce:	2309      	movs	r3, #9
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	2302      	movs	r3, #2
 80045d6:	f002 ff29 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 80045da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045dc:	0018      	movs	r0, r3
 80045de:	f002 f889 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 80045e2:	0021      	movs	r1, r4
 80045e4:	187a      	adds	r2, r7, r1
 80045e6:	1993      	adds	r3, r2, r6
 80045e8:	881a      	ldrh	r2, [r3, #0]
 80045ea:	1878      	adds	r0, r7, r1
 80045ec:	1983      	adds	r3, r0, r6
 80045ee:	3201      	adds	r2, #1
 80045f0:	801a      	strh	r2, [r3, #0]
	    				b0 = timestamp[7];
 80045f2:	4b80      	ldr	r3, [pc, #512]	; (80047f4 <main+0x1f80>)
 80045f4:	79da      	ldrb	r2, [r3, #7]
 80045f6:	2309      	movs	r3, #9
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80045fc:	4b7b      	ldr	r3, [pc, #492]	; (80047ec <main+0x1f78>)
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	000c      	movs	r4, r1
 8004602:	193a      	adds	r2, r7, r4
 8004604:	1953      	adds	r3, r2, r5
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	b299      	uxth	r1, r3
 800460a:	193a      	adds	r2, r7, r4
 800460c:	1993      	adds	r3, r2, r6
 800460e:	881a      	ldrh	r2, [r3, #0]
 8004610:	2364      	movs	r3, #100	; 0x64
 8004612:	9302      	str	r3, [sp, #8]
 8004614:	2301      	movs	r3, #1
 8004616:	9301      	str	r3, [sp, #4]
 8004618:	2309      	movs	r3, #9
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	2302      	movs	r3, #2
 8004620:	f002 ff04 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004626:	0018      	movs	r0, r3
 8004628:	f002 f864 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 800462c:	0021      	movs	r1, r4
 800462e:	187a      	adds	r2, r7, r1
 8004630:	1993      	adds	r3, r2, r6
 8004632:	881a      	ldrh	r2, [r3, #0]
 8004634:	1878      	adds	r0, r7, r1
 8004636:	1983      	adds	r3, r0, r6
 8004638:	3201      	adds	r2, #1
 800463a:	801a      	strh	r2, [r3, #0]
	    				b0 = timestamp[9];
 800463c:	4b6d      	ldr	r3, [pc, #436]	; (80047f4 <main+0x1f80>)
 800463e:	7a5a      	ldrb	r2, [r3, #9]
 8004640:	2309      	movs	r3, #9
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004646:	4b69      	ldr	r3, [pc, #420]	; (80047ec <main+0x1f78>)
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	000c      	movs	r4, r1
 800464c:	193a      	adds	r2, r7, r4
 800464e:	1953      	adds	r3, r2, r5
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	b299      	uxth	r1, r3
 8004654:	193a      	adds	r2, r7, r4
 8004656:	1993      	adds	r3, r2, r6
 8004658:	881a      	ldrh	r2, [r3, #0]
 800465a:	2364      	movs	r3, #100	; 0x64
 800465c:	9302      	str	r3, [sp, #8]
 800465e:	2301      	movs	r3, #1
 8004660:	9301      	str	r3, [sp, #4]
 8004662:	2309      	movs	r3, #9
 8004664:	18fb      	adds	r3, r7, r3
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	2302      	movs	r3, #2
 800466a:	f002 fedf 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 800466e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004670:	0018      	movs	r0, r3
 8004672:	f002 f83f 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8004676:	0021      	movs	r1, r4
 8004678:	187a      	adds	r2, r7, r1
 800467a:	1993      	adds	r3, r2, r6
 800467c:	881a      	ldrh	r2, [r3, #0]
 800467e:	1878      	adds	r0, r7, r1
 8004680:	1983      	adds	r3, r0, r6
 8004682:	3201      	adds	r2, #1
 8004684:	801a      	strh	r2, [r3, #0]
	    				b0 = timestamp[10];
 8004686:	4b5b      	ldr	r3, [pc, #364]	; (80047f4 <main+0x1f80>)
 8004688:	7a9a      	ldrb	r2, [r3, #10]
 800468a:	2309      	movs	r3, #9
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004690:	4b56      	ldr	r3, [pc, #344]	; (80047ec <main+0x1f78>)
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	000c      	movs	r4, r1
 8004696:	193a      	adds	r2, r7, r4
 8004698:	1953      	adds	r3, r2, r5
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	b299      	uxth	r1, r3
 800469e:	193a      	adds	r2, r7, r4
 80046a0:	1993      	adds	r3, r2, r6
 80046a2:	881a      	ldrh	r2, [r3, #0]
 80046a4:	2364      	movs	r3, #100	; 0x64
 80046a6:	9302      	str	r3, [sp, #8]
 80046a8:	2301      	movs	r3, #1
 80046aa:	9301      	str	r3, [sp, #4]
 80046ac:	2309      	movs	r3, #9
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	2302      	movs	r3, #2
 80046b4:	f002 feba 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 80046b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ba:	0018      	movs	r0, r3
 80046bc:	f002 f81a 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 80046c0:	0021      	movs	r1, r4
 80046c2:	187a      	adds	r2, r7, r1
 80046c4:	1993      	adds	r3, r2, r6
 80046c6:	881a      	ldrh	r2, [r3, #0]
 80046c8:	1878      	adds	r0, r7, r1
 80046ca:	1983      	adds	r3, r0, r6
 80046cc:	3201      	adds	r2, #1
 80046ce:	801a      	strh	r2, [r3, #0]
	    				//eeprom_debug_address++;
                                                                                                                                                                      
                                                                                                                                                                      
                                                                                                                                                                      
	    				// write first depth record
	    	        	sprintf(message, "%02d.%01d", (int)depth, (int)((depth - (int)depth)*10.0));
 80046d0:	2490      	movs	r4, #144	; 0x90
 80046d2:	1879      	adds	r1, r7, r1
 80046d4:	190b      	adds	r3, r1, r4
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	6859      	ldr	r1, [r3, #4]
 80046da:	f7fd fcb1 	bl	8002040 <__aeabi_d2iz>
 80046de:	0005      	movs	r5, r0
 80046e0:	2108      	movs	r1, #8
 80046e2:	1879      	adds	r1, r7, r1
 80046e4:	190b      	adds	r3, r1, r4
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	6859      	ldr	r1, [r3, #4]
 80046ea:	f7fd fca9 	bl	8002040 <__aeabi_d2iz>
 80046ee:	0003      	movs	r3, r0
 80046f0:	0018      	movs	r0, r3
 80046f2:	f7fd fcdb 	bl	80020ac <__aeabi_i2d>
 80046f6:	0003      	movs	r3, r0
 80046f8:	000c      	movs	r4, r1
 80046fa:	001a      	movs	r2, r3
 80046fc:	0023      	movs	r3, r4
 80046fe:	2490      	movs	r4, #144	; 0x90
 8004700:	2108      	movs	r1, #8
 8004702:	1879      	adds	r1, r7, r1
 8004704:	1909      	adds	r1, r1, r4
 8004706:	6808      	ldr	r0, [r1, #0]
 8004708:	6849      	ldr	r1, [r1, #4]
 800470a:	f7fd f951 	bl	80019b0 <__aeabi_dsub>
 800470e:	0003      	movs	r3, r0
 8004710:	000c      	movs	r4, r1
 8004712:	0018      	movs	r0, r3
 8004714:	0021      	movs	r1, r4
 8004716:	2200      	movs	r2, #0
 8004718:	4b37      	ldr	r3, [pc, #220]	; (80047f8 <main+0x1f84>)
 800471a:	f7fc fed7 	bl	80014cc <__aeabi_dmul>
 800471e:	0003      	movs	r3, r0
 8004720:	000c      	movs	r4, r1
 8004722:	0018      	movs	r0, r3
 8004724:	0021      	movs	r1, r4
 8004726:	f7fd fc8b 	bl	8002040 <__aeabi_d2iz>
 800472a:	0003      	movs	r3, r0
 800472c:	4933      	ldr	r1, [pc, #204]	; (80047fc <main+0x1f88>)
 800472e:	4834      	ldr	r0, [pc, #208]	; (8004800 <main+0x1f8c>)
 8004730:	002a      	movs	r2, r5
 8004732:	f005 fb6f 	bl	8009e14 <siprintf>
	    	       		sprintf(temperature_message, "%02d", (int)(actual_temperature/100.0));
 8004736:	2200      	movs	r2, #0
 8004738:	4b32      	ldr	r3, [pc, #200]	; (8004804 <main+0x1f90>)
 800473a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800473c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800473e:	f7fc fabb 	bl	8000cb8 <__aeabi_ddiv>
 8004742:	0003      	movs	r3, r0
 8004744:	000c      	movs	r4, r1
 8004746:	0018      	movs	r0, r3
 8004748:	0021      	movs	r1, r4
 800474a:	f7fd fc79 	bl	8002040 <__aeabi_d2iz>
 800474e:	0002      	movs	r2, r0
 8004750:	492d      	ldr	r1, [pc, #180]	; (8004808 <main+0x1f94>)
 8004752:	4b2e      	ldr	r3, [pc, #184]	; (800480c <main+0x1f98>)
 8004754:	0018      	movs	r0, r3
 8004756:	f005 fb5d 	bl	8009e14 <siprintf>
	    				b0 = message[0];
 800475a:	4b29      	ldr	r3, [pc, #164]	; (8004800 <main+0x1f8c>)
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	2309      	movs	r3, #9
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004764:	4b21      	ldr	r3, [pc, #132]	; (80047ec <main+0x1f78>)
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	25cf      	movs	r5, #207	; 0xcf
 800476a:	2208      	movs	r2, #8
 800476c:	18b9      	adds	r1, r7, r2
 800476e:	194b      	adds	r3, r1, r5
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	b299      	uxth	r1, r3
 8004774:	0034      	movs	r4, r6
 8004776:	0016      	movs	r6, r2
 8004778:	19ba      	adds	r2, r7, r6
 800477a:	1913      	adds	r3, r2, r4
 800477c:	881a      	ldrh	r2, [r3, #0]
 800477e:	2364      	movs	r3, #100	; 0x64
 8004780:	9302      	str	r3, [sp, #8]
 8004782:	2301      	movs	r3, #1
 8004784:	9301      	str	r3, [sp, #4]
 8004786:	2309      	movs	r3, #9
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	2302      	movs	r3, #2
 800478e:	f002 fe4d 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004794:	0018      	movs	r0, r3
 8004796:	f001 ffad 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 800479a:	0031      	movs	r1, r6
 800479c:	187a      	adds	r2, r7, r1
 800479e:	1913      	adds	r3, r2, r4
 80047a0:	881a      	ldrh	r2, [r3, #0]
 80047a2:	1878      	adds	r0, r7, r1
 80047a4:	1903      	adds	r3, r0, r4
 80047a6:	3201      	adds	r2, #1
 80047a8:	801a      	strh	r2, [r3, #0]
	    				b0 = message[1];
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <main+0x1f8c>)
 80047ac:	785a      	ldrb	r2, [r3, #1]
 80047ae:	2309      	movs	r3, #9
 80047b0:	18fb      	adds	r3, r7, r3
 80047b2:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80047b4:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <main+0x1f78>)
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	000e      	movs	r6, r1
 80047ba:	19ba      	adds	r2, r7, r6
 80047bc:	1953      	adds	r3, r2, r5
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	b299      	uxth	r1, r3
 80047c2:	19ba      	adds	r2, r7, r6
 80047c4:	1913      	adds	r3, r2, r4
 80047c6:	881a      	ldrh	r2, [r3, #0]
 80047c8:	2364      	movs	r3, #100	; 0x64
 80047ca:	9302      	str	r3, [sp, #8]
 80047cc:	2301      	movs	r3, #1
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	2309      	movs	r3, #9
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	2302      	movs	r3, #2
 80047d8:	f002 fe28 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 80047dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047de:	0018      	movs	r0, r3
 80047e0:	f001 ff88 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 80047e4:	0031      	movs	r1, r6
 80047e6:	187a      	adds	r2, r7, r1
 80047e8:	1913      	adds	r3, r2, r4
 80047ea:	e011      	b.n	8004810 <main+0x1f9c>
 80047ec:	20000024 	.word	0x20000024
 80047f0:	0800b224 	.word	0x0800b224
 80047f4:	20000274 	.word	0x20000274
 80047f8:	40240000 	.word	0x40240000
 80047fc:	0800b280 	.word	0x0800b280
 8004800:	20000234 	.word	0x20000234
 8004804:	40590000 	.word	0x40590000
 8004808:	0800b28c 	.word	0x0800b28c
 800480c:	200002b4 	.word	0x200002b4
 8004810:	881a      	ldrh	r2, [r3, #0]
 8004812:	1878      	adds	r0, r7, r1
 8004814:	1903      	adds	r3, r0, r4
 8004816:	3201      	adds	r2, #1
 8004818:	801a      	strh	r2, [r3, #0]
	    				//b0 = message[2];
	    				//HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
	    				//HAL_Delay(write_delay);
	    				//eeprom_debug_address++;
	    				b0 = message[3];
 800481a:	4b60      	ldr	r3, [pc, #384]	; (800499c <main+0x2128>)
 800481c:	78da      	ldrb	r2, [r3, #3]
 800481e:	2309      	movs	r3, #9
 8004820:	18fb      	adds	r3, r7, r3
 8004822:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004824:	4b5e      	ldr	r3, [pc, #376]	; (80049a0 <main+0x212c>)
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	000e      	movs	r6, r1
 800482a:	19ba      	adds	r2, r7, r6
 800482c:	1953      	adds	r3, r2, r5
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	b299      	uxth	r1, r3
 8004832:	19ba      	adds	r2, r7, r6
 8004834:	1913      	adds	r3, r2, r4
 8004836:	881a      	ldrh	r2, [r3, #0]
 8004838:	2364      	movs	r3, #100	; 0x64
 800483a:	9302      	str	r3, [sp, #8]
 800483c:	2301      	movs	r3, #1
 800483e:	9301      	str	r3, [sp, #4]
 8004840:	2309      	movs	r3, #9
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	2302      	movs	r3, #2
 8004848:	f002 fdf0 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 800484c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800484e:	0018      	movs	r0, r3
 8004850:	f001 ff50 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8004854:	0031      	movs	r1, r6
 8004856:	187a      	adds	r2, r7, r1
 8004858:	1913      	adds	r3, r2, r4
 800485a:	881a      	ldrh	r2, [r3, #0]
 800485c:	1878      	adds	r0, r7, r1
 800485e:	1903      	adds	r3, r0, r4
 8004860:	3201      	adds	r2, #1
 8004862:	801a      	strh	r2, [r3, #0]
	    				b0 = temperature_message[0];
 8004864:	4b4f      	ldr	r3, [pc, #316]	; (80049a4 <main+0x2130>)
 8004866:	781a      	ldrb	r2, [r3, #0]
 8004868:	2309      	movs	r3, #9
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 800486e:	4b4c      	ldr	r3, [pc, #304]	; (80049a0 <main+0x212c>)
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	000e      	movs	r6, r1
 8004874:	19ba      	adds	r2, r7, r6
 8004876:	1953      	adds	r3, r2, r5
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	b299      	uxth	r1, r3
 800487c:	19ba      	adds	r2, r7, r6
 800487e:	1913      	adds	r3, r2, r4
 8004880:	881a      	ldrh	r2, [r3, #0]
 8004882:	2364      	movs	r3, #100	; 0x64
 8004884:	9302      	str	r3, [sp, #8]
 8004886:	2301      	movs	r3, #1
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	2309      	movs	r3, #9
 800488c:	18fb      	adds	r3, r7, r3
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	2302      	movs	r3, #2
 8004892:	f002 fdcb 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004896:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004898:	0018      	movs	r0, r3
 800489a:	f001 ff2b 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 800489e:	0031      	movs	r1, r6
 80048a0:	187a      	adds	r2, r7, r1
 80048a2:	1913      	adds	r3, r2, r4
 80048a4:	881a      	ldrh	r2, [r3, #0]
 80048a6:	1878      	adds	r0, r7, r1
 80048a8:	1903      	adds	r3, r0, r4
 80048aa:	3201      	adds	r2, #1
 80048ac:	801a      	strh	r2, [r3, #0]
	    				b0 = temperature_message[1];
 80048ae:	4b3d      	ldr	r3, [pc, #244]	; (80049a4 <main+0x2130>)
 80048b0:	785a      	ldrb	r2, [r3, #1]
 80048b2:	2309      	movs	r3, #9
 80048b4:	18fb      	adds	r3, r7, r3
 80048b6:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80048b8:	4b39      	ldr	r3, [pc, #228]	; (80049a0 <main+0x212c>)
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	000e      	movs	r6, r1
 80048be:	19ba      	adds	r2, r7, r6
 80048c0:	1953      	adds	r3, r2, r5
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	b299      	uxth	r1, r3
 80048c6:	19ba      	adds	r2, r7, r6
 80048c8:	1913      	adds	r3, r2, r4
 80048ca:	881a      	ldrh	r2, [r3, #0]
 80048cc:	2364      	movs	r3, #100	; 0x64
 80048ce:	9302      	str	r3, [sp, #8]
 80048d0:	2301      	movs	r3, #1
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	2309      	movs	r3, #9
 80048d6:	18fb      	adds	r3, r7, r3
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	2302      	movs	r3, #2
 80048dc:	f002 fda6 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 80048e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048e2:	0018      	movs	r0, r3
 80048e4:	f001 ff06 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 80048e8:	0031      	movs	r1, r6
 80048ea:	187a      	adds	r2, r7, r1
 80048ec:	1913      	adds	r3, r2, r4
 80048ee:	881a      	ldrh	r2, [r3, #0]
 80048f0:	1878      	adds	r0, r7, r1
 80048f2:	1903      	adds	r3, r0, r4
 80048f4:	3201      	adds	r2, #1
 80048f6:	801a      	strh	r2, [r3, #0]
	    				b0 = 0;
 80048f8:	2609      	movs	r6, #9
 80048fa:	19bb      	adds	r3, r7, r6
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004900:	4b27      	ldr	r3, [pc, #156]	; (80049a0 <main+0x212c>)
 8004902:	6818      	ldr	r0, [r3, #0]
 8004904:	000e      	movs	r6, r1
 8004906:	19ba      	adds	r2, r7, r6
 8004908:	1953      	adds	r3, r2, r5
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	b299      	uxth	r1, r3
 800490e:	19ba      	adds	r2, r7, r6
 8004910:	1913      	adds	r3, r2, r4
 8004912:	881a      	ldrh	r2, [r3, #0]
 8004914:	2364      	movs	r3, #100	; 0x64
 8004916:	9302      	str	r3, [sp, #8]
 8004918:	2301      	movs	r3, #1
 800491a:	9301      	str	r3, [sp, #4]
 800491c:	2309      	movs	r3, #9
 800491e:	18fb      	adds	r3, r7, r3
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	2302      	movs	r3, #2
 8004924:	f002 fd82 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800492a:	0018      	movs	r0, r3
 800492c:	f001 fee2 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8004930:	0031      	movs	r1, r6
 8004932:	187a      	adds	r2, r7, r1
 8004934:	1913      	adds	r3, r2, r4
 8004936:	881a      	ldrh	r2, [r3, #0]
 8004938:	1878      	adds	r0, r7, r1
 800493a:	1903      	adds	r3, r0, r4
 800493c:	3201      	adds	r2, #1
 800493e:	801a      	strh	r2, [r3, #0]
	    				b0 = 0;
 8004940:	2609      	movs	r6, #9
 8004942:	19bb      	adds	r3, r7, r6
 8004944:	2200      	movs	r2, #0
 8004946:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004948:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <main+0x212c>)
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	000a      	movs	r2, r1
 800494e:	187b      	adds	r3, r7, r1
 8004950:	195b      	adds	r3, r3, r5
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	b299      	uxth	r1, r3
 8004956:	0015      	movs	r5, r2
 8004958:	197b      	adds	r3, r7, r5
 800495a:	191b      	adds	r3, r3, r4
 800495c:	881a      	ldrh	r2, [r3, #0]
 800495e:	2364      	movs	r3, #100	; 0x64
 8004960:	9302      	str	r3, [sp, #8]
 8004962:	2301      	movs	r3, #1
 8004964:	9301      	str	r3, [sp, #4]
 8004966:	19bb      	adds	r3, r7, r6
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	2302      	movs	r3, #2
 800496c:	f002 fd5e 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004972:	0018      	movs	r0, r3
 8004974:	f001 febe 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address--;
 8004978:	197b      	adds	r3, r7, r5
 800497a:	191b      	adds	r3, r3, r4
 800497c:	881a      	ldrh	r2, [r3, #0]
 800497e:	197b      	adds	r3, r7, r5
 8004980:	191b      	adds	r3, r3, r4
 8004982:	3a01      	subs	r2, #1
 8004984:	801a      	strh	r2, [r3, #0]
	    				eeprom_number_of_records++;
 8004986:	22c8      	movs	r2, #200	; 0xc8
 8004988:	197b      	adds	r3, r7, r5
 800498a:	189b      	adds	r3, r3, r2
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3301      	adds	r3, #1
 8004990:	2108      	movs	r1, #8
 8004992:	468c      	mov	ip, r1
 8004994:	44bc      	add	ip, r7
 8004996:	4462      	add	r2, ip
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e14a      	b.n	8004c32 <main+0x23be>
 800499c:	20000234 	.word	0x20000234
 80049a0:	20000024 	.word	0x20000024
 80049a4:	200002b4 	.word	0x200002b4
	    			else
	    			{
	    				// there are depth records
                                                                                                                                                                      
	    				// write new record
	    				b0 = 0;
 80049a8:	2309      	movs	r3, #9
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address + 5, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80049b0:	4bb4      	ldr	r3, [pc, #720]	; (8004c84 <main+0x2410>)
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	25cf      	movs	r5, #207	; 0xcf
 80049b6:	2408      	movs	r4, #8
 80049b8:	193a      	adds	r2, r7, r4
 80049ba:	1953      	adds	r3, r2, r5
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	b299      	uxth	r1, r3
 80049c0:	26cc      	movs	r6, #204	; 0xcc
 80049c2:	193a      	adds	r2, r7, r4
 80049c4:	1993      	adds	r3, r2, r6
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	3305      	adds	r3, #5
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	2364      	movs	r3, #100	; 0x64
 80049ce:	9302      	str	r3, [sp, #8]
 80049d0:	2301      	movs	r3, #1
 80049d2:	9301      	str	r3, [sp, #4]
 80049d4:	2309      	movs	r3, #9
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	2302      	movs	r3, #2
 80049dc:	f002 fd26 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 80049e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049e2:	0018      	movs	r0, r3
 80049e4:	f001 fe86 	bl	80066f4 <HAL_Delay>
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address + 6, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80049e8:	4ba6      	ldr	r3, [pc, #664]	; (8004c84 <main+0x2410>)
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	193a      	adds	r2, r7, r4
 80049ee:	1953      	adds	r3, r2, r5
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	b299      	uxth	r1, r3
 80049f4:	193a      	adds	r2, r7, r4
 80049f6:	1993      	adds	r3, r2, r6
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	3306      	adds	r3, #6
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	2364      	movs	r3, #100	; 0x64
 8004a00:	9302      	str	r3, [sp, #8]
 8004a02:	2301      	movs	r3, #1
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	2309      	movs	r3, #9
 8004a08:	18fb      	adds	r3, r7, r3
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	f002 fd0d 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004a12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a14:	0018      	movs	r0, r3
 8004a16:	f001 fe6d 	bl	80066f4 <HAL_Delay>
	    				eeprom_number_of_records++;
 8004a1a:	22c8      	movs	r2, #200	; 0xc8
 8004a1c:	0021      	movs	r1, r4
 8004a1e:	1938      	adds	r0, r7, r4
 8004a20:	1883      	adds	r3, r0, r2
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	2008      	movs	r0, #8
 8004a28:	4684      	mov	ip, r0
 8004a2a:	44bc      	add	ip, r7
 8004a2c:	4462      	add	r2, ip
 8004a2e:	6013      	str	r3, [r2, #0]
	    	        	sprintf(message, "%02d.%01d", (int)depth, (int)((depth - (int)depth)*10.0));
 8004a30:	2490      	movs	r4, #144	; 0x90
 8004a32:	187a      	adds	r2, r7, r1
 8004a34:	1913      	adds	r3, r2, r4
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	6859      	ldr	r1, [r3, #4]
 8004a3a:	f7fd fb01 	bl	8002040 <__aeabi_d2iz>
 8004a3e:	0005      	movs	r5, r0
 8004a40:	2108      	movs	r1, #8
 8004a42:	187a      	adds	r2, r7, r1
 8004a44:	1913      	adds	r3, r2, r4
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	6859      	ldr	r1, [r3, #4]
 8004a4a:	f7fd faf9 	bl	8002040 <__aeabi_d2iz>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	0018      	movs	r0, r3
 8004a52:	f7fd fb2b 	bl	80020ac <__aeabi_i2d>
 8004a56:	0003      	movs	r3, r0
 8004a58:	000c      	movs	r4, r1
 8004a5a:	001a      	movs	r2, r3
 8004a5c:	0023      	movs	r3, r4
 8004a5e:	2490      	movs	r4, #144	; 0x90
 8004a60:	2108      	movs	r1, #8
 8004a62:	1878      	adds	r0, r7, r1
 8004a64:	1901      	adds	r1, r0, r4
 8004a66:	6808      	ldr	r0, [r1, #0]
 8004a68:	6849      	ldr	r1, [r1, #4]
 8004a6a:	f7fc ffa1 	bl	80019b0 <__aeabi_dsub>
 8004a6e:	0003      	movs	r3, r0
 8004a70:	000c      	movs	r4, r1
 8004a72:	0018      	movs	r0, r3
 8004a74:	0021      	movs	r1, r4
 8004a76:	2200      	movs	r2, #0
 8004a78:	4b83      	ldr	r3, [pc, #524]	; (8004c88 <main+0x2414>)
 8004a7a:	f7fc fd27 	bl	80014cc <__aeabi_dmul>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	000c      	movs	r4, r1
 8004a82:	0018      	movs	r0, r3
 8004a84:	0021      	movs	r1, r4
 8004a86:	f7fd fadb 	bl	8002040 <__aeabi_d2iz>
 8004a8a:	0003      	movs	r3, r0
 8004a8c:	497f      	ldr	r1, [pc, #508]	; (8004c8c <main+0x2418>)
 8004a8e:	4880      	ldr	r0, [pc, #512]	; (8004c90 <main+0x241c>)
 8004a90:	002a      	movs	r2, r5
 8004a92:	f005 f9bf 	bl	8009e14 <siprintf>
	    	       		sprintf(temperature_message, "%02d", (int)(actual_temperature/100.0));
 8004a96:	2200      	movs	r2, #0
 8004a98:	4b7e      	ldr	r3, [pc, #504]	; (8004c94 <main+0x2420>)
 8004a9a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004a9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a9e:	f7fc f90b 	bl	8000cb8 <__aeabi_ddiv>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	000c      	movs	r4, r1
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	0021      	movs	r1, r4
 8004aaa:	f7fd fac9 	bl	8002040 <__aeabi_d2iz>
 8004aae:	0002      	movs	r2, r0
 8004ab0:	4979      	ldr	r1, [pc, #484]	; (8004c98 <main+0x2424>)
 8004ab2:	4b7a      	ldr	r3, [pc, #488]	; (8004c9c <main+0x2428>)
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f005 f9ad 	bl	8009e14 <siprintf>
	    				b0 = message[0];
 8004aba:	4b75      	ldr	r3, [pc, #468]	; (8004c90 <main+0x241c>)
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	2309      	movs	r3, #9
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004ac4:	4b6f      	ldr	r3, [pc, #444]	; (8004c84 <main+0x2410>)
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	25cf      	movs	r5, #207	; 0xcf
 8004aca:	2208      	movs	r2, #8
 8004acc:	18b9      	adds	r1, r7, r2
 8004ace:	194b      	adds	r3, r1, r5
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	b299      	uxth	r1, r3
 8004ad4:	0034      	movs	r4, r6
 8004ad6:	0016      	movs	r6, r2
 8004ad8:	19ba      	adds	r2, r7, r6
 8004ada:	1913      	adds	r3, r2, r4
 8004adc:	881a      	ldrh	r2, [r3, #0]
 8004ade:	2364      	movs	r3, #100	; 0x64
 8004ae0:	9302      	str	r3, [sp, #8]
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	2309      	movs	r3, #9
 8004ae8:	18fb      	adds	r3, r7, r3
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	2302      	movs	r3, #2
 8004aee:	f002 fc9d 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004af2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004af4:	0018      	movs	r0, r3
 8004af6:	f001 fdfd 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8004afa:	0031      	movs	r1, r6
 8004afc:	187a      	adds	r2, r7, r1
 8004afe:	1913      	adds	r3, r2, r4
 8004b00:	881a      	ldrh	r2, [r3, #0]
 8004b02:	1878      	adds	r0, r7, r1
 8004b04:	1903      	adds	r3, r0, r4
 8004b06:	3201      	adds	r2, #1
 8004b08:	801a      	strh	r2, [r3, #0]
	    				b0 = message[1];
 8004b0a:	4b61      	ldr	r3, [pc, #388]	; (8004c90 <main+0x241c>)
 8004b0c:	785a      	ldrb	r2, [r3, #1]
 8004b0e:	2309      	movs	r3, #9
 8004b10:	18fb      	adds	r3, r7, r3
 8004b12:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004b14:	4b5b      	ldr	r3, [pc, #364]	; (8004c84 <main+0x2410>)
 8004b16:	6818      	ldr	r0, [r3, #0]
 8004b18:	000e      	movs	r6, r1
 8004b1a:	19ba      	adds	r2, r7, r6
 8004b1c:	1953      	adds	r3, r2, r5
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	b299      	uxth	r1, r3
 8004b22:	19ba      	adds	r2, r7, r6
 8004b24:	1913      	adds	r3, r2, r4
 8004b26:	881a      	ldrh	r2, [r3, #0]
 8004b28:	2364      	movs	r3, #100	; 0x64
 8004b2a:	9302      	str	r3, [sp, #8]
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	9301      	str	r3, [sp, #4]
 8004b30:	2309      	movs	r3, #9
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	2302      	movs	r3, #2
 8004b38:	f002 fc78 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f001 fdd8 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8004b44:	0031      	movs	r1, r6
 8004b46:	187a      	adds	r2, r7, r1
 8004b48:	1913      	adds	r3, r2, r4
 8004b4a:	881a      	ldrh	r2, [r3, #0]
 8004b4c:	1878      	adds	r0, r7, r1
 8004b4e:	1903      	adds	r3, r0, r4
 8004b50:	3201      	adds	r2, #1
 8004b52:	801a      	strh	r2, [r3, #0]
	    				//b0 = message[2];
	    				//HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
	    				//HAL_Delay(write_delay);
	    				//eeprom_debug_address++;
	    				b0 = message[3];
 8004b54:	4b4e      	ldr	r3, [pc, #312]	; (8004c90 <main+0x241c>)
 8004b56:	78da      	ldrb	r2, [r3, #3]
 8004b58:	2309      	movs	r3, #9
 8004b5a:	18fb      	adds	r3, r7, r3
 8004b5c:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004b5e:	4b49      	ldr	r3, [pc, #292]	; (8004c84 <main+0x2410>)
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	000e      	movs	r6, r1
 8004b64:	19ba      	adds	r2, r7, r6
 8004b66:	1953      	adds	r3, r2, r5
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	b299      	uxth	r1, r3
 8004b6c:	19ba      	adds	r2, r7, r6
 8004b6e:	1913      	adds	r3, r2, r4
 8004b70:	881a      	ldrh	r2, [r3, #0]
 8004b72:	2364      	movs	r3, #100	; 0x64
 8004b74:	9302      	str	r3, [sp, #8]
 8004b76:	2301      	movs	r3, #1
 8004b78:	9301      	str	r3, [sp, #4]
 8004b7a:	2309      	movs	r3, #9
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	2302      	movs	r3, #2
 8004b82:	f002 fc53 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f001 fdb3 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8004b8e:	0031      	movs	r1, r6
 8004b90:	187a      	adds	r2, r7, r1
 8004b92:	1913      	adds	r3, r2, r4
 8004b94:	881a      	ldrh	r2, [r3, #0]
 8004b96:	1878      	adds	r0, r7, r1
 8004b98:	1903      	adds	r3, r0, r4
 8004b9a:	3201      	adds	r2, #1
 8004b9c:	801a      	strh	r2, [r3, #0]
	    				b0 = temperature_message[0];
 8004b9e:	4b3f      	ldr	r3, [pc, #252]	; (8004c9c <main+0x2428>)
 8004ba0:	781a      	ldrb	r2, [r3, #0]
 8004ba2:	2609      	movs	r6, #9
 8004ba4:	19bb      	adds	r3, r7, r6
 8004ba6:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004ba8:	4b36      	ldr	r3, [pc, #216]	; (8004c84 <main+0x2410>)
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	000e      	movs	r6, r1
 8004bae:	19ba      	adds	r2, r7, r6
 8004bb0:	1953      	adds	r3, r2, r5
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	b299      	uxth	r1, r3
 8004bb6:	19ba      	adds	r2, r7, r6
 8004bb8:	1913      	adds	r3, r2, r4
 8004bba:	881a      	ldrh	r2, [r3, #0]
 8004bbc:	2364      	movs	r3, #100	; 0x64
 8004bbe:	9302      	str	r3, [sp, #8]
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	9301      	str	r3, [sp, #4]
 8004bc4:	2309      	movs	r3, #9
 8004bc6:	18fb      	adds	r3, r7, r3
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	2302      	movs	r3, #2
 8004bcc:	f002 fc2e 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f001 fd8e 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8004bd8:	0031      	movs	r1, r6
 8004bda:	187a      	adds	r2, r7, r1
 8004bdc:	1913      	adds	r3, r2, r4
 8004bde:	881a      	ldrh	r2, [r3, #0]
 8004be0:	1878      	adds	r0, r7, r1
 8004be2:	1903      	adds	r3, r0, r4
 8004be4:	3201      	adds	r2, #1
 8004be6:	801a      	strh	r2, [r3, #0]
	    				b0 = temperature_message[1];
 8004be8:	4b2c      	ldr	r3, [pc, #176]	; (8004c9c <main+0x2428>)
 8004bea:	785a      	ldrb	r2, [r3, #1]
 8004bec:	2609      	movs	r6, #9
 8004bee:	19bb      	adds	r3, r7, r6
 8004bf0:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004bf2:	4b24      	ldr	r3, [pc, #144]	; (8004c84 <main+0x2410>)
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	000a      	movs	r2, r1
 8004bf8:	187b      	adds	r3, r7, r1
 8004bfa:	195b      	adds	r3, r3, r5
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	b299      	uxth	r1, r3
 8004c00:	0015      	movs	r5, r2
 8004c02:	197b      	adds	r3, r7, r5
 8004c04:	191b      	adds	r3, r3, r4
 8004c06:	881a      	ldrh	r2, [r3, #0]
 8004c08:	2364      	movs	r3, #100	; 0x64
 8004c0a:	9302      	str	r3, [sp, #8]
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	19bb      	adds	r3, r7, r6
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	2302      	movs	r3, #2
 8004c16:	f002 fc09 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004c1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f001 fd69 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8004c22:	0029      	movs	r1, r5
 8004c24:	187b      	adds	r3, r7, r1
 8004c26:	191b      	adds	r3, r3, r4
 8004c28:	881a      	ldrh	r2, [r3, #0]
 8004c2a:	187b      	adds	r3, r7, r1
 8004c2c:	191b      	adds	r3, r3, r4
 8004c2e:	3201      	adds	r2, #1
 8004c30:	801a      	strh	r2, [r3, #0]
                                                                                                                                                                      
                                                                                                                                                                      
                                                                                                                                                                      
	    			//--------------------------------------------------------------------------
                                                                                                                                                                      
	    			if((actuator_counter > 0) && (actuator_counter < 100))
 8004c32:	23c0      	movs	r3, #192	; 0xc0
 8004c34:	2208      	movs	r2, #8
 8004c36:	4694      	mov	ip, r2
 8004c38:	44bc      	add	ip, r7
 8004c3a:	4463      	add	r3, ip
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	dd39      	ble.n	8004cb6 <main+0x2442>
 8004c42:	23c0      	movs	r3, #192	; 0xc0
 8004c44:	2208      	movs	r2, #8
 8004c46:	4694      	mov	ip, r2
 8004c48:	44bc      	add	ip, r7
 8004c4a:	4463      	add	r3, ip
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b63      	cmp	r3, #99	; 0x63
 8004c50:	dc31      	bgt.n	8004cb6 <main+0x2442>
	    			{
	    				if(actuator_counter >= 21)
 8004c52:	23c0      	movs	r3, #192	; 0xc0
 8004c54:	2208      	movs	r2, #8
 8004c56:	4694      	mov	ip, r2
 8004c58:	44bc      	add	ip, r7
 8004c5a:	4463      	add	r3, ip
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b14      	cmp	r3, #20
 8004c60:	dd1e      	ble.n	8004ca0 <main+0x242c>
	    				{
	    					// switch off actuators
  	    					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);// turn actuators off
 8004c62:	23c0      	movs	r3, #192	; 0xc0
 8004c64:	0159      	lsls	r1, r3, #5
 8004c66:	23a0      	movs	r3, #160	; 0xa0
 8004c68:	05db      	lsls	r3, r3, #23
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f002 fb29 	bl	80072c4 <HAL_GPIO_WritePin>
	    					actuator_counter = 100;
 8004c72:	2364      	movs	r3, #100	; 0x64
 8004c74:	22c0      	movs	r2, #192	; 0xc0
 8004c76:	2108      	movs	r1, #8
 8004c78:	468c      	mov	ip, r1
 8004c7a:	44bc      	add	ip, r7
 8004c7c:	4462      	add	r2, ip
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	e019      	b.n	8004cb6 <main+0x2442>
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	20000024 	.word	0x20000024
 8004c88:	40240000 	.word	0x40240000
 8004c8c:	0800b280 	.word	0x0800b280
 8004c90:	20000234 	.word	0x20000234
 8004c94:	40590000 	.word	0x40590000
 8004c98:	0800b28c 	.word	0x0800b28c
 8004c9c:	200002b4 	.word	0x200002b4
	    				}
	    				else
	    				{
	    					actuator_counter++;
 8004ca0:	22c0      	movs	r2, #192	; 0xc0
 8004ca2:	2308      	movs	r3, #8
 8004ca4:	18fb      	adds	r3, r7, r3
 8004ca6:	189b      	adds	r3, r3, r2
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3301      	adds	r3, #1
 8004cac:	2108      	movs	r1, #8
 8004cae:	468c      	mov	ip, r1
 8004cb0:	44bc      	add	ip, r7
 8004cb2:	4462      	add	r2, ip
 8004cb4:	6013      	str	r3, [r2, #0]
	    				}
	    			}
                                                                                                                                                                      
                                                                                                                                                                      
	    			if((depth >= (depth_switch_get_current_depth())) && actuator_counter == 0)
 8004cb6:	f7fd fc1b 	bl	80024f0 <depth_switch_get_current_depth>
 8004cba:	0003      	movs	r3, r0
 8004cbc:	000c      	movs	r4, r1
 8004cbe:	001a      	movs	r2, r3
 8004cc0:	0023      	movs	r3, r4
 8004cc2:	2190      	movs	r1, #144	; 0x90
 8004cc4:	2008      	movs	r0, #8
 8004cc6:	4684      	mov	ip, r0
 8004cc8:	44bc      	add	ip, r7
 8004cca:	4461      	add	r1, ip
 8004ccc:	6808      	ldr	r0, [r1, #0]
 8004cce:	6849      	ldr	r1, [r1, #4]
 8004cd0:	f7fb fbcc 	bl	800046c <__aeabi_dcmpge>
 8004cd4:	1e03      	subs	r3, r0, #0
 8004cd6:	d100      	bne.n	8004cda <main+0x2466>
 8004cd8:	e24a      	b.n	8005170 <main+0x28fc>
 8004cda:	23c0      	movs	r3, #192	; 0xc0
 8004cdc:	2208      	movs	r2, #8
 8004cde:	4694      	mov	ip, r2
 8004ce0:	44bc      	add	ip, r7
 8004ce2:	4463      	add	r3, ip
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <main+0x247a>
 8004cea:	f7ff f921 	bl	8003f30 <main+0x16bc>
	    			{
                                                                                                                                                                      
	    				actuator_counter++;
 8004cee:	22c0      	movs	r2, #192	; 0xc0
 8004cf0:	2408      	movs	r4, #8
 8004cf2:	193b      	adds	r3, r7, r4
 8004cf4:	189b      	adds	r3, r3, r2
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	2108      	movs	r1, #8
 8004cfc:	468c      	mov	ip, r1
 8004cfe:	44bc      	add	ip, r7
 8004d00:	4462      	add	r2, ip
 8004d02:	6013      	str	r3, [r2, #0]
	    				// switch on actuators
  	    				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_SET);// turn actuators on
 8004d04:	23c0      	movs	r3, #192	; 0xc0
 8004d06:	0159      	lsls	r1, r3, #5
 8004d08:	23a0      	movs	r3, #160	; 0xa0
 8004d0a:	05db      	lsls	r3, r3, #23
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f002 fad8 	bl	80072c4 <HAL_GPIO_WritePin>
                                                                                                                                                                      
	    				// switch on signal leds
  	    				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);// turn leds off
 8004d14:	4bf2      	ldr	r3, [pc, #968]	; (80050e0 <main+0x286c>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	210f      	movs	r1, #15
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	f002 fad2 	bl	80072c4 <HAL_GPIO_WritePin>
                                                                                                                                                                      
                                                                                                                                                                      
	    				// save info about activation conditions (time, depth, etc)
	    				ssd1306_Fill(Black);
 8004d20:	2000      	movs	r0, #0
 8004d22:	f001 f857 	bl	8005dd4 <ssd1306_Fill>
  	    	        	ssd1306_SetCursor(0,0);
 8004d26:	2100      	movs	r1, #0
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f001 f9e3 	bl	80060f4 <ssd1306_SetCursor>
	    	        	sprintf(timestamp, "%02d:%02d %02d.%02d", hours, minutes, date, month);
 8004d2e:	230d      	movs	r3, #13
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	001c      	movs	r4, r3
 8004d36:	230e      	movs	r3, #14
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	001d      	movs	r5, r3
 8004d3e:	230c      	movs	r3, #12
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	001a      	movs	r2, r3
 8004d46:	230b      	movs	r3, #11
 8004d48:	18fb      	adds	r3, r7, r3
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	49e5      	ldr	r1, [pc, #916]	; (80050e4 <main+0x2870>)
 8004d4e:	48e6      	ldr	r0, [pc, #920]	; (80050e8 <main+0x2874>)
 8004d50:	9301      	str	r3, [sp, #4]
 8004d52:	9200      	str	r2, [sp, #0]
 8004d54:	002b      	movs	r3, r5
 8004d56:	0022      	movs	r2, r4
 8004d58:	f005 f85c 	bl	8009e14 <siprintf>
	    	        	//sprintf(timestamp, "timestamp");
  	    	        	ssd1306_WriteString(timestamp, Font_11x18, White);
 8004d5c:	4ae3      	ldr	r2, [pc, #908]	; (80050ec <main+0x2878>)
 8004d5e:	48e2      	ldr	r0, [pc, #904]	; (80050e8 <main+0x2874>)
 8004d60:	2301      	movs	r3, #1
 8004d62:	6811      	ldr	r1, [r2, #0]
 8004d64:	6852      	ldr	r2, [r2, #4]
 8004d66:	f001 f99b 	bl	80060a0 <ssd1306_WriteString>
  	    	        	ssd1306_SetCursor(0,22);
 8004d6a:	2116      	movs	r1, #22
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	f001 f9c1 	bl	80060f4 <ssd1306_SetCursor>
	    	        	sprintf(message, ">>>>> %02dm", (int)depth);
 8004d72:	2690      	movs	r6, #144	; 0x90
 8004d74:	2408      	movs	r4, #8
 8004d76:	193b      	adds	r3, r7, r4
 8004d78:	199b      	adds	r3, r3, r6
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	6859      	ldr	r1, [r3, #4]
 8004d7e:	f7fd f95f 	bl	8002040 <__aeabi_d2iz>
 8004d82:	0002      	movs	r2, r0
 8004d84:	49da      	ldr	r1, [pc, #872]	; (80050f0 <main+0x287c>)
 8004d86:	4bdb      	ldr	r3, [pc, #876]	; (80050f4 <main+0x2880>)
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f005 f843 	bl	8009e14 <siprintf>
  	    	        	ssd1306_WriteString(message, Font_11x18, White);
 8004d8e:	4ad7      	ldr	r2, [pc, #860]	; (80050ec <main+0x2878>)
 8004d90:	48d8      	ldr	r0, [pc, #864]	; (80050f4 <main+0x2880>)
 8004d92:	2301      	movs	r3, #1
 8004d94:	6811      	ldr	r1, [r2, #0]
 8004d96:	6852      	ldr	r2, [r2, #4]
 8004d98:	f001 f982 	bl	80060a0 <ssd1306_WriteString>
  	    	        	//ssd1306_SetCursor(0,44);
	    	        	//sprintf(message, "activated!!!");
  	    	        	//ssd1306_WriteString(message, Font_11x18, White);
  	    	        	ssd1306_UpdateScreen();   
 8004d9c:	f001 f840 	bl	8005e20 <ssd1306_UpdateScreen>
	    				HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
	    				*/
                                                                                                                                                                      
	    				// write depth of activation 
	    	        	//sprintf(message, "%02d", (int)depth);
	    	        	sprintf(message, "%02d.%01d", (int)depth, (int)((depth - (int)depth)*10.0));
 8004da0:	193b      	adds	r3, r7, r4
 8004da2:	199b      	adds	r3, r3, r6
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	6859      	ldr	r1, [r3, #4]
 8004da8:	f7fd f94a 	bl	8002040 <__aeabi_d2iz>
 8004dac:	0005      	movs	r5, r0
 8004dae:	193b      	adds	r3, r7, r4
 8004db0:	199b      	adds	r3, r3, r6
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	6859      	ldr	r1, [r3, #4]
 8004db6:	f7fd f943 	bl	8002040 <__aeabi_d2iz>
 8004dba:	0003      	movs	r3, r0
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7fd f975 	bl	80020ac <__aeabi_i2d>
 8004dc2:	0003      	movs	r3, r0
 8004dc4:	000c      	movs	r4, r1
 8004dc6:	001a      	movs	r2, r3
 8004dc8:	0023      	movs	r3, r4
 8004dca:	2408      	movs	r4, #8
 8004dcc:	1939      	adds	r1, r7, r4
 8004dce:	1989      	adds	r1, r1, r6
 8004dd0:	6808      	ldr	r0, [r1, #0]
 8004dd2:	6849      	ldr	r1, [r1, #4]
 8004dd4:	f7fc fdec 	bl	80019b0 <__aeabi_dsub>
 8004dd8:	0003      	movs	r3, r0
 8004dda:	000c      	movs	r4, r1
 8004ddc:	0018      	movs	r0, r3
 8004dde:	0021      	movs	r1, r4
 8004de0:	2200      	movs	r2, #0
 8004de2:	4bc5      	ldr	r3, [pc, #788]	; (80050f8 <main+0x2884>)
 8004de4:	f7fc fb72 	bl	80014cc <__aeabi_dmul>
 8004de8:	0003      	movs	r3, r0
 8004dea:	000c      	movs	r4, r1
 8004dec:	0018      	movs	r0, r3
 8004dee:	0021      	movs	r1, r4
 8004df0:	f7fd f926 	bl	8002040 <__aeabi_d2iz>
 8004df4:	0003      	movs	r3, r0
 8004df6:	49c1      	ldr	r1, [pc, #772]	; (80050fc <main+0x2888>)
 8004df8:	48be      	ldr	r0, [pc, #760]	; (80050f4 <main+0x2880>)
 8004dfa:	002a      	movs	r2, r5
 8004dfc:	f005 f80a 	bl	8009e14 <siprintf>
	    	       		sprintf(temperature_message, "%02d", (int)(actual_temperature/100.0));
 8004e00:	2200      	movs	r2, #0
 8004e02:	4bbf      	ldr	r3, [pc, #764]	; (8005100 <main+0x288c>)
 8004e04:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004e06:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e08:	f7fb ff56 	bl	8000cb8 <__aeabi_ddiv>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	000c      	movs	r4, r1
 8004e10:	0018      	movs	r0, r3
 8004e12:	0021      	movs	r1, r4
 8004e14:	f7fd f914 	bl	8002040 <__aeabi_d2iz>
 8004e18:	0002      	movs	r2, r0
 8004e1a:	49ba      	ldr	r1, [pc, #744]	; (8005104 <main+0x2890>)
 8004e1c:	4bba      	ldr	r3, [pc, #744]	; (8005108 <main+0x2894>)
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f004 fff8 	bl	8009e14 <siprintf>
	    				b0 = message[0];
 8004e24:	4bb3      	ldr	r3, [pc, #716]	; (80050f4 <main+0x2880>)
 8004e26:	781a      	ldrb	r2, [r3, #0]
 8004e28:	2309      	movs	r3, #9
 8004e2a:	18fb      	adds	r3, r7, r3
 8004e2c:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004e2e:	4bb7      	ldr	r3, [pc, #732]	; (800510c <main+0x2898>)
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	25cf      	movs	r5, #207	; 0xcf
 8004e34:	2408      	movs	r4, #8
 8004e36:	0026      	movs	r6, r4
 8004e38:	193a      	adds	r2, r7, r4
 8004e3a:	1953      	adds	r3, r2, r5
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	b299      	uxth	r1, r3
 8004e40:	24cc      	movs	r4, #204	; 0xcc
 8004e42:	19ba      	adds	r2, r7, r6
 8004e44:	1913      	adds	r3, r2, r4
 8004e46:	881a      	ldrh	r2, [r3, #0]
 8004e48:	2364      	movs	r3, #100	; 0x64
 8004e4a:	9302      	str	r3, [sp, #8]
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	2309      	movs	r3, #9
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	2302      	movs	r3, #2
 8004e58:	f002 fae8 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f001 fc48 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8004e64:	0031      	movs	r1, r6
 8004e66:	187a      	adds	r2, r7, r1
 8004e68:	1913      	adds	r3, r2, r4
 8004e6a:	881a      	ldrh	r2, [r3, #0]
 8004e6c:	1878      	adds	r0, r7, r1
 8004e6e:	1903      	adds	r3, r0, r4
 8004e70:	3201      	adds	r2, #1
 8004e72:	801a      	strh	r2, [r3, #0]
	    				b0 = message[1];
 8004e74:	4b9f      	ldr	r3, [pc, #636]	; (80050f4 <main+0x2880>)
 8004e76:	785a      	ldrb	r2, [r3, #1]
 8004e78:	2309      	movs	r3, #9
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004e7e:	4ba3      	ldr	r3, [pc, #652]	; (800510c <main+0x2898>)
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	000e      	movs	r6, r1
 8004e84:	19ba      	adds	r2, r7, r6
 8004e86:	1953      	adds	r3, r2, r5
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	b299      	uxth	r1, r3
 8004e8c:	19ba      	adds	r2, r7, r6
 8004e8e:	1913      	adds	r3, r2, r4
 8004e90:	881a      	ldrh	r2, [r3, #0]
 8004e92:	2364      	movs	r3, #100	; 0x64
 8004e94:	9302      	str	r3, [sp, #8]
 8004e96:	2301      	movs	r3, #1
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	2309      	movs	r3, #9
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	f002 fac3 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004ea6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f001 fc23 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8004eae:	0031      	movs	r1, r6
 8004eb0:	187a      	adds	r2, r7, r1
 8004eb2:	1913      	adds	r3, r2, r4
 8004eb4:	881a      	ldrh	r2, [r3, #0]
 8004eb6:	1878      	adds	r0, r7, r1
 8004eb8:	1903      	adds	r3, r0, r4
 8004eba:	3201      	adds	r2, #1
 8004ebc:	801a      	strh	r2, [r3, #0]
	    				//b0 = message[2];
	    				//HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
	    				//HAL_Delay(write_delay);
	    				//eeprom_debug_address++;
	    				b0 = message[3];
 8004ebe:	4b8d      	ldr	r3, [pc, #564]	; (80050f4 <main+0x2880>)
 8004ec0:	78da      	ldrb	r2, [r3, #3]
 8004ec2:	2309      	movs	r3, #9
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004ec8:	4b90      	ldr	r3, [pc, #576]	; (800510c <main+0x2898>)
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	000e      	movs	r6, r1
 8004ece:	19ba      	adds	r2, r7, r6
 8004ed0:	1953      	adds	r3, r2, r5
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	b299      	uxth	r1, r3
 8004ed6:	19ba      	adds	r2, r7, r6
 8004ed8:	1913      	adds	r3, r2, r4
 8004eda:	881a      	ldrh	r2, [r3, #0]
 8004edc:	2364      	movs	r3, #100	; 0x64
 8004ede:	9302      	str	r3, [sp, #8]
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	2309      	movs	r3, #9
 8004ee6:	18fb      	adds	r3, r7, r3
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	2302      	movs	r3, #2
 8004eec:	f002 fa9e 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f001 fbfe 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8004ef8:	0031      	movs	r1, r6
 8004efa:	187a      	adds	r2, r7, r1
 8004efc:	1913      	adds	r3, r2, r4
 8004efe:	881a      	ldrh	r2, [r3, #0]
 8004f00:	1878      	adds	r0, r7, r1
 8004f02:	1903      	adds	r3, r0, r4
 8004f04:	3201      	adds	r2, #1
 8004f06:	801a      	strh	r2, [r3, #0]
	    				b0 = temperature_message[0];
 8004f08:	4b7f      	ldr	r3, [pc, #508]	; (8005108 <main+0x2894>)
 8004f0a:	781a      	ldrb	r2, [r3, #0]
 8004f0c:	2309      	movs	r3, #9
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004f12:	4b7e      	ldr	r3, [pc, #504]	; (800510c <main+0x2898>)
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	000e      	movs	r6, r1
 8004f18:	19ba      	adds	r2, r7, r6
 8004f1a:	1953      	adds	r3, r2, r5
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	b299      	uxth	r1, r3
 8004f20:	19ba      	adds	r2, r7, r6
 8004f22:	1913      	adds	r3, r2, r4
 8004f24:	881a      	ldrh	r2, [r3, #0]
 8004f26:	2364      	movs	r3, #100	; 0x64
 8004f28:	9302      	str	r3, [sp, #8]
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	9301      	str	r3, [sp, #4]
 8004f2e:	2309      	movs	r3, #9
 8004f30:	18fb      	adds	r3, r7, r3
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	2302      	movs	r3, #2
 8004f36:	f002 fa79 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f001 fbd9 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8004f42:	0031      	movs	r1, r6
 8004f44:	187a      	adds	r2, r7, r1
 8004f46:	1913      	adds	r3, r2, r4
 8004f48:	881a      	ldrh	r2, [r3, #0]
 8004f4a:	1878      	adds	r0, r7, r1
 8004f4c:	1903      	adds	r3, r0, r4
 8004f4e:	3201      	adds	r2, #1
 8004f50:	801a      	strh	r2, [r3, #0]
	    				b0 = temperature_message[1];
 8004f52:	4b6d      	ldr	r3, [pc, #436]	; (8005108 <main+0x2894>)
 8004f54:	785a      	ldrb	r2, [r3, #1]
 8004f56:	2309      	movs	r3, #9
 8004f58:	18fb      	adds	r3, r7, r3
 8004f5a:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004f5c:	4b6b      	ldr	r3, [pc, #428]	; (800510c <main+0x2898>)
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	000e      	movs	r6, r1
 8004f62:	19ba      	adds	r2, r7, r6
 8004f64:	1953      	adds	r3, r2, r5
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	b299      	uxth	r1, r3
 8004f6a:	19ba      	adds	r2, r7, r6
 8004f6c:	1913      	adds	r3, r2, r4
 8004f6e:	881a      	ldrh	r2, [r3, #0]
 8004f70:	2364      	movs	r3, #100	; 0x64
 8004f72:	9302      	str	r3, [sp, #8]
 8004f74:	2301      	movs	r3, #1
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	2309      	movs	r3, #9
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	2302      	movs	r3, #2
 8004f80:	f002 fa54 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f86:	0018      	movs	r0, r3
 8004f88:	f001 fbb4 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8004f8c:	0031      	movs	r1, r6
 8004f8e:	187a      	adds	r2, r7, r1
 8004f90:	1913      	adds	r3, r2, r4
 8004f92:	881a      	ldrh	r2, [r3, #0]
 8004f94:	1878      	adds	r0, r7, r1
 8004f96:	1903      	adds	r3, r0, r4
 8004f98:	3201      	adds	r2, #1
 8004f9a:	801a      	strh	r2, [r3, #0]
	    				b0 = '$';
 8004f9c:	2309      	movs	r3, #9
 8004f9e:	18fb      	adds	r3, r7, r3
 8004fa0:	2224      	movs	r2, #36	; 0x24
 8004fa2:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004fa4:	4b59      	ldr	r3, [pc, #356]	; (800510c <main+0x2898>)
 8004fa6:	6818      	ldr	r0, [r3, #0]
 8004fa8:	000e      	movs	r6, r1
 8004faa:	19ba      	adds	r2, r7, r6
 8004fac:	1953      	adds	r3, r2, r5
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	b299      	uxth	r1, r3
 8004fb2:	19ba      	adds	r2, r7, r6
 8004fb4:	1913      	adds	r3, r2, r4
 8004fb6:	881a      	ldrh	r2, [r3, #0]
 8004fb8:	2364      	movs	r3, #100	; 0x64
 8004fba:	9302      	str	r3, [sp, #8]
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	9301      	str	r3, [sp, #4]
 8004fc0:	2309      	movs	r3, #9
 8004fc2:	18fb      	adds	r3, r7, r3
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	f002 fa30 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8004fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f001 fb90 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8004fd4:	0031      	movs	r1, r6
 8004fd6:	187a      	adds	r2, r7, r1
 8004fd8:	1913      	adds	r3, r2, r4
 8004fda:	881a      	ldrh	r2, [r3, #0]
 8004fdc:	1878      	adds	r0, r7, r1
 8004fde:	1903      	adds	r3, r0, r4
 8004fe0:	3201      	adds	r2, #1
 8004fe2:	801a      	strh	r2, [r3, #0]
	    				b0 = '$';
 8004fe4:	2309      	movs	r3, #9
 8004fe6:	18fb      	adds	r3, r7, r3
 8004fe8:	2224      	movs	r2, #36	; 0x24
 8004fea:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8004fec:	4b47      	ldr	r3, [pc, #284]	; (800510c <main+0x2898>)
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	000e      	movs	r6, r1
 8004ff2:	19ba      	adds	r2, r7, r6
 8004ff4:	1953      	adds	r3, r2, r5
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	b299      	uxth	r1, r3
 8004ffa:	19ba      	adds	r2, r7, r6
 8004ffc:	1913      	adds	r3, r2, r4
 8004ffe:	881a      	ldrh	r2, [r3, #0]
 8005000:	2364      	movs	r3, #100	; 0x64
 8005002:	9302      	str	r3, [sp, #8]
 8005004:	2301      	movs	r3, #1
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	2309      	movs	r3, #9
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	2302      	movs	r3, #2
 8005010:	f002 fa0c 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8005014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005016:	0018      	movs	r0, r3
 8005018:	f001 fb6c 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 800501c:	0031      	movs	r1, r6
 800501e:	187a      	adds	r2, r7, r1
 8005020:	1913      	adds	r3, r2, r4
 8005022:	881a      	ldrh	r2, [r3, #0]
 8005024:	1878      	adds	r0, r7, r1
 8005026:	1903      	adds	r3, r0, r4
 8005028:	3201      	adds	r2, #1
 800502a:	801a      	strh	r2, [r3, #0]
	    				eeprom_number_of_records++;
 800502c:	26c8      	movs	r6, #200	; 0xc8
 800502e:	187a      	adds	r2, r7, r1
 8005030:	1993      	adds	r3, r2, r6
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3301      	adds	r3, #1
 8005036:	187a      	adds	r2, r7, r1
 8005038:	1992      	adds	r2, r2, r6
 800503a:	6013      	str	r3, [r2, #0]
	    				b0 = '$';
 800503c:	2309      	movs	r3, #9
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	2224      	movs	r2, #36	; 0x24
 8005042:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8005044:	4b31      	ldr	r3, [pc, #196]	; (800510c <main+0x2898>)
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	000a      	movs	r2, r1
 800504a:	18b9      	adds	r1, r7, r2
 800504c:	194b      	adds	r3, r1, r5
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	b299      	uxth	r1, r3
 8005052:	18ba      	adds	r2, r7, r2
 8005054:	1913      	adds	r3, r2, r4
 8005056:	881a      	ldrh	r2, [r3, #0]
 8005058:	2364      	movs	r3, #100	; 0x64
 800505a:	9302      	str	r3, [sp, #8]
 800505c:	2301      	movs	r3, #1
 800505e:	9301      	str	r3, [sp, #4]
 8005060:	2309      	movs	r3, #9
 8005062:	18fb      	adds	r3, r7, r3
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	2302      	movs	r3, #2
 8005068:	f002 f9e0 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 800506c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800506e:	0018      	movs	r0, r3
 8005070:	f001 fb40 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8005074:	2108      	movs	r1, #8
 8005076:	187a      	adds	r2, r7, r1
 8005078:	1913      	adds	r3, r2, r4
 800507a:	881a      	ldrh	r2, [r3, #0]
 800507c:	1878      	adds	r0, r7, r1
 800507e:	1903      	adds	r3, r0, r4
 8005080:	3201      	adds	r2, #1
 8005082:	801a      	strh	r2, [r3, #0]
	    				eeprom_number_of_records++;
 8005084:	187a      	adds	r2, r7, r1
 8005086:	1993      	adds	r3, r2, r6
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3301      	adds	r3, #1
 800508c:	187a      	adds	r2, r7, r1
 800508e:	1992      	adds	r2, r2, r6
 8005090:	6013      	str	r3, [r2, #0]
	    				b0 = '$';
 8005092:	2309      	movs	r3, #9
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	2224      	movs	r2, #36	; 0x24
 8005098:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 800509a:	4b1c      	ldr	r3, [pc, #112]	; (800510c <main+0x2898>)
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	000a      	movs	r2, r1
 80050a0:	18b9      	adds	r1, r7, r2
 80050a2:	194b      	adds	r3, r1, r5
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	b299      	uxth	r1, r3
 80050a8:	18ba      	adds	r2, r7, r2
 80050aa:	1913      	adds	r3, r2, r4
 80050ac:	881a      	ldrh	r2, [r3, #0]
 80050ae:	2364      	movs	r3, #100	; 0x64
 80050b0:	9302      	str	r3, [sp, #8]
 80050b2:	2301      	movs	r3, #1
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	2309      	movs	r3, #9
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	2302      	movs	r3, #2
 80050be:	f002 f9b5 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 80050c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050c4:	0018      	movs	r0, r3
 80050c6:	f001 fb15 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 80050ca:	2108      	movs	r1, #8
 80050cc:	187a      	adds	r2, r7, r1
 80050ce:	1913      	adds	r3, r2, r4
 80050d0:	881a      	ldrh	r2, [r3, #0]
 80050d2:	1878      	adds	r0, r7, r1
 80050d4:	1903      	adds	r3, r0, r4
 80050d6:	3201      	adds	r2, #1
 80050d8:	801a      	strh	r2, [r3, #0]
	    				eeprom_number_of_records++;
 80050da:	187a      	adds	r2, r7, r1
 80050dc:	1993      	adds	r3, r2, r6
 80050de:	e017      	b.n	8005110 <main+0x289c>
 80050e0:	50000400 	.word	0x50000400
 80050e4:	0800b224 	.word	0x0800b224
 80050e8:	20000274 	.word	0x20000274
 80050ec:	20000010 	.word	0x20000010
 80050f0:	0800b294 	.word	0x0800b294
 80050f4:	20000234 	.word	0x20000234
 80050f8:	40240000 	.word	0x40240000
 80050fc:	0800b280 	.word	0x0800b280
 8005100:	40590000 	.word	0x40590000
 8005104:	0800b28c 	.word	0x0800b28c
 8005108:	200002b4 	.word	0x200002b4
 800510c:	20000024 	.word	0x20000024
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3301      	adds	r3, #1
 8005114:	187a      	adds	r2, r7, r1
 8005116:	1992      	adds	r2, r2, r6
 8005118:	6013      	str	r3, [r2, #0]
	    				b0 = '$';
 800511a:	2309      	movs	r3, #9
 800511c:	18fb      	adds	r3, r7, r3
 800511e:	2224      	movs	r2, #36	; 0x24
 8005120:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8005122:	4b14      	ldr	r3, [pc, #80]	; (8005174 <main+0x2900>)
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	000a      	movs	r2, r1
 8005128:	1879      	adds	r1, r7, r1
 800512a:	194b      	adds	r3, r1, r5
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	b299      	uxth	r1, r3
 8005130:	0015      	movs	r5, r2
 8005132:	197a      	adds	r2, r7, r5
 8005134:	1913      	adds	r3, r2, r4
 8005136:	881a      	ldrh	r2, [r3, #0]
 8005138:	2364      	movs	r3, #100	; 0x64
 800513a:	9302      	str	r3, [sp, #8]
 800513c:	2301      	movs	r3, #1
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	2309      	movs	r3, #9
 8005142:	18fb      	adds	r3, r7, r3
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	2302      	movs	r3, #2
 8005148:	f002 f970 	bl	800742c <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 800514c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800514e:	0018      	movs	r0, r3
 8005150:	f001 fad0 	bl	80066f4 <HAL_Delay>
	    				eeprom_debug_address++;
 8005154:	197b      	adds	r3, r7, r5
 8005156:	191b      	adds	r3, r3, r4
 8005158:	881a      	ldrh	r2, [r3, #0]
 800515a:	197b      	adds	r3, r7, r5
 800515c:	191b      	adds	r3, r3, r4
 800515e:	3201      	adds	r2, #1
 8005160:	801a      	strh	r2, [r3, #0]
	    				eeprom_number_of_records++;
 8005162:	197b      	adds	r3, r7, r5
 8005164:	199b      	adds	r3, r3, r6
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3301      	adds	r3, #1
 800516a:	197a      	adds	r2, r7, r5
 800516c:	1992      	adds	r2, r2, r6
 800516e:	6013      	str	r3, [r2, #0]
	    	if(one_second_timer_get_flag())
 8005170:	f7fe fede 	bl	8003f30 <main+0x16bc>
 8005174:	20000024 	.word	0x20000024

08005178 <SystemClock_Config>:


/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b09b      	sub	sp, #108	; 0x6c
 800517c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800517e:	2434      	movs	r4, #52	; 0x34
 8005180:	193b      	adds	r3, r7, r4
 8005182:	0018      	movs	r0, r3
 8005184:	2334      	movs	r3, #52	; 0x34
 8005186:	001a      	movs	r2, r3
 8005188:	2100      	movs	r1, #0
 800518a:	f004 fe3b 	bl	8009e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800518e:	2320      	movs	r3, #32
 8005190:	18fb      	adds	r3, r7, r3
 8005192:	0018      	movs	r0, r3
 8005194:	2314      	movs	r3, #20
 8005196:	001a      	movs	r2, r3
 8005198:	2100      	movs	r1, #0
 800519a:	f004 fe33 	bl	8009e04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800519e:	1d3b      	adds	r3, r7, #4
 80051a0:	0018      	movs	r0, r3
 80051a2:	231c      	movs	r3, #28
 80051a4:	001a      	movs	r2, r3
 80051a6:	2100      	movs	r1, #0
 80051a8:	f004 fe2c 	bl	8009e04 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80051ac:	4b2b      	ldr	r3, [pc, #172]	; (800525c <SystemClock_Config+0xe4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a2b      	ldr	r2, [pc, #172]	; (8005260 <SystemClock_Config+0xe8>)
 80051b2:	401a      	ands	r2, r3
 80051b4:	4b29      	ldr	r3, [pc, #164]	; (800525c <SystemClock_Config+0xe4>)
 80051b6:	2180      	movs	r1, #128	; 0x80
 80051b8:	0109      	lsls	r1, r1, #4
 80051ba:	430a      	orrs	r2, r1
 80051bc:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80051be:	0021      	movs	r1, r4
 80051c0:	187b      	adds	r3, r7, r1
 80051c2:	2202      	movs	r2, #2
 80051c4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051c6:	187b      	adds	r3, r7, r1
 80051c8:	2201      	movs	r2, #1
 80051ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80051cc:	187b      	adds	r3, r7, r1
 80051ce:	2210      	movs	r2, #16
 80051d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051d2:	187b      	adds	r3, r7, r1
 80051d4:	2202      	movs	r2, #2
 80051d6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	2200      	movs	r2, #0
 80051dc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80051de:	187b      	adds	r3, r7, r1
 80051e0:	2280      	movs	r2, #128	; 0x80
 80051e2:	02d2      	lsls	r2, r2, #11
 80051e4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80051e6:	187b      	adds	r3, r7, r1
 80051e8:	2280      	movs	r2, #128	; 0x80
 80051ea:	03d2      	lsls	r2, r2, #15
 80051ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051ee:	187b      	adds	r3, r7, r1
 80051f0:	0018      	movs	r0, r3
 80051f2:	f002 fe53 	bl	8007e9c <HAL_RCC_OscConfig>
 80051f6:	1e03      	subs	r3, r0, #0
 80051f8:	d001      	beq.n	80051fe <SystemClock_Config+0x86>
  {
    Error_Handler();
 80051fa:	f000 f833 	bl	8005264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051fe:	2120      	movs	r1, #32
 8005200:	187b      	adds	r3, r7, r1
 8005202:	220f      	movs	r2, #15
 8005204:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005206:	187b      	adds	r3, r7, r1
 8005208:	2203      	movs	r2, #3
 800520a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800520c:	187b      	adds	r3, r7, r1
 800520e:	2200      	movs	r2, #0
 8005210:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005212:	187b      	adds	r3, r7, r1
 8005214:	2200      	movs	r2, #0
 8005216:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005218:	187b      	adds	r3, r7, r1
 800521a:	2200      	movs	r2, #0
 800521c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800521e:	187b      	adds	r3, r7, r1
 8005220:	2101      	movs	r1, #1
 8005222:	0018      	movs	r0, r3
 8005224:	f003 f9a2 	bl	800856c <HAL_RCC_ClockConfig>
 8005228:	1e03      	subs	r3, r0, #0
 800522a:	d001      	beq.n	8005230 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800522c:	f000 f81a 	bl	8005264 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8005230:	1d3b      	adds	r3, r7, #4
 8005232:	2209      	movs	r2, #9
 8005234:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005236:	1d3b      	adds	r3, r7, #4
 8005238:	2200      	movs	r2, #0
 800523a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800523c:	1d3b      	adds	r3, r7, #4
 800523e:	2200      	movs	r2, #0
 8005240:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005242:	1d3b      	adds	r3, r7, #4
 8005244:	0018      	movs	r0, r3
 8005246:	f003 fb75 	bl	8008934 <HAL_RCCEx_PeriphCLKConfig>
 800524a:	1e03      	subs	r3, r0, #0
 800524c:	d001      	beq.n	8005252 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800524e:	f000 f809 	bl	8005264 <Error_Handler>
  }
}
 8005252:	46c0      	nop			; (mov r8, r8)
 8005254:	46bd      	mov	sp, r7
 8005256:	b01b      	add	sp, #108	; 0x6c
 8005258:	bd90      	pop	{r4, r7, pc}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	40007000 	.word	0x40007000
 8005260:	ffffe7ff 	.word	0xffffe7ff

08005264 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005268:	46c0      	nop			; (mov r8, r8)
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <one_second_timer_init>:
#include "one_second_timer_interface.h"
#include "main.h"


void one_second_timer_init()
{
 800526e:	b580      	push	{r7, lr}
 8005270:	af00      	add	r7, sp, #0

	one_second_timer_reset_flag();
 8005272:	f000 f81b 	bl	80052ac <one_second_timer_reset_flag>

    MX_TIM2_Init();
 8005276:	f001 f80f 	bl	8006298 <MX_TIM2_Init>
	
}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <one_second_timer_start>:
void one_second_timer_start()
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8005284:	4b03      	ldr	r3, [pc, #12]	; (8005294 <one_second_timer_start+0x14>)
 8005286:	0018      	movs	r0, r3
 8005288:	f003 fd20 	bl	8008ccc <HAL_TIM_Base_Start_IT>
}
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	200008d0 	.word	0x200008d0

08005298 <one_second_timer_set_flag>:
}



void one_second_timer_set_flag()
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
	one_second_timer_flag = 1;
 800529c:	4b02      	ldr	r3, [pc, #8]	; (80052a8 <one_second_timer_set_flag+0x10>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	200002f4 	.word	0x200002f4

080052ac <one_second_timer_reset_flag>:
void one_second_timer_reset_flag()
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
	one_second_timer_flag = 0;
 80052b0:	4b02      	ldr	r3, [pc, #8]	; (80052bc <one_second_timer_reset_flag+0x10>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
}
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	200002f4 	.word	0x200002f4

080052c0 <one_second_timer_get_flag>:
int one_second_timer_get_flag()
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
	return one_second_timer_flag;
 80052c4:	4b02      	ldr	r3, [pc, #8]	; (80052d0 <one_second_timer_get_flag+0x10>)
 80052c6:	681b      	ldr	r3, [r3, #0]
}
 80052c8:	0018      	movs	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	200002f4 	.word	0x200002f4

080052d4 <one_second_timer_increment_counter>:


void one_second_timer_increment_counter()
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
	seconds_counter++;
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <one_second_timer_increment_counter+0x14>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	4b02      	ldr	r3, [pc, #8]	; (80052e8 <one_second_timer_increment_counter+0x14>)
 80052e0:	601a      	str	r2, [r3, #0]
}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	200002f8 	.word	0x200002f8

080052ec <one_second_timer_get_counter>:

uint32_t one_second_timer_get_counter()
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
	return seconds_counter;
 80052f0:	4b02      	ldr	r3, [pc, #8]	; (80052fc <one_second_timer_get_counter+0x10>)
 80052f2:	681b      	ldr	r3, [r3, #0]
}
 80052f4:	0018      	movs	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	200002f8 	.word	0x200002f8

08005300 <write_byte>:
#include "pressure_sensor_object.h"

//****************************************************************************
uint8_t write_byte(uint8_t data)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	0002      	movs	r2, r0
 8005308:	1dfb      	adds	r3, r7, #7
 800530a:	701a      	strb	r2, [r3, #0]

	uint8_t data_out;
    uint8_t read_data;

	// wait for spi transmitter readiness
	while ((SPI1->SR & SPI_SR_TXE) == RESET );
 800530c:	46c0      	nop			; (mov r8, r8)
 800530e:	4b0f      	ldr	r3, [pc, #60]	; (800534c <write_byte+0x4c>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2202      	movs	r2, #2
 8005314:	4013      	ands	r3, r2
 8005316:	d0fa      	beq.n	800530e <write_byte+0xe>
	data_out = data;
 8005318:	210f      	movs	r1, #15
 800531a:	187b      	adds	r3, r7, r1
 800531c:	1dfa      	adds	r2, r7, #7
 800531e:	7812      	ldrb	r2, [r2, #0]
 8005320:	701a      	strb	r2, [r3, #0]
    SPI1->DR = data_out;
 8005322:	4b0a      	ldr	r3, [pc, #40]	; (800534c <write_byte+0x4c>)
 8005324:	187a      	adds	r2, r7, r1
 8005326:	7812      	ldrb	r2, [r2, #0]
 8005328:	60da      	str	r2, [r3, #12]
    // wait while a transmission complete
	while ((SPI1->SR & SPI_SR_RXNE) == RESET );
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	4b07      	ldr	r3, [pc, #28]	; (800534c <write_byte+0x4c>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2201      	movs	r2, #1
 8005332:	4013      	ands	r3, r2
 8005334:	d0fa      	beq.n	800532c <write_byte+0x2c>
    read_data = SPI1->DR;
 8005336:	4b05      	ldr	r3, [pc, #20]	; (800534c <write_byte+0x4c>)
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	210e      	movs	r1, #14
 800533c:	187b      	adds	r3, r7, r1
 800533e:	701a      	strb	r2, [r3, #0]
	
	return read_data;
 8005340:	187b      	adds	r3, r7, r1
 8005342:	781b      	ldrb	r3, [r3, #0]

	
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	b004      	add	sp, #16
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40013000 	.word	0x40013000

08005350 <pressure_sensor_object_init>:

//****************************************************************************
void pressure_sensor_object_init()
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0

	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	//                 RESET
	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// reset spi1 cs pin
    spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)(spi1_cs_pressure_Pin << 16); 	// reset
 8005356:	23a0      	movs	r3, #160	; 0xa0
 8005358:	05db      	lsls	r3, r3, #23
 800535a:	2280      	movs	r2, #128	; 0x80
 800535c:	0352      	lsls	r2, r2, #13
 800535e:	619a      	str	r2, [r3, #24]
	// transmit 0x1e                             	
	write_byte( 0x1e);                         	
 8005360:	201e      	movs	r0, #30
 8005362:	f7ff ffcd 	bl	8005300 <write_byte>
	// set spi1 cs pin                           	
    spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)spi1_cs_pressure_Pin ;	// set
 8005366:	23a0      	movs	r3, #160	; 0xa0
 8005368:	05db      	lsls	r3, r3, #23
 800536a:	2210      	movs	r2, #16
 800536c:	619a      	str	r2, [r3, #24]
	HAL_Delay(3);
 800536e:	2003      	movs	r0, #3
 8005370:	f001 f9c0 	bl	80066f4 <HAL_Delay>
	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


	for(i=1; i<7; i++)
 8005374:	2301      	movs	r3, #1
 8005376:	607b      	str	r3, [r7, #4]
 8005378:	e037      	b.n	80053ea <pressure_sensor_object_init+0x9a>
	{
		//send read prom command
		// reset spi1 cs pin
    	spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)(spi1_cs_pressure_Pin << 16); 	// reset
 800537a:	23a0      	movs	r3, #160	; 0xa0
 800537c:	05db      	lsls	r3, r3, #23
 800537e:	2280      	movs	r2, #128	; 0x80
 8005380:	0352      	lsls	r2, r2, #13
 8005382:	619a      	str	r2, [r3, #24]
		// transmit command with address 
		write_byte( 0xa0 + (((uint8_t)i)<<1));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	18db      	adds	r3, r3, r3
 800538a:	b2db      	uxtb	r3, r3
 800538c:	3b60      	subs	r3, #96	; 0x60
 800538e:	b2db      	uxtb	r3, r3
 8005390:	0018      	movs	r0, r3
 8005392:	f7ff ffb5 	bl	8005300 <write_byte>

		// read ms byte
		sensor_prom[i] = write_byte(0x55);
 8005396:	2055      	movs	r0, #85	; 0x55
 8005398:	f7ff ffb2 	bl	8005300 <write_byte>
 800539c:	0003      	movs	r3, r0
 800539e:	b299      	uxth	r1, r3
 80053a0:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <pressure_sensor_object_init+0xa8>)
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	0052      	lsls	r2, r2, #1
 80053a6:	52d1      	strh	r1, [r2, r3]
		sensor_prom[i] <<= 8;
 80053a8:	4b13      	ldr	r3, [pc, #76]	; (80053f8 <pressure_sensor_object_init+0xa8>)
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	0052      	lsls	r2, r2, #1
 80053ae:	5ad3      	ldrh	r3, [r2, r3]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	b299      	uxth	r1, r3
 80053b4:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <pressure_sensor_object_init+0xa8>)
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	0052      	lsls	r2, r2, #1
 80053ba:	52d1      	strh	r1, [r2, r3]
		// read ls byte
		sensor_prom[i] += write_byte(0x55);
 80053bc:	2055      	movs	r0, #85	; 0x55
 80053be:	f7ff ff9f 	bl	8005300 <write_byte>
 80053c2:	0003      	movs	r3, r0
 80053c4:	0019      	movs	r1, r3
 80053c6:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <pressure_sensor_object_init+0xa8>)
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	0052      	lsls	r2, r2, #1
 80053cc:	5ad2      	ldrh	r2, [r2, r3]
 80053ce:	b28b      	uxth	r3, r1
 80053d0:	18d3      	adds	r3, r2, r3
 80053d2:	b299      	uxth	r1, r3
 80053d4:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <pressure_sensor_object_init+0xa8>)
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	0052      	lsls	r2, r2, #1
 80053da:	52d1      	strh	r1, [r2, r3]

		// set spi1 cs pin
    	spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)spi1_cs_pressure_Pin ;	// set
 80053dc:	23a0      	movs	r3, #160	; 0xa0
 80053de:	05db      	lsls	r3, r3, #23
 80053e0:	2210      	movs	r2, #16
 80053e2:	619a      	str	r2, [r3, #24]
	for(i=1; i<7; i++)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3301      	adds	r3, #1
 80053e8:	607b      	str	r3, [r7, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b06      	cmp	r3, #6
 80053ee:	ddc4      	ble.n	800537a <pressure_sensor_object_init+0x2a>
	}
}
 80053f0:	46c0      	nop			; (mov r8, r8)
 80053f2:	46bd      	mov	sp, r7
 80053f4:	b002      	add	sp, #8
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20000330 	.word	0x20000330

080053fc <pressure_sensor_measure_pressure_temperature>:



void pressure_sensor_measure_pressure_temperature()
{	
 80053fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053fe:	b08d      	sub	sp, #52	; 0x34
 8005400:	af00      	add	r7, sp, #0
	uint32_t aux_p = 0;
 8005402:	2300      	movs	r3, #0
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
	int i;
	                                                                                        	
	for(i=0; i<PRESSURE_OVERSAMPLING; i++)                                                  	
 8005406:	2300      	movs	r3, #0
 8005408:	62bb      	str	r3, [r7, #40]	; 0x28
 800540a:	e047      	b.n	800549c <pressure_sensor_measure_pressure_temperature+0xa0>
    {
	                                                                                        	
		//send start conversion D1 OSR 1024 command                                         	
        // reset spi1 cs pin                                                                	
		spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)(spi1_cs_pressure_Pin << 16); 	// reset	
 800540c:	23a0      	movs	r3, #160	; 0xa0
 800540e:	05db      	lsls	r3, r3, #23
 8005410:	2280      	movs	r2, #128	; 0x80
 8005412:	0352      	lsls	r2, r2, #13
 8005414:	619a      	str	r2, [r3, #24]
	    // transmit command                                                                 	
	    write_byte(0x44);                                                                   	
 8005416:	2044      	movs	r0, #68	; 0x44
 8005418:	f7ff ff72 	bl	8005300 <write_byte>
        // set spi1 cs pin                                                                  	
		spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)spi1_cs_pressure_Pin ;	// set       	
 800541c:	23a0      	movs	r3, #160	; 0xa0
 800541e:	05db      	lsls	r3, r3, #23
 8005420:	2210      	movs	r2, #16
 8005422:	619a      	str	r2, [r3, #24]
	    // pause 3 mS                                                                       	
        HAL_Delay(3);                                                                           
 8005424:	2003      	movs	r0, #3
 8005426:	f001 f965 	bl	80066f4 <HAL_Delay>
	                                                                                        	
	    //send read adc command                                                             	
        // reset spi1 cs pin                                                                	
		spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)(spi1_cs_pressure_Pin << 16); 	// reset	
 800542a:	23a0      	movs	r3, #160	; 0xa0
 800542c:	05db      	lsls	r3, r3, #23
 800542e:	2280      	movs	r2, #128	; 0x80
 8005430:	0352      	lsls	r2, r2, #13
 8005432:	619a      	str	r2, [r3, #24]
	    // transmit command                                                                 	
        write_byte(0x00);                                                                       
 8005434:	2000      	movs	r0, #0
 8005436:	f7ff ff63 	bl	8005300 <write_byte>
	                                                                                        	
	    // read ms byte                                                                     	
	    pressure = write_byte(0x55);                                                        	
 800543a:	2055      	movs	r0, #85	; 0x55
 800543c:	f7ff ff60 	bl	8005300 <write_byte>
 8005440:	0003      	movs	r3, r0
 8005442:	001a      	movs	r2, r3
 8005444:	4b93      	ldr	r3, [pc, #588]	; (8005694 <pressure_sensor_measure_pressure_temperature+0x298>)
 8005446:	601a      	str	r2, [r3, #0]
	    pressure <<= 8;                                                                     	
 8005448:	4b92      	ldr	r3, [pc, #584]	; (8005694 <pressure_sensor_measure_pressure_temperature+0x298>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021a      	lsls	r2, r3, #8
 800544e:	4b91      	ldr	r3, [pc, #580]	; (8005694 <pressure_sensor_measure_pressure_temperature+0x298>)
 8005450:	601a      	str	r2, [r3, #0]
	    // read ls byte                                                                     	
	    pressure += write_byte(0x55);                                                       	
 8005452:	2055      	movs	r0, #85	; 0x55
 8005454:	f7ff ff54 	bl	8005300 <write_byte>
 8005458:	0003      	movs	r3, r0
 800545a:	001a      	movs	r2, r3
 800545c:	4b8d      	ldr	r3, [pc, #564]	; (8005694 <pressure_sensor_measure_pressure_temperature+0x298>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	18d2      	adds	r2, r2, r3
 8005462:	4b8c      	ldr	r3, [pc, #560]	; (8005694 <pressure_sensor_measure_pressure_temperature+0x298>)
 8005464:	601a      	str	r2, [r3, #0]
	    pressure <<= 8;                                                                     	
 8005466:	4b8b      	ldr	r3, [pc, #556]	; (8005694 <pressure_sensor_measure_pressure_temperature+0x298>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	021a      	lsls	r2, r3, #8
 800546c:	4b89      	ldr	r3, [pc, #548]	; (8005694 <pressure_sensor_measure_pressure_temperature+0x298>)
 800546e:	601a      	str	r2, [r3, #0]
	    // read ls byte                                                                     	
	    pressure += write_byte(0x55);                                                       	
 8005470:	2055      	movs	r0, #85	; 0x55
 8005472:	f7ff ff45 	bl	8005300 <write_byte>
 8005476:	0003      	movs	r3, r0
 8005478:	001a      	movs	r2, r3
 800547a:	4b86      	ldr	r3, [pc, #536]	; (8005694 <pressure_sensor_measure_pressure_temperature+0x298>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	18d2      	adds	r2, r2, r3
 8005480:	4b84      	ldr	r3, [pc, #528]	; (8005694 <pressure_sensor_measure_pressure_temperature+0x298>)
 8005482:	601a      	str	r2, [r3, #0]
        // set spi1 cs pin                                                                  	
    	spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)spi1_cs_pressure_Pin ;	// set
 8005484:	23a0      	movs	r3, #160	; 0xa0
 8005486:	05db      	lsls	r3, r3, #23
 8005488:	2210      	movs	r2, #16
 800548a:	619a      	str	r2, [r3, #24]
	                                                                                        	
    	aux_p += pressure;
 800548c:	4b81      	ldr	r3, [pc, #516]	; (8005694 <pressure_sensor_measure_pressure_temperature+0x298>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005492:	18d3      	adds	r3, r2, r3
 8005494:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(i=0; i<PRESSURE_OVERSAMPLING; i++)                                                  	
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	3301      	adds	r3, #1
 800549a:	62bb      	str	r3, [r7, #40]	; 0x28
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	2b63      	cmp	r3, #99	; 0x63
 80054a0:	ddb4      	ble.n	800540c <pressure_sensor_measure_pressure_temperature+0x10>
	                                                                                        	
    }
	                                                                                        	
    pressure = aux_p/PRESSURE_OVERSAMPLING;
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	2164      	movs	r1, #100	; 0x64
 80054a6:	0018      	movs	r0, r3
 80054a8:	f7fa fe36 	bl	8000118 <__udivsi3>
 80054ac:	0003      	movs	r3, r0
 80054ae:	001a      	movs	r2, r3
 80054b0:	4b78      	ldr	r3, [pc, #480]	; (8005694 <pressure_sensor_measure_pressure_temperature+0x298>)
 80054b2:	601a      	str	r2, [r3, #0]
	                                                                                        	
	//----------------------------------------------------                                  	
	                                                                                        	
	//send start conversion D2 OSR 1024 command                                             	
    // reset spi1 cs pin                                                                    	
	spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)(spi1_cs_pressure_Pin << 16); 	// reset 	
 80054b4:	23a0      	movs	r3, #160	; 0xa0
 80054b6:	05db      	lsls	r3, r3, #23
 80054b8:	2280      	movs	r2, #128	; 0x80
 80054ba:	0352      	lsls	r2, r2, #13
 80054bc:	619a      	str	r2, [r3, #24]
	// transmit command                                                                     	
	write_byte(0x54);                                                                       	
 80054be:	2054      	movs	r0, #84	; 0x54
 80054c0:	f7ff ff1e 	bl	8005300 <write_byte>
    // set spi1 cs pin                                                                      	
	spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)spi1_cs_pressure_Pin ;	// set           	
 80054c4:	23a0      	movs	r3, #160	; 0xa0
 80054c6:	05db      	lsls	r3, r3, #23
 80054c8:	2210      	movs	r2, #16
 80054ca:	619a      	str	r2, [r3, #24]
	// pause 3 mS                                                                           	
    HAL_Delay(3);
 80054cc:	2003      	movs	r0, #3
 80054ce:	f001 f911 	bl	80066f4 <HAL_Delay>
	                                                                                        	
	//send read adc command                                                                 	
    // reset spi1 cs pin                                                                    	
	spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)(spi1_cs_pressure_Pin << 16); 	// reset 	
 80054d2:	23a0      	movs	r3, #160	; 0xa0
 80054d4:	05db      	lsls	r3, r3, #23
 80054d6:	2280      	movs	r2, #128	; 0x80
 80054d8:	0352      	lsls	r2, r2, #13
 80054da:	619a      	str	r2, [r3, #24]
	// transmit command                                                                     	
    write_byte(0x00);
 80054dc:	2000      	movs	r0, #0
 80054de:	f7ff ff0f 	bl	8005300 <write_byte>
	                                                                                        	
	// read ms byte                                                                         	
	temperature = write_byte(0x55);                                                         	
 80054e2:	2055      	movs	r0, #85	; 0x55
 80054e4:	f7ff ff0c 	bl	8005300 <write_byte>
 80054e8:	0003      	movs	r3, r0
 80054ea:	001a      	movs	r2, r3
 80054ec:	4b6a      	ldr	r3, [pc, #424]	; (8005698 <pressure_sensor_measure_pressure_temperature+0x29c>)
 80054ee:	601a      	str	r2, [r3, #0]
	temperature <<= 8;                                                                      	
 80054f0:	4b69      	ldr	r3, [pc, #420]	; (8005698 <pressure_sensor_measure_pressure_temperature+0x29c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	021a      	lsls	r2, r3, #8
 80054f6:	4b68      	ldr	r3, [pc, #416]	; (8005698 <pressure_sensor_measure_pressure_temperature+0x29c>)
 80054f8:	601a      	str	r2, [r3, #0]
	// read ls byte                                                                         	
	temperature += write_byte(0x55);                                                        	
 80054fa:	2055      	movs	r0, #85	; 0x55
 80054fc:	f7ff ff00 	bl	8005300 <write_byte>
 8005500:	0003      	movs	r3, r0
 8005502:	001a      	movs	r2, r3
 8005504:	4b64      	ldr	r3, [pc, #400]	; (8005698 <pressure_sensor_measure_pressure_temperature+0x29c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	18d2      	adds	r2, r2, r3
 800550a:	4b63      	ldr	r3, [pc, #396]	; (8005698 <pressure_sensor_measure_pressure_temperature+0x29c>)
 800550c:	601a      	str	r2, [r3, #0]
	temperature <<= 8;                                                                      	
 800550e:	4b62      	ldr	r3, [pc, #392]	; (8005698 <pressure_sensor_measure_pressure_temperature+0x29c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	021a      	lsls	r2, r3, #8
 8005514:	4b60      	ldr	r3, [pc, #384]	; (8005698 <pressure_sensor_measure_pressure_temperature+0x29c>)
 8005516:	601a      	str	r2, [r3, #0]
	// read ls byte                                                                         	
	temperature += write_byte(0x55);                                                        	
 8005518:	2055      	movs	r0, #85	; 0x55
 800551a:	f7ff fef1 	bl	8005300 <write_byte>
 800551e:	0003      	movs	r3, r0
 8005520:	001a      	movs	r2, r3
 8005522:	4b5d      	ldr	r3, [pc, #372]	; (8005698 <pressure_sensor_measure_pressure_temperature+0x29c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	18d2      	adds	r2, r2, r3
 8005528:	4b5b      	ldr	r3, [pc, #364]	; (8005698 <pressure_sensor_measure_pressure_temperature+0x29c>)
 800552a:	601a      	str	r2, [r3, #0]
    // set spi1 cs pin                                                                      	
    spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)spi1_cs_pressure_Pin ;	// set
 800552c:	23a0      	movs	r3, #160	; 0xa0
 800552e:	05db      	lsls	r3, r3, #23
 8005530:	2210      	movs	r2, #16
 8005532:	619a      	str	r2, [r3, #24]
	                                                                                        	
    //---------------------------------------------------
	                                                                                        	
	dT = (double)temperature - (double)sensor_prom[5]*DEG_2_8;                              	
 8005534:	4b58      	ldr	r3, [pc, #352]	; (8005698 <pressure_sensor_measure_pressure_temperature+0x29c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	0018      	movs	r0, r3
 800553a:	f7fc fdf1 	bl	8002120 <__aeabi_ui2d>
 800553e:	0004      	movs	r4, r0
 8005540:	000d      	movs	r5, r1
 8005542:	4b56      	ldr	r3, [pc, #344]	; (800569c <pressure_sensor_measure_pressure_temperature+0x2a0>)
 8005544:	895b      	ldrh	r3, [r3, #10]
 8005546:	0018      	movs	r0, r3
 8005548:	f7fc fdea 	bl	8002120 <__aeabi_ui2d>
 800554c:	2200      	movs	r2, #0
 800554e:	4b54      	ldr	r3, [pc, #336]	; (80056a0 <pressure_sensor_measure_pressure_temperature+0x2a4>)
 8005550:	f7fb ffbc 	bl	80014cc <__aeabi_dmul>
 8005554:	0002      	movs	r2, r0
 8005556:	000b      	movs	r3, r1
 8005558:	0020      	movs	r0, r4
 800555a:	0029      	movs	r1, r5
 800555c:	f7fc fa28 	bl	80019b0 <__aeabi_dsub>
 8005560:	0003      	movs	r3, r0
 8005562:	000c      	movs	r4, r1
 8005564:	4a4f      	ldr	r2, [pc, #316]	; (80056a4 <pressure_sensor_measure_pressure_temperature+0x2a8>)
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	6054      	str	r4, [r2, #4]
    actual_temperature = 2000 + (dT*((double)sensor_prom[6]))/DEG_2_23;
 800556a:	4b4c      	ldr	r3, [pc, #304]	; (800569c <pressure_sensor_measure_pressure_temperature+0x2a0>)
 800556c:	899b      	ldrh	r3, [r3, #12]
 800556e:	0018      	movs	r0, r3
 8005570:	f7fc fdd6 	bl	8002120 <__aeabi_ui2d>
 8005574:	4b4b      	ldr	r3, [pc, #300]	; (80056a4 <pressure_sensor_measure_pressure_temperature+0x2a8>)
 8005576:	685c      	ldr	r4, [r3, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	001a      	movs	r2, r3
 800557c:	0023      	movs	r3, r4
 800557e:	f7fb ffa5 	bl	80014cc <__aeabi_dmul>
 8005582:	0003      	movs	r3, r0
 8005584:	000c      	movs	r4, r1
 8005586:	0018      	movs	r0, r3
 8005588:	0021      	movs	r1, r4
 800558a:	2200      	movs	r2, #0
 800558c:	4b46      	ldr	r3, [pc, #280]	; (80056a8 <pressure_sensor_measure_pressure_temperature+0x2ac>)
 800558e:	f7fb fb93 	bl	8000cb8 <__aeabi_ddiv>
 8005592:	0003      	movs	r3, r0
 8005594:	000c      	movs	r4, r1
 8005596:	0018      	movs	r0, r3
 8005598:	0021      	movs	r1, r4
 800559a:	2200      	movs	r2, #0
 800559c:	4b43      	ldr	r3, [pc, #268]	; (80056ac <pressure_sensor_measure_pressure_temperature+0x2b0>)
 800559e:	f7fb f86f 	bl	8000680 <__aeabi_dadd>
 80055a2:	0003      	movs	r3, r0
 80055a4:	000c      	movs	r4, r1
 80055a6:	4a42      	ldr	r2, [pc, #264]	; (80056b0 <pressure_sensor_measure_pressure_temperature+0x2b4>)
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	6054      	str	r4, [r2, #4]
	                                                                                        	
	OFF = ((double)sensor_prom[2])*DEG_2_18 + (((double)sensor_prom[4])*dT)/DEG_2_5;        	
 80055ac:	4b3b      	ldr	r3, [pc, #236]	; (800569c <pressure_sensor_measure_pressure_temperature+0x2a0>)
 80055ae:	889b      	ldrh	r3, [r3, #4]
 80055b0:	0018      	movs	r0, r3
 80055b2:	f7fc fdb5 	bl	8002120 <__aeabi_ui2d>
 80055b6:	2200      	movs	r2, #0
 80055b8:	4b3e      	ldr	r3, [pc, #248]	; (80056b4 <pressure_sensor_measure_pressure_temperature+0x2b8>)
 80055ba:	f7fb ff87 	bl	80014cc <__aeabi_dmul>
 80055be:	0003      	movs	r3, r0
 80055c0:	000c      	movs	r4, r1
 80055c2:	001d      	movs	r5, r3
 80055c4:	0026      	movs	r6, r4
 80055c6:	4b35      	ldr	r3, [pc, #212]	; (800569c <pressure_sensor_measure_pressure_temperature+0x2a0>)
 80055c8:	891b      	ldrh	r3, [r3, #8]
 80055ca:	0018      	movs	r0, r3
 80055cc:	f7fc fda8 	bl	8002120 <__aeabi_ui2d>
 80055d0:	4b34      	ldr	r3, [pc, #208]	; (80056a4 <pressure_sensor_measure_pressure_temperature+0x2a8>)
 80055d2:	685c      	ldr	r4, [r3, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	001a      	movs	r2, r3
 80055d8:	0023      	movs	r3, r4
 80055da:	f7fb ff77 	bl	80014cc <__aeabi_dmul>
 80055de:	0003      	movs	r3, r0
 80055e0:	000c      	movs	r4, r1
 80055e2:	0018      	movs	r0, r3
 80055e4:	0021      	movs	r1, r4
 80055e6:	2200      	movs	r2, #0
 80055e8:	4b33      	ldr	r3, [pc, #204]	; (80056b8 <pressure_sensor_measure_pressure_temperature+0x2bc>)
 80055ea:	f7fb fb65 	bl	8000cb8 <__aeabi_ddiv>
 80055ee:	0003      	movs	r3, r0
 80055f0:	000c      	movs	r4, r1
 80055f2:	001a      	movs	r2, r3
 80055f4:	0023      	movs	r3, r4
 80055f6:	0028      	movs	r0, r5
 80055f8:	0031      	movs	r1, r6
 80055fa:	f7fb f841 	bl	8000680 <__aeabi_dadd>
 80055fe:	0003      	movs	r3, r0
 8005600:	000c      	movs	r4, r1
 8005602:	4a2e      	ldr	r2, [pc, #184]	; (80056bc <pressure_sensor_measure_pressure_temperature+0x2c0>)
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	6054      	str	r4, [r2, #4]
    SENS = ((double)sensor_prom[1])*DEG_2_17 + (((double)sensor_prom[3])*dT)/DEG_2_7;
 8005608:	4b24      	ldr	r3, [pc, #144]	; (800569c <pressure_sensor_measure_pressure_temperature+0x2a0>)
 800560a:	885b      	ldrh	r3, [r3, #2]
 800560c:	0018      	movs	r0, r3
 800560e:	f7fc fd87 	bl	8002120 <__aeabi_ui2d>
 8005612:	2200      	movs	r2, #0
 8005614:	2382      	movs	r3, #130	; 0x82
 8005616:	05db      	lsls	r3, r3, #23
 8005618:	f7fb ff58 	bl	80014cc <__aeabi_dmul>
 800561c:	0003      	movs	r3, r0
 800561e:	000c      	movs	r4, r1
 8005620:	001d      	movs	r5, r3
 8005622:	0026      	movs	r6, r4
 8005624:	4b1d      	ldr	r3, [pc, #116]	; (800569c <pressure_sensor_measure_pressure_temperature+0x2a0>)
 8005626:	88db      	ldrh	r3, [r3, #6]
 8005628:	0018      	movs	r0, r3
 800562a:	f7fc fd79 	bl	8002120 <__aeabi_ui2d>
 800562e:	4b1d      	ldr	r3, [pc, #116]	; (80056a4 <pressure_sensor_measure_pressure_temperature+0x2a8>)
 8005630:	685c      	ldr	r4, [r3, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	001a      	movs	r2, r3
 8005636:	0023      	movs	r3, r4
 8005638:	f7fb ff48 	bl	80014cc <__aeabi_dmul>
 800563c:	0003      	movs	r3, r0
 800563e:	000c      	movs	r4, r1
 8005640:	0018      	movs	r0, r3
 8005642:	0021      	movs	r1, r4
 8005644:	2200      	movs	r2, #0
 8005646:	4b1e      	ldr	r3, [pc, #120]	; (80056c0 <pressure_sensor_measure_pressure_temperature+0x2c4>)
 8005648:	f7fb fb36 	bl	8000cb8 <__aeabi_ddiv>
 800564c:	0003      	movs	r3, r0
 800564e:	000c      	movs	r4, r1
 8005650:	001a      	movs	r2, r3
 8005652:	0023      	movs	r3, r4
 8005654:	0028      	movs	r0, r5
 8005656:	0031      	movs	r1, r6
 8005658:	f7fb f812 	bl	8000680 <__aeabi_dadd>
 800565c:	0003      	movs	r3, r0
 800565e:	000c      	movs	r4, r1
 8005660:	4a18      	ldr	r2, [pc, #96]	; (80056c4 <pressure_sensor_measure_pressure_temperature+0x2c8>)
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	6054      	str	r4, [r2, #4]
	double T2;                                                                              	
	double SENS2;                                                                           	
    double OFF2;
                                                                                            
	                                                                                        	
	if(actual_temperature >= 2000)                                                          	
 8005666:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <pressure_sensor_measure_pressure_temperature+0x2b4>)
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	6859      	ldr	r1, [r3, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <pressure_sensor_measure_pressure_temperature+0x2b0>)
 8005670:	f7fa fefc 	bl	800046c <__aeabi_dcmpge>
 8005674:	1e03      	subs	r3, r0, #0
 8005676:	d027      	beq.n	80056c8 <pressure_sensor_measure_pressure_temperature+0x2cc>
	{                                                                                       	
		T2 = 0;                                                                             	
 8005678:	2300      	movs	r3, #0
 800567a:	2400      	movs	r4, #0
 800567c:	623b      	str	r3, [r7, #32]
 800567e:	627c      	str	r4, [r7, #36]	; 0x24
		SENS2 = 0;                                                                          	
 8005680:	2300      	movs	r3, #0
 8005682:	2400      	movs	r4, #0
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	61fc      	str	r4, [r7, #28]
		OFF2 = 0;                                                                           	
 8005688:	2300      	movs	r3, #0
 800568a:	2400      	movs	r4, #0
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	617c      	str	r4, [r7, #20]
 8005690:	e0a6      	b.n	80057e0 <pressure_sensor_measure_pressure_temperature+0x3e4>
 8005692:	46c0      	nop			; (mov r8, r8)
 8005694:	200002fc 	.word	0x200002fc
 8005698:	20000300 	.word	0x20000300
 800569c:	20000330 	.word	0x20000330
 80056a0:	40700000 	.word	0x40700000
 80056a4:	20000308 	.word	0x20000308
 80056a8:	41600000 	.word	0x41600000
 80056ac:	409f4000 	.word	0x409f4000
 80056b0:	20000310 	.word	0x20000310
 80056b4:	41100000 	.word	0x41100000
 80056b8:	40400000 	.word	0x40400000
 80056bc:	20000318 	.word	0x20000318
 80056c0:	40600000 	.word	0x40600000
 80056c4:	20000320 	.word	0x20000320
	}                                                                                       	
	else                                                                                    	
	{                                                                                       	
		T2 = 3.0 * dT * dT / DEG_2_33;                                                      	
 80056c8:	4b6f      	ldr	r3, [pc, #444]	; (8005888 <pressure_sensor_measure_pressure_temperature+0x48c>)
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	6859      	ldr	r1, [r3, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	4b6e      	ldr	r3, [pc, #440]	; (800588c <pressure_sensor_measure_pressure_temperature+0x490>)
 80056d2:	f7fb fefb 	bl	80014cc <__aeabi_dmul>
 80056d6:	0003      	movs	r3, r0
 80056d8:	000c      	movs	r4, r1
 80056da:	0018      	movs	r0, r3
 80056dc:	0021      	movs	r1, r4
 80056de:	4b6a      	ldr	r3, [pc, #424]	; (8005888 <pressure_sensor_measure_pressure_temperature+0x48c>)
 80056e0:	685c      	ldr	r4, [r3, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	001a      	movs	r2, r3
 80056e6:	0023      	movs	r3, r4
 80056e8:	f7fb fef0 	bl	80014cc <__aeabi_dmul>
 80056ec:	0003      	movs	r3, r0
 80056ee:	000c      	movs	r4, r1
 80056f0:	0018      	movs	r0, r3
 80056f2:	0021      	movs	r1, r4
 80056f4:	2200      	movs	r2, #0
 80056f6:	2384      	movs	r3, #132	; 0x84
 80056f8:	05db      	lsls	r3, r3, #23
 80056fa:	f7fb fadd 	bl	8000cb8 <__aeabi_ddiv>
 80056fe:	0003      	movs	r3, r0
 8005700:	000c      	movs	r4, r1
 8005702:	623b      	str	r3, [r7, #32]
 8005704:	627c      	str	r4, [r7, #36]	; 0x24
		double aux_dt = (actual_temperature - 2000);                                        	
 8005706:	4b62      	ldr	r3, [pc, #392]	; (8005890 <pressure_sensor_measure_pressure_temperature+0x494>)
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	6859      	ldr	r1, [r3, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	4b61      	ldr	r3, [pc, #388]	; (8005894 <pressure_sensor_measure_pressure_temperature+0x498>)
 8005710:	f7fc f94e 	bl	80019b0 <__aeabi_dsub>
 8005714:	0003      	movs	r3, r0
 8005716:	000c      	movs	r4, r1
 8005718:	60bb      	str	r3, [r7, #8]
 800571a:	60fc      	str	r4, [r7, #12]
		OFF2 = 3.0 * aux_dt * aux_dt / 8.0;                                                 	
 800571c:	2200      	movs	r2, #0
 800571e:	4b5b      	ldr	r3, [pc, #364]	; (800588c <pressure_sensor_measure_pressure_temperature+0x490>)
 8005720:	68b8      	ldr	r0, [r7, #8]
 8005722:	68f9      	ldr	r1, [r7, #12]
 8005724:	f7fb fed2 	bl	80014cc <__aeabi_dmul>
 8005728:	0003      	movs	r3, r0
 800572a:	000c      	movs	r4, r1
 800572c:	0018      	movs	r0, r3
 800572e:	0021      	movs	r1, r4
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f7fb feca 	bl	80014cc <__aeabi_dmul>
 8005738:	0003      	movs	r3, r0
 800573a:	000c      	movs	r4, r1
 800573c:	0018      	movs	r0, r3
 800573e:	0021      	movs	r1, r4
 8005740:	2200      	movs	r2, #0
 8005742:	4b55      	ldr	r3, [pc, #340]	; (8005898 <pressure_sensor_measure_pressure_temperature+0x49c>)
 8005744:	f7fb fab8 	bl	8000cb8 <__aeabi_ddiv>
 8005748:	0003      	movs	r3, r0
 800574a:	000c      	movs	r4, r1
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	617c      	str	r4, [r7, #20]
    	SENS2 = 7.0 * aux_dt * aux_dt / 8.0;
 8005750:	2200      	movs	r2, #0
 8005752:	4b52      	ldr	r3, [pc, #328]	; (800589c <pressure_sensor_measure_pressure_temperature+0x4a0>)
 8005754:	68b8      	ldr	r0, [r7, #8]
 8005756:	68f9      	ldr	r1, [r7, #12]
 8005758:	f7fb feb8 	bl	80014cc <__aeabi_dmul>
 800575c:	0003      	movs	r3, r0
 800575e:	000c      	movs	r4, r1
 8005760:	0018      	movs	r0, r3
 8005762:	0021      	movs	r1, r4
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f7fb feb0 	bl	80014cc <__aeabi_dmul>
 800576c:	0003      	movs	r3, r0
 800576e:	000c      	movs	r4, r1
 8005770:	0018      	movs	r0, r3
 8005772:	0021      	movs	r1, r4
 8005774:	2200      	movs	r2, #0
 8005776:	4b48      	ldr	r3, [pc, #288]	; (8005898 <pressure_sensor_measure_pressure_temperature+0x49c>)
 8005778:	f7fb fa9e 	bl	8000cb8 <__aeabi_ddiv>
 800577c:	0003      	movs	r3, r0
 800577e:	000c      	movs	r4, r1
 8005780:	61bb      	str	r3, [r7, #24]
 8005782:	61fc      	str	r4, [r7, #28]
	                                                                                        	
		if(actual_temperature < -1500)                                                      	
 8005784:	4b42      	ldr	r3, [pc, #264]	; (8005890 <pressure_sensor_measure_pressure_temperature+0x494>)
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	6859      	ldr	r1, [r3, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	4b44      	ldr	r3, [pc, #272]	; (80058a0 <pressure_sensor_measure_pressure_temperature+0x4a4>)
 800578e:	f7fa fe4f 	bl	8000430 <__aeabi_dcmplt>
 8005792:	1e03      	subs	r3, r0, #0
 8005794:	d024      	beq.n	80057e0 <pressure_sensor_measure_pressure_temperature+0x3e4>
		{                                                                                   	
			double aux_dt = actual_temperature + 1500;                                      	
 8005796:	4b3e      	ldr	r3, [pc, #248]	; (8005890 <pressure_sensor_measure_pressure_temperature+0x494>)
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	6859      	ldr	r1, [r3, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	4b41      	ldr	r3, [pc, #260]	; (80058a4 <pressure_sensor_measure_pressure_temperature+0x4a8>)
 80057a0:	f7fa ff6e 	bl	8000680 <__aeabi_dadd>
 80057a4:	0003      	movs	r3, r0
 80057a6:	000c      	movs	r4, r1
 80057a8:	603b      	str	r3, [r7, #0]
 80057aa:	607c      	str	r4, [r7, #4]
			SENS2 = SENS2 + 3.0 * aux_dt * aux_dt;                                          	
 80057ac:	2200      	movs	r2, #0
 80057ae:	4b37      	ldr	r3, [pc, #220]	; (800588c <pressure_sensor_measure_pressure_temperature+0x490>)
 80057b0:	6838      	ldr	r0, [r7, #0]
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	f7fb fe8a 	bl	80014cc <__aeabi_dmul>
 80057b8:	0003      	movs	r3, r0
 80057ba:	000c      	movs	r4, r1
 80057bc:	0018      	movs	r0, r3
 80057be:	0021      	movs	r1, r4
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f7fb fe82 	bl	80014cc <__aeabi_dmul>
 80057c8:	0003      	movs	r3, r0
 80057ca:	000c      	movs	r4, r1
 80057cc:	001a      	movs	r2, r3
 80057ce:	0023      	movs	r3, r4
 80057d0:	69b8      	ldr	r0, [r7, #24]
 80057d2:	69f9      	ldr	r1, [r7, #28]
 80057d4:	f7fa ff54 	bl	8000680 <__aeabi_dadd>
 80057d8:	0003      	movs	r3, r0
 80057da:	000c      	movs	r4, r1
 80057dc:	61bb      	str	r3, [r7, #24]
 80057de:	61fc      	str	r4, [r7, #28]
		}                                                                                   	
    }
	                                                                                        	
	actual_temperature = actual_temperature - T2;                                           	
 80057e0:	4b2b      	ldr	r3, [pc, #172]	; (8005890 <pressure_sensor_measure_pressure_temperature+0x494>)
 80057e2:	6818      	ldr	r0, [r3, #0]
 80057e4:	6859      	ldr	r1, [r3, #4]
 80057e6:	6a3a      	ldr	r2, [r7, #32]
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	f7fc f8e1 	bl	80019b0 <__aeabi_dsub>
 80057ee:	0003      	movs	r3, r0
 80057f0:	000c      	movs	r4, r1
 80057f2:	4a27      	ldr	r2, [pc, #156]	; (8005890 <pressure_sensor_measure_pressure_temperature+0x494>)
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	6054      	str	r4, [r2, #4]
	                                                                                        	
	OFF = OFF - OFF2;                                                                       	
 80057f8:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <pressure_sensor_measure_pressure_temperature+0x4ac>)
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	6859      	ldr	r1, [r3, #4]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f7fc f8d5 	bl	80019b0 <__aeabi_dsub>
 8005806:	0003      	movs	r3, r0
 8005808:	000c      	movs	r4, r1
 800580a:	4a27      	ldr	r2, [pc, #156]	; (80058a8 <pressure_sensor_measure_pressure_temperature+0x4ac>)
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	6054      	str	r4, [r2, #4]
    SENS = SENS - SENS2;
 8005810:	4b26      	ldr	r3, [pc, #152]	; (80058ac <pressure_sensor_measure_pressure_temperature+0x4b0>)
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	6859      	ldr	r1, [r3, #4]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f7fc f8c9 	bl	80019b0 <__aeabi_dsub>
 800581e:	0003      	movs	r3, r0
 8005820:	000c      	movs	r4, r1
 8005822:	4a22      	ldr	r2, [pc, #136]	; (80058ac <pressure_sensor_measure_pressure_temperature+0x4b0>)
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	6054      	str	r4, [r2, #4]
	                                                                                        	
	P = (((double)pressure*SENS)/DEG_2_21 - OFF)/DEG_2_15;                                  
 8005828:	4b21      	ldr	r3, [pc, #132]	; (80058b0 <pressure_sensor_measure_pressure_temperature+0x4b4>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	0018      	movs	r0, r3
 800582e:	f7fc fc77 	bl	8002120 <__aeabi_ui2d>
 8005832:	4b1e      	ldr	r3, [pc, #120]	; (80058ac <pressure_sensor_measure_pressure_temperature+0x4b0>)
 8005834:	685c      	ldr	r4, [r3, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	001a      	movs	r2, r3
 800583a:	0023      	movs	r3, r4
 800583c:	f7fb fe46 	bl	80014cc <__aeabi_dmul>
 8005840:	0003      	movs	r3, r0
 8005842:	000c      	movs	r4, r1
 8005844:	0018      	movs	r0, r3
 8005846:	0021      	movs	r1, r4
 8005848:	2200      	movs	r2, #0
 800584a:	4b1a      	ldr	r3, [pc, #104]	; (80058b4 <pressure_sensor_measure_pressure_temperature+0x4b8>)
 800584c:	f7fb fa34 	bl	8000cb8 <__aeabi_ddiv>
 8005850:	0003      	movs	r3, r0
 8005852:	000c      	movs	r4, r1
 8005854:	0018      	movs	r0, r3
 8005856:	0021      	movs	r1, r4
 8005858:	4b13      	ldr	r3, [pc, #76]	; (80058a8 <pressure_sensor_measure_pressure_temperature+0x4ac>)
 800585a:	685c      	ldr	r4, [r3, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	001a      	movs	r2, r3
 8005860:	0023      	movs	r3, r4
 8005862:	f7fc f8a5 	bl	80019b0 <__aeabi_dsub>
 8005866:	0003      	movs	r3, r0
 8005868:	000c      	movs	r4, r1
 800586a:	0018      	movs	r0, r3
 800586c:	0021      	movs	r1, r4
 800586e:	2200      	movs	r2, #0
 8005870:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <pressure_sensor_measure_pressure_temperature+0x4bc>)
 8005872:	f7fb fa21 	bl	8000cb8 <__aeabi_ddiv>
 8005876:	0003      	movs	r3, r0
 8005878:	000c      	movs	r4, r1
 800587a:	4a10      	ldr	r2, [pc, #64]	; (80058bc <pressure_sensor_measure_pressure_temperature+0x4c0>)
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	6054      	str	r4, [r2, #4]


}
 8005880:	46c0      	nop			; (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	b00d      	add	sp, #52	; 0x34
 8005886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005888:	20000308 	.word	0x20000308
 800588c:	40080000 	.word	0x40080000
 8005890:	20000310 	.word	0x20000310
 8005894:	409f4000 	.word	0x409f4000
 8005898:	40200000 	.word	0x40200000
 800589c:	401c0000 	.word	0x401c0000
 80058a0:	c0977000 	.word	0xc0977000
 80058a4:	40977000 	.word	0x40977000
 80058a8:	20000318 	.word	0x20000318
 80058ac:	20000320 	.word	0x20000320
 80058b0:	200002fc 	.word	0x200002fc
 80058b4:	41400000 	.word	0x41400000
 80058b8:	40e00000 	.word	0x40e00000
 80058bc:	20000328 	.word	0x20000328

080058c0 <pressure_sensor_get_pressure>:




double pressure_sensor_get_pressure()
{
 80058c0:	b590      	push	{r4, r7, lr}
 80058c2:	af00      	add	r7, sp, #0
	return P;
 80058c4:	4b03      	ldr	r3, [pc, #12]	; (80058d4 <pressure_sensor_get_pressure+0x14>)
 80058c6:	685c      	ldr	r4, [r3, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
}
 80058ca:	0018      	movs	r0, r3
 80058cc:	0021      	movs	r1, r4
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd90      	pop	{r4, r7, pc}
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	20000328 	.word	0x20000328

080058d8 <pressure_sensor_get_temperature>:

double pressure_sensor_get_temperature()
{
 80058d8:	b590      	push	{r4, r7, lr}
 80058da:	af00      	add	r7, sp, #0
	return actual_temperature;
 80058dc:	4b03      	ldr	r3, [pc, #12]	; (80058ec <pressure_sensor_get_temperature+0x14>)
 80058de:	685c      	ldr	r4, [r3, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
}
 80058e2:	0018      	movs	r0, r3
 80058e4:	0021      	movs	r1, r4
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd90      	pop	{r4, r7, pc}
 80058ea:	46c0      	nop			; (mov r8, r8)
 80058ec:	20000310 	.word	0x20000310

080058f0 <rtc_ds3231_get_date>:
#include "rtc_ds3231_interface.h"



void rtc_ds3231_get_date(uint8_t *Date, uint8_t *Month, uint8_t *Year)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
	*Date = date;
 80058fc:	4b07      	ldr	r3, [pc, #28]	; (800591c <rtc_ds3231_get_date+0x2c>)
 80058fe:	781a      	ldrb	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	701a      	strb	r2, [r3, #0]
	*Month = month;
 8005904:	4b06      	ldr	r3, [pc, #24]	; (8005920 <rtc_ds3231_get_date+0x30>)
 8005906:	781a      	ldrb	r2, [r3, #0]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	701a      	strb	r2, [r3, #0]
	*Year = year;
 800590c:	4b05      	ldr	r3, [pc, #20]	; (8005924 <rtc_ds3231_get_date+0x34>)
 800590e:	781a      	ldrb	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	701a      	strb	r2, [r3, #0]
}
 8005914:	46c0      	nop			; (mov r8, r8)
 8005916:	46bd      	mov	sp, r7
 8005918:	b004      	add	sp, #16
 800591a:	bd80      	pop	{r7, pc}
 800591c:	2000034e 	.word	0x2000034e
 8005920:	2000034d 	.word	0x2000034d
 8005924:	2000034c 	.word	0x2000034c

08005928 <rtc_ds3231_get_time>:
void rtc_ds3231_get_time(uint8_t *Hours, uint8_t *Minutes, uint8_t *Seconds)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
	*Hours = hours;
 8005934:	4b07      	ldr	r3, [pc, #28]	; (8005954 <rtc_ds3231_get_time+0x2c>)
 8005936:	781a      	ldrb	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	701a      	strb	r2, [r3, #0]
	*Minutes = minutes;
 800593c:	4b06      	ldr	r3, [pc, #24]	; (8005958 <rtc_ds3231_get_time+0x30>)
 800593e:	781a      	ldrb	r2, [r3, #0]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	701a      	strb	r2, [r3, #0]
	*Seconds = seconds;
 8005944:	4b05      	ldr	r3, [pc, #20]	; (800595c <rtc_ds3231_get_time+0x34>)
 8005946:	781a      	ldrb	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	701a      	strb	r2, [r3, #0]
}
 800594c:	46c0      	nop			; (mov r8, r8)
 800594e:	46bd      	mov	sp, r7
 8005950:	b004      	add	sp, #16
 8005952:	bd80      	pop	{r7, pc}
 8005954:	2000034f 	.word	0x2000034f
 8005958:	20000350 	.word	0x20000350
 800595c:	20000351 	.word	0x20000351

08005960 <rtc_ds3231_set_i2c_handle>:
	HAL_I2C_Mem_Write(ds3231_i2c_handle, ds3231_shifted_address, 0x1, 1, &(ds3231_buffer[1]), data_array_length, 500);
	HAL_I2C_Mem_Write(ds3231_i2c_handle, ds3231_shifted_address, 0x2, 1, &(ds3231_buffer[2]), data_array_length, 500);
}

void rtc_ds3231_set_i2c_handle(I2C_HandleTypeDef *handle)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	ds3231_i2c_handle = handle;
 8005968:	4b03      	ldr	r3, [pc, #12]	; (8005978 <rtc_ds3231_set_i2c_handle+0x18>)
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	601a      	str	r2, [r3, #0]
}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	46bd      	mov	sp, r7
 8005972:	b002      	add	sp, #8
 8005974:	bd80      	pop	{r7, pc}
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	20000348 	.word	0x20000348

0800597c <rtc_ds3231_action>:


void rtc_ds3231_action()
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af04      	add	r7, sp, #16

	uint16_t data_array_length = 1;
 8005982:	1dbb      	adds	r3, r7, #6
 8005984:	2201      	movs	r2, #1
 8005986:	801a      	strh	r2, [r3, #0]

	uint8_t i2c_status;

	//i2c_status = HAL_I2C_Mem_Read(ds3231_i2c_handle, ds3231_shifted_address, 0x0, 1, ds3231_buffer, data_array_length, 500);
	HAL_I2C_Mem_Read(ds3231_i2c_handle, ds3231_shifted_address, 0x0, 1, &(ds3231_buffer[0]), data_array_length, 500);
 8005988:	4b72      	ldr	r3, [pc, #456]	; (8005b54 <rtc_ds3231_action+0x1d8>)
 800598a:	6818      	ldr	r0, [r3, #0]
 800598c:	4b72      	ldr	r3, [pc, #456]	; (8005b58 <rtc_ds3231_action+0x1dc>)
 800598e:	8819      	ldrh	r1, [r3, #0]
 8005990:	23fa      	movs	r3, #250	; 0xfa
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	9302      	str	r3, [sp, #8]
 8005996:	1dbb      	adds	r3, r7, #6
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	9301      	str	r3, [sp, #4]
 800599c:	4b6f      	ldr	r3, [pc, #444]	; (8005b5c <rtc_ds3231_action+0x1e0>)
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	2301      	movs	r3, #1
 80059a2:	2200      	movs	r2, #0
 80059a4:	f001 fe70 	bl	8007688 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(ds3231_i2c_handle, ds3231_shifted_address, 0x1, 1, &(ds3231_buffer[1]), data_array_length, 500);
 80059a8:	4b6a      	ldr	r3, [pc, #424]	; (8005b54 <rtc_ds3231_action+0x1d8>)
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	4b6a      	ldr	r3, [pc, #424]	; (8005b58 <rtc_ds3231_action+0x1dc>)
 80059ae:	8819      	ldrh	r1, [r3, #0]
 80059b0:	23fa      	movs	r3, #250	; 0xfa
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	9302      	str	r3, [sp, #8]
 80059b6:	1dbb      	adds	r3, r7, #6
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	4b68      	ldr	r3, [pc, #416]	; (8005b60 <rtc_ds3231_action+0x1e4>)
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	2301      	movs	r3, #1
 80059c2:	2201      	movs	r2, #1
 80059c4:	f001 fe60 	bl	8007688 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(ds3231_i2c_handle, ds3231_shifted_address, 0x2, 1, &(ds3231_buffer[2]), data_array_length, 500);
 80059c8:	4b62      	ldr	r3, [pc, #392]	; (8005b54 <rtc_ds3231_action+0x1d8>)
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	4b62      	ldr	r3, [pc, #392]	; (8005b58 <rtc_ds3231_action+0x1dc>)
 80059ce:	8819      	ldrh	r1, [r3, #0]
 80059d0:	23fa      	movs	r3, #250	; 0xfa
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	9302      	str	r3, [sp, #8]
 80059d6:	1dbb      	adds	r3, r7, #6
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	4b61      	ldr	r3, [pc, #388]	; (8005b64 <rtc_ds3231_action+0x1e8>)
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	2301      	movs	r3, #1
 80059e2:	2202      	movs	r2, #2
 80059e4:	f001 fe50 	bl	8007688 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(ds3231_i2c_handle, ds3231_shifted_address, 0x3, 1, &(ds3231_buffer[3]), data_array_length, 500);
 80059e8:	4b5a      	ldr	r3, [pc, #360]	; (8005b54 <rtc_ds3231_action+0x1d8>)
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	4b5a      	ldr	r3, [pc, #360]	; (8005b58 <rtc_ds3231_action+0x1dc>)
 80059ee:	8819      	ldrh	r1, [r3, #0]
 80059f0:	23fa      	movs	r3, #250	; 0xfa
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	9302      	str	r3, [sp, #8]
 80059f6:	1dbb      	adds	r3, r7, #6
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	4b5a      	ldr	r3, [pc, #360]	; (8005b68 <rtc_ds3231_action+0x1ec>)
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	2301      	movs	r3, #1
 8005a02:	2203      	movs	r2, #3
 8005a04:	f001 fe40 	bl	8007688 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(ds3231_i2c_handle, ds3231_shifted_address, 0x4, 1, &(ds3231_buffer[4]), data_array_length, 500);
 8005a08:	4b52      	ldr	r3, [pc, #328]	; (8005b54 <rtc_ds3231_action+0x1d8>)
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	4b52      	ldr	r3, [pc, #328]	; (8005b58 <rtc_ds3231_action+0x1dc>)
 8005a0e:	8819      	ldrh	r1, [r3, #0]
 8005a10:	23fa      	movs	r3, #250	; 0xfa
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	9302      	str	r3, [sp, #8]
 8005a16:	1dbb      	adds	r3, r7, #6
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	9301      	str	r3, [sp, #4]
 8005a1c:	4b53      	ldr	r3, [pc, #332]	; (8005b6c <rtc_ds3231_action+0x1f0>)
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	2301      	movs	r3, #1
 8005a22:	2204      	movs	r2, #4
 8005a24:	f001 fe30 	bl	8007688 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(ds3231_i2c_handle, ds3231_shifted_address, 0x5, 1, &(ds3231_buffer[5]), data_array_length, 500);
 8005a28:	4b4a      	ldr	r3, [pc, #296]	; (8005b54 <rtc_ds3231_action+0x1d8>)
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	4b4a      	ldr	r3, [pc, #296]	; (8005b58 <rtc_ds3231_action+0x1dc>)
 8005a2e:	8819      	ldrh	r1, [r3, #0]
 8005a30:	23fa      	movs	r3, #250	; 0xfa
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	9302      	str	r3, [sp, #8]
 8005a36:	1dbb      	adds	r3, r7, #6
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	9301      	str	r3, [sp, #4]
 8005a3c:	4b4c      	ldr	r3, [pc, #304]	; (8005b70 <rtc_ds3231_action+0x1f4>)
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	2301      	movs	r3, #1
 8005a42:	2205      	movs	r2, #5
 8005a44:	f001 fe20 	bl	8007688 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(ds3231_i2c_handle, ds3231_shifted_address, 0x6, 1, &(ds3231_buffer[6]), data_array_length, 500);
 8005a48:	4b42      	ldr	r3, [pc, #264]	; (8005b54 <rtc_ds3231_action+0x1d8>)
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	4b42      	ldr	r3, [pc, #264]	; (8005b58 <rtc_ds3231_action+0x1dc>)
 8005a4e:	8819      	ldrh	r1, [r3, #0]
 8005a50:	23fa      	movs	r3, #250	; 0xfa
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	9302      	str	r3, [sp, #8]
 8005a56:	1dbb      	adds	r3, r7, #6
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	9301      	str	r3, [sp, #4]
 8005a5c:	4b45      	ldr	r3, [pc, #276]	; (8005b74 <rtc_ds3231_action+0x1f8>)
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	2301      	movs	r3, #1
 8005a62:	2206      	movs	r2, #6
 8005a64:	f001 fe10 	bl	8007688 <HAL_I2C_Mem_Read>
	
	seconds = 10*(ds3231_buffer[0]>>4) + (ds3231_buffer[0] & 0x0f);
 8005a68:	4b3c      	ldr	r3, [pc, #240]	; (8005b5c <rtc_ds3231_action+0x1e0>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	091b      	lsrs	r3, r3, #4
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	1c1a      	adds	r2, r3, #0
 8005a72:	0092      	lsls	r2, r2, #2
 8005a74:	18d3      	adds	r3, r2, r3
 8005a76:	18db      	adds	r3, r3, r3
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	4b38      	ldr	r3, [pc, #224]	; (8005b5c <rtc_ds3231_action+0x1e0>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	210f      	movs	r1, #15
 8005a80:	400b      	ands	r3, r1
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	18d3      	adds	r3, r2, r3
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	4b3b      	ldr	r3, [pc, #236]	; (8005b78 <rtc_ds3231_action+0x1fc>)
 8005a8a:	701a      	strb	r2, [r3, #0]
	minutes = 10*(ds3231_buffer[1]>>4) + (ds3231_buffer[1] & 0x0f);
 8005a8c:	4b33      	ldr	r3, [pc, #204]	; (8005b5c <rtc_ds3231_action+0x1e0>)
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	091b      	lsrs	r3, r3, #4
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	1c1a      	adds	r2, r3, #0
 8005a96:	0092      	lsls	r2, r2, #2
 8005a98:	18d3      	adds	r3, r2, r3
 8005a9a:	18db      	adds	r3, r3, r3
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	4b2f      	ldr	r3, [pc, #188]	; (8005b5c <rtc_ds3231_action+0x1e0>)
 8005aa0:	785b      	ldrb	r3, [r3, #1]
 8005aa2:	210f      	movs	r1, #15
 8005aa4:	400b      	ands	r3, r1
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	18d3      	adds	r3, r2, r3
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	4b33      	ldr	r3, [pc, #204]	; (8005b7c <rtc_ds3231_action+0x200>)
 8005aae:	701a      	strb	r2, [r3, #0]
	hours = 10*((ds3231_buffer[2]>>4) & 0x03) + (ds3231_buffer[2] & 0x0f);
 8005ab0:	4b2a      	ldr	r3, [pc, #168]	; (8005b5c <rtc_ds3231_action+0x1e0>)
 8005ab2:	789b      	ldrb	r3, [r3, #2]
 8005ab4:	091b      	lsrs	r3, r3, #4
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2203      	movs	r2, #3
 8005aba:	4013      	ands	r3, r2
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	1c1a      	adds	r2, r3, #0
 8005ac0:	0092      	lsls	r2, r2, #2
 8005ac2:	18d3      	adds	r3, r2, r3
 8005ac4:	18db      	adds	r3, r3, r3
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	4b24      	ldr	r3, [pc, #144]	; (8005b5c <rtc_ds3231_action+0x1e0>)
 8005aca:	789b      	ldrb	r3, [r3, #2]
 8005acc:	210f      	movs	r1, #15
 8005ace:	400b      	ands	r3, r1
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	18d3      	adds	r3, r2, r3
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	4b2a      	ldr	r3, [pc, #168]	; (8005b80 <rtc_ds3231_action+0x204>)
 8005ad8:	701a      	strb	r2, [r3, #0]
	date = 10*(ds3231_buffer[4]>>4) + (ds3231_buffer[4] & 0x0f);
 8005ada:	4b20      	ldr	r3, [pc, #128]	; (8005b5c <rtc_ds3231_action+0x1e0>)
 8005adc:	791b      	ldrb	r3, [r3, #4]
 8005ade:	091b      	lsrs	r3, r3, #4
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	1c1a      	adds	r2, r3, #0
 8005ae4:	0092      	lsls	r2, r2, #2
 8005ae6:	18d3      	adds	r3, r2, r3
 8005ae8:	18db      	adds	r3, r3, r3
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	4b1b      	ldr	r3, [pc, #108]	; (8005b5c <rtc_ds3231_action+0x1e0>)
 8005aee:	791b      	ldrb	r3, [r3, #4]
 8005af0:	210f      	movs	r1, #15
 8005af2:	400b      	ands	r3, r1
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	18d3      	adds	r3, r2, r3
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	4b22      	ldr	r3, [pc, #136]	; (8005b84 <rtc_ds3231_action+0x208>)
 8005afc:	701a      	strb	r2, [r3, #0]
	month = 10*((ds3231_buffer[5]>>4) & 0x03) + (ds3231_buffer[5] & 0x0f);
 8005afe:	4b17      	ldr	r3, [pc, #92]	; (8005b5c <rtc_ds3231_action+0x1e0>)
 8005b00:	795b      	ldrb	r3, [r3, #5]
 8005b02:	091b      	lsrs	r3, r3, #4
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2203      	movs	r2, #3
 8005b08:	4013      	ands	r3, r2
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	1c1a      	adds	r2, r3, #0
 8005b0e:	0092      	lsls	r2, r2, #2
 8005b10:	18d3      	adds	r3, r2, r3
 8005b12:	18db      	adds	r3, r3, r3
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	4b11      	ldr	r3, [pc, #68]	; (8005b5c <rtc_ds3231_action+0x1e0>)
 8005b18:	795b      	ldrb	r3, [r3, #5]
 8005b1a:	210f      	movs	r1, #15
 8005b1c:	400b      	ands	r3, r1
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	18d3      	adds	r3, r2, r3
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	4b18      	ldr	r3, [pc, #96]	; (8005b88 <rtc_ds3231_action+0x20c>)
 8005b26:	701a      	strb	r2, [r3, #0]
	year = 10*(ds3231_buffer[6]>>4) + (ds3231_buffer[6] & 0x0f);
 8005b28:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <rtc_ds3231_action+0x1e0>)
 8005b2a:	799b      	ldrb	r3, [r3, #6]
 8005b2c:	091b      	lsrs	r3, r3, #4
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	1c1a      	adds	r2, r3, #0
 8005b32:	0092      	lsls	r2, r2, #2
 8005b34:	18d3      	adds	r3, r2, r3
 8005b36:	18db      	adds	r3, r3, r3
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	4b08      	ldr	r3, [pc, #32]	; (8005b5c <rtc_ds3231_action+0x1e0>)
 8005b3c:	799b      	ldrb	r3, [r3, #6]
 8005b3e:	210f      	movs	r1, #15
 8005b40:	400b      	ands	r3, r1
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	18d3      	adds	r3, r2, r3
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <rtc_ds3231_action+0x210>)
 8005b4a:	701a      	strb	r2, [r3, #0]
}
 8005b4c:	46c0      	nop			; (mov r8, r8)
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	b002      	add	sp, #8
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	20000348 	.word	0x20000348
 8005b58:	20000028 	.word	0x20000028
 8005b5c:	20000340 	.word	0x20000340
 8005b60:	20000341 	.word	0x20000341
 8005b64:	20000342 	.word	0x20000342
 8005b68:	20000343 	.word	0x20000343
 8005b6c:	20000344 	.word	0x20000344
 8005b70:	20000345 	.word	0x20000345
 8005b74:	20000346 	.word	0x20000346
 8005b78:	20000351 	.word	0x20000351
 8005b7c:	20000350 	.word	0x20000350
 8005b80:	2000034f 	.word	0x2000034f
 8005b84:	2000034e 	.word	0x2000034e
 8005b88:	2000034d 	.word	0x2000034d
 8005b8c:	2000034c 	.word	0x2000034c

08005b90 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8005b94:	4b18      	ldr	r3, [pc, #96]	; (8005bf8 <MX_SPI1_Init+0x68>)
 8005b96:	4a19      	ldr	r2, [pc, #100]	; (8005bfc <MX_SPI1_Init+0x6c>)
 8005b98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005b9a:	4b17      	ldr	r3, [pc, #92]	; (8005bf8 <MX_SPI1_Init+0x68>)
 8005b9c:	2282      	movs	r2, #130	; 0x82
 8005b9e:	0052      	lsls	r2, r2, #1
 8005ba0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005ba2:	4b15      	ldr	r3, [pc, #84]	; (8005bf8 <MX_SPI1_Init+0x68>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005ba8:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <MX_SPI1_Init+0x68>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bae:	4b12      	ldr	r3, [pc, #72]	; (8005bf8 <MX_SPI1_Init+0x68>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005bb4:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <MX_SPI1_Init+0x68>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005bba:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <MX_SPI1_Init+0x68>)
 8005bbc:	2280      	movs	r2, #128	; 0x80
 8005bbe:	0092      	lsls	r2, r2, #2
 8005bc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bc2:	4b0d      	ldr	r3, [pc, #52]	; (8005bf8 <MX_SPI1_Init+0x68>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <MX_SPI1_Init+0x68>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005bce:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <MX_SPI1_Init+0x68>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bd4:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <MX_SPI1_Init+0x68>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005bda:	4b07      	ldr	r3, [pc, #28]	; (8005bf8 <MX_SPI1_Init+0x68>)
 8005bdc:	2207      	movs	r2, #7
 8005bde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <MX_SPI1_Init+0x68>)
 8005be2:	0018      	movs	r0, r3
 8005be4:	f002 ffdc 	bl	8008ba0 <HAL_SPI_Init>
 8005be8:	1e03      	subs	r3, r0, #0
 8005bea:	d001      	beq.n	8005bf0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005bec:	f7ff fb3a 	bl	8005264 <Error_Handler>
  }

}
 8005bf0:	46c0      	nop			; (mov r8, r8)
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	20000878 	.word	0x20000878
 8005bfc:	40013000 	.word	0x40013000

08005c00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b088      	sub	sp, #32
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c08:	230c      	movs	r3, #12
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	2314      	movs	r3, #20
 8005c10:	001a      	movs	r2, r3
 8005c12:	2100      	movs	r1, #0
 8005c14:	f004 f8f6 	bl	8009e04 <memset>
  if(spiHandle->Instance==SPI1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a18      	ldr	r2, [pc, #96]	; (8005c80 <HAL_SPI_MspInit+0x80>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d129      	bne.n	8005c76 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005c22:	4b18      	ldr	r3, [pc, #96]	; (8005c84 <HAL_SPI_MspInit+0x84>)
 8005c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c26:	4b17      	ldr	r3, [pc, #92]	; (8005c84 <HAL_SPI_MspInit+0x84>)
 8005c28:	2180      	movs	r1, #128	; 0x80
 8005c2a:	0149      	lsls	r1, r1, #5
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c30:	4b14      	ldr	r3, [pc, #80]	; (8005c84 <HAL_SPI_MspInit+0x84>)
 8005c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c34:	4b13      	ldr	r3, [pc, #76]	; (8005c84 <HAL_SPI_MspInit+0x84>)
 8005c36:	2101      	movs	r1, #1
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c3c:	4b11      	ldr	r3, [pc, #68]	; (8005c84 <HAL_SPI_MspInit+0x84>)
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	2201      	movs	r2, #1
 8005c42:	4013      	ands	r3, r2
 8005c44:	60bb      	str	r3, [r7, #8]
 8005c46:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005c48:	210c      	movs	r1, #12
 8005c4a:	187b      	adds	r3, r7, r1
 8005c4c:	22e0      	movs	r2, #224	; 0xe0
 8005c4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c50:	187b      	adds	r3, r7, r1
 8005c52:	2202      	movs	r2, #2
 8005c54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c56:	187b      	adds	r3, r7, r1
 8005c58:	2200      	movs	r2, #0
 8005c5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c5c:	187b      	adds	r3, r7, r1
 8005c5e:	2203      	movs	r2, #3
 8005c60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005c62:	187b      	adds	r3, r7, r1
 8005c64:	2200      	movs	r2, #0
 8005c66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c68:	187a      	adds	r2, r7, r1
 8005c6a:	23a0      	movs	r3, #160	; 0xa0
 8005c6c:	05db      	lsls	r3, r3, #23
 8005c6e:	0011      	movs	r1, r2
 8005c70:	0018      	movs	r0, r3
 8005c72:	f001 f9b1 	bl	8006fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	b008      	add	sp, #32
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	40013000 	.word	0x40013000
 8005c84:	40021000 	.word	0x40021000

08005c88 <ssd1306_set_i2c_port>:

// Screen object
static SSD1306_t SSD1306;

void ssd1306_set_i2c_port(I2C_HandleTypeDef *port, int display_number)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
	SSD1306_I2C_PORT = port;
 8005c92:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <ssd1306_set_i2c_port+0x2c>)
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	601a      	str	r2, [r3, #0]

	if(display_number == 1)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d103      	bne.n	8005ca6 <ssd1306_set_i2c_port+0x1e>
		SSD1306_Buffer = SSD1306_Buffer1;
 8005c9e:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <ssd1306_set_i2c_port+0x30>)
 8005ca0:	4a06      	ldr	r2, [pc, #24]	; (8005cbc <ssd1306_set_i2c_port+0x34>)
 8005ca2:	601a      	str	r2, [r3, #0]
	else
		SSD1306_Buffer = SSD1306_Buffer2;
}
 8005ca4:	e002      	b.n	8005cac <ssd1306_set_i2c_port+0x24>
		SSD1306_Buffer = SSD1306_Buffer2;
 8005ca6:	4b04      	ldr	r3, [pc, #16]	; (8005cb8 <ssd1306_set_i2c_port+0x30>)
 8005ca8:	4a05      	ldr	r2, [pc, #20]	; (8005cc0 <ssd1306_set_i2c_port+0x38>)
 8005caa:	601a      	str	r2, [r3, #0]
}
 8005cac:	46c0      	nop			; (mov r8, r8)
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	b002      	add	sp, #8
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	20000874 	.word	0x20000874
 8005cb8:	20000354 	.word	0x20000354
 8005cbc:	20000358 	.word	0x20000358
 8005cc0:	20000758 	.word	0x20000758

08005cc4 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af04      	add	r7, sp, #16
 8005cca:	0002      	movs	r2, r0
 8005ccc:	1dfb      	adds	r3, r7, #7
 8005cce:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(SSD1306_I2C_PORT,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8005cd0:	4b08      	ldr	r3, [pc, #32]	; (8005cf4 <ssd1306_WriteCommand+0x30>)
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	230a      	movs	r3, #10
 8005cd6:	9302      	str	r3, [sp, #8]
 8005cd8:	2301      	movs	r3, #1
 8005cda:	9301      	str	r3, [sp, #4]
 8005cdc:	1dfb      	adds	r3, r7, #7
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2178      	movs	r1, #120	; 0x78
 8005ce6:	f001 fba1 	bl	800742c <HAL_I2C_Mem_Write>
}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	46bd      	mov	sp, r7
 8005cee:	b002      	add	sp, #8
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	20000874 	.word	0x20000874

08005cf8 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8005cfc:	2064      	movs	r0, #100	; 0x64
 8005cfe:	f000 fcf9 	bl	80066f4 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8005d02:	20ae      	movs	r0, #174	; 0xae
 8005d04:	f7ff ffde 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8005d08:	2020      	movs	r0, #32
 8005d0a:	f7ff ffdb 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8005d0e:	2010      	movs	r0, #16
 8005d10:	f7ff ffd8 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005d14:	20b0      	movs	r0, #176	; 0xb0
 8005d16:	f7ff ffd5 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005d1a:	20c8      	movs	r0, #200	; 0xc8
 8005d1c:	f7ff ffd2 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8005d20:	2000      	movs	r0, #0
 8005d22:	f7ff ffcf 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8005d26:	2010      	movs	r0, #16
 8005d28:	f7ff ffcc 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8005d2c:	2040      	movs	r0, #64	; 0x40
 8005d2e:	f7ff ffc9 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8005d32:	2081      	movs	r0, #129	; 0x81
 8005d34:	f7ff ffc6 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8005d38:	20ff      	movs	r0, #255	; 0xff
 8005d3a:	f7ff ffc3 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8005d3e:	20a1      	movs	r0, #161	; 0xa1
 8005d40:	f7ff ffc0 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8005d44:	20a6      	movs	r0, #166	; 0xa6
 8005d46:	f7ff ffbd 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8005d4a:	20a8      	movs	r0, #168	; 0xa8
 8005d4c:	f7ff ffba 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8005d50:	203f      	movs	r0, #63	; 0x3f
 8005d52:	f7ff ffb7 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005d56:	20a4      	movs	r0, #164	; 0xa4
 8005d58:	f7ff ffb4 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8005d5c:	20d3      	movs	r0, #211	; 0xd3
 8005d5e:	f7ff ffb1 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8005d62:	2000      	movs	r0, #0
 8005d64:	f7ff ffae 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005d68:	20d5      	movs	r0, #213	; 0xd5
 8005d6a:	f7ff ffab 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005d6e:	20f0      	movs	r0, #240	; 0xf0
 8005d70:	f7ff ffa8 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005d74:	20d9      	movs	r0, #217	; 0xd9
 8005d76:	f7ff ffa5 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8005d7a:	2022      	movs	r0, #34	; 0x22
 8005d7c:	f7ff ffa2 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8005d80:	20da      	movs	r0, #218	; 0xda
 8005d82:	f7ff ff9f 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8005d86:	2012      	movs	r0, #18
 8005d88:	f7ff ff9c 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8005d8c:	20db      	movs	r0, #219	; 0xdb
 8005d8e:	f7ff ff99 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005d92:	2020      	movs	r0, #32
 8005d94:	f7ff ff96 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005d98:	208d      	movs	r0, #141	; 0x8d
 8005d9a:	f7ff ff93 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8005d9e:	2014      	movs	r0, #20
 8005da0:	f7ff ff90 	bl	8005cc4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8005da4:	20af      	movs	r0, #175	; 0xaf
 8005da6:	f7ff ff8d 	bl	8005cc4 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 8005daa:	2000      	movs	r0, #0
 8005dac:	f000 f812 	bl	8005dd4 <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8005db0:	f000 f836 	bl	8005e20 <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8005db4:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <ssd1306_Init+0xd8>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8005dba:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <ssd1306_Init+0xd8>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8005dc0:	4b03      	ldr	r3, [pc, #12]	; (8005dd0 <ssd1306_Init+0xd8>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	715a      	strb	r2, [r3, #5]
	
	return 1;
 8005dc6:	2301      	movs	r3, #1
}
 8005dc8:	0018      	movs	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	46c0      	nop			; (mov r8, r8)
 8005dd0:	2000075c 	.word	0x2000075c

08005dd4 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	0002      	movs	r2, r0
 8005ddc:	1dfb      	adds	r3, r7, #7
 8005dde:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	uint32_t i;

	//for(i = 0; i < sizeof(SSD1306_Buffer); i++)
	for(i = 0; i < SIZEOF_BUFFER; i++)
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	e00f      	b.n	8005e06 <ssd1306_Fill+0x32>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005de6:	1dfb      	adds	r3, r7, #7
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <ssd1306_Fill+0x1e>
 8005dee:	2100      	movs	r1, #0
 8005df0:	e000      	b.n	8005df4 <ssd1306_Fill+0x20>
 8005df2:	21ff      	movs	r1, #255	; 0xff
 8005df4:	4b08      	ldr	r3, [pc, #32]	; (8005e18 <ssd1306_Fill+0x44>)
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	18d3      	adds	r3, r2, r3
 8005dfc:	1c0a      	adds	r2, r1, #0
 8005dfe:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < SIZEOF_BUFFER; i++)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3301      	adds	r3, #1
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4a04      	ldr	r2, [pc, #16]	; (8005e1c <ssd1306_Fill+0x48>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d9eb      	bls.n	8005de6 <ssd1306_Fill+0x12>
	}
}
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	46bd      	mov	sp, r7
 8005e12:	b004      	add	sp, #16
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	20000354 	.word	0x20000354
 8005e1c:	000003ff 	.word	0x000003ff

08005e20 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 8005e26:	1dfb      	adds	r3, r7, #7
 8005e28:	2200      	movs	r2, #0
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	e023      	b.n	8005e76 <ssd1306_UpdateScreen+0x56>
		ssd1306_WriteCommand(0xB0 + i);
 8005e2e:	1dfb      	adds	r3, r7, #7
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	3b50      	subs	r3, #80	; 0x50
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	0018      	movs	r0, r3
 8005e38:	f7ff ff44 	bl	8005cc4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	f7ff ff41 	bl	8005cc4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8005e42:	2010      	movs	r0, #16
 8005e44:	f7ff ff3e 	bl	8005cc4 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(SSD1306_I2C_PORT,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8005e48:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <ssd1306_UpdateScreen+0x68>)
 8005e4a:	6818      	ldr	r0, [r3, #0]
 8005e4c:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <ssd1306_UpdateScreen+0x6c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	1dfa      	adds	r2, r7, #7
 8005e52:	7812      	ldrb	r2, [r2, #0]
 8005e54:	01d2      	lsls	r2, r2, #7
 8005e56:	189b      	adds	r3, r3, r2
 8005e58:	2264      	movs	r2, #100	; 0x64
 8005e5a:	9202      	str	r2, [sp, #8]
 8005e5c:	2280      	movs	r2, #128	; 0x80
 8005e5e:	9201      	str	r2, [sp, #4]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	2301      	movs	r3, #1
 8005e64:	2240      	movs	r2, #64	; 0x40
 8005e66:	2178      	movs	r1, #120	; 0x78
 8005e68:	f001 fae0 	bl	800742c <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8005e6c:	1dfb      	adds	r3, r7, #7
 8005e6e:	781a      	ldrb	r2, [r3, #0]
 8005e70:	1dfb      	adds	r3, r7, #7
 8005e72:	3201      	adds	r2, #1
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	1dfb      	adds	r3, r7, #7
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b07      	cmp	r3, #7
 8005e7c:	d9d7      	bls.n	8005e2e <ssd1306_UpdateScreen+0xe>
	}
}
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	46bd      	mov	sp, r7
 8005e82:	b002      	add	sp, #8
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	20000874 	.word	0x20000874
 8005e8c:	20000354 	.word	0x20000354

08005e90 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8005e90:	b590      	push	{r4, r7, lr}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	0004      	movs	r4, r0
 8005e98:	0008      	movs	r0, r1
 8005e9a:	0011      	movs	r1, r2
 8005e9c:	1dfb      	adds	r3, r7, #7
 8005e9e:	1c22      	adds	r2, r4, #0
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	1dbb      	adds	r3, r7, #6
 8005ea4:	1c02      	adds	r2, r0, #0
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	1d7b      	adds	r3, r7, #5
 8005eaa:	1c0a      	adds	r2, r1, #0
 8005eac:	701a      	strb	r2, [r3, #0]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8005eae:	1dfb      	adds	r3, r7, #7
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	b25b      	sxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	db5a      	blt.n	8005f6e <ssd1306_DrawPixel+0xde>
 8005eb8:	1dbb      	adds	r3, r7, #6
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b3f      	cmp	r3, #63	; 0x3f
 8005ebe:	d856      	bhi.n	8005f6e <ssd1306_DrawPixel+0xde>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 8005ec0:	4b2d      	ldr	r3, [pc, #180]	; (8005f78 <ssd1306_DrawPixel+0xe8>)
 8005ec2:	791b      	ldrb	r3, [r3, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d006      	beq.n	8005ed6 <ssd1306_DrawPixel+0x46>
	{
		color = (SSD1306_COLOR)!color;
 8005ec8:	1d7b      	adds	r3, r7, #5
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	425a      	negs	r2, r3
 8005ece:	4153      	adcs	r3, r2
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	1d7b      	adds	r3, r7, #5
 8005ed4:	701a      	strb	r2, [r3, #0]
	}
	
	// Draw in the right color
	if (color == White)
 8005ed6:	1d7b      	adds	r3, r7, #5
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d122      	bne.n	8005f24 <ssd1306_DrawPixel+0x94>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005ede:	4b27      	ldr	r3, [pc, #156]	; (8005f7c <ssd1306_DrawPixel+0xec>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	1dfa      	adds	r2, r7, #7
 8005ee4:	7811      	ldrb	r1, [r2, #0]
 8005ee6:	1dba      	adds	r2, r7, #6
 8005ee8:	7812      	ldrb	r2, [r2, #0]
 8005eea:	08d2      	lsrs	r2, r2, #3
 8005eec:	b2d0      	uxtb	r0, r2
 8005eee:	0002      	movs	r2, r0
 8005ef0:	01d2      	lsls	r2, r2, #7
 8005ef2:	188a      	adds	r2, r1, r2
 8005ef4:	189b      	adds	r3, r3, r2
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	b25a      	sxtb	r2, r3
 8005efa:	1dbb      	adds	r3, r7, #6
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2107      	movs	r1, #7
 8005f00:	400b      	ands	r3, r1
 8005f02:	2101      	movs	r1, #1
 8005f04:	4099      	lsls	r1, r3
 8005f06:	000b      	movs	r3, r1
 8005f08:	b25b      	sxtb	r3, r3
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	b25c      	sxtb	r4, r3
 8005f0e:	4b1b      	ldr	r3, [pc, #108]	; (8005f7c <ssd1306_DrawPixel+0xec>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	1dfa      	adds	r2, r7, #7
 8005f14:	7811      	ldrb	r1, [r2, #0]
 8005f16:	0002      	movs	r2, r0
 8005f18:	01d2      	lsls	r2, r2, #7
 8005f1a:	188a      	adds	r2, r1, r2
 8005f1c:	189b      	adds	r3, r3, r2
 8005f1e:	b2e2      	uxtb	r2, r4
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	e025      	b.n	8005f70 <ssd1306_DrawPixel+0xe0>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005f24:	4b15      	ldr	r3, [pc, #84]	; (8005f7c <ssd1306_DrawPixel+0xec>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	1dfa      	adds	r2, r7, #7
 8005f2a:	7811      	ldrb	r1, [r2, #0]
 8005f2c:	1dba      	adds	r2, r7, #6
 8005f2e:	7812      	ldrb	r2, [r2, #0]
 8005f30:	08d2      	lsrs	r2, r2, #3
 8005f32:	b2d0      	uxtb	r0, r2
 8005f34:	0002      	movs	r2, r0
 8005f36:	01d2      	lsls	r2, r2, #7
 8005f38:	188a      	adds	r2, r1, r2
 8005f3a:	189b      	adds	r3, r3, r2
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	b25b      	sxtb	r3, r3
 8005f40:	1dba      	adds	r2, r7, #6
 8005f42:	7812      	ldrb	r2, [r2, #0]
 8005f44:	2107      	movs	r1, #7
 8005f46:	400a      	ands	r2, r1
 8005f48:	2101      	movs	r1, #1
 8005f4a:	4091      	lsls	r1, r2
 8005f4c:	000a      	movs	r2, r1
 8005f4e:	b252      	sxtb	r2, r2
 8005f50:	43d2      	mvns	r2, r2
 8005f52:	b252      	sxtb	r2, r2
 8005f54:	4013      	ands	r3, r2
 8005f56:	b25c      	sxtb	r4, r3
 8005f58:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <ssd1306_DrawPixel+0xec>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	1dfa      	adds	r2, r7, #7
 8005f5e:	7811      	ldrb	r1, [r2, #0]
 8005f60:	0002      	movs	r2, r0
 8005f62:	01d2      	lsls	r2, r2, #7
 8005f64:	188a      	adds	r2, r1, r2
 8005f66:	189b      	adds	r3, r3, r2
 8005f68:	b2e2      	uxtb	r2, r4
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	e000      	b.n	8005f70 <ssd1306_DrawPixel+0xe0>
		return;
 8005f6e:	46c0      	nop			; (mov r8, r8)
	}
}
 8005f70:	46bd      	mov	sp, r7
 8005f72:	b003      	add	sp, #12
 8005f74:	bd90      	pop	{r4, r7, pc}
 8005f76:	46c0      	nop			; (mov r8, r8)
 8005f78:	2000075c 	.word	0x2000075c
 8005f7c:	20000354 	.word	0x20000354

08005f80 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8005f80:	b590      	push	{r4, r7, lr}
 8005f82:	b089      	sub	sp, #36	; 0x24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	0004      	movs	r4, r0
 8005f88:	1d38      	adds	r0, r7, #4
 8005f8a:	6001      	str	r1, [r0, #0]
 8005f8c:	6042      	str	r2, [r0, #4]
 8005f8e:	0019      	movs	r1, r3
 8005f90:	230f      	movs	r3, #15
 8005f92:	18fb      	adds	r3, r7, r3
 8005f94:	1c22      	adds	r2, r4, #0
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	230e      	movs	r3, #14
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	1c0a      	adds	r2, r1, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005fa0:	4b3e      	ldr	r3, [pc, #248]	; (800609c <ssd1306_WriteChar+0x11c>)
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	001a      	movs	r2, r3
 8005fa6:	1d3b      	adds	r3, r7, #4
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	18d3      	adds	r3, r2, r3
 8005fac:	2b7f      	cmp	r3, #127	; 0x7f
 8005fae:	dc07      	bgt.n	8005fc0 <ssd1306_WriteChar+0x40>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8005fb0:	4b3a      	ldr	r3, [pc, #232]	; (800609c <ssd1306_WriteChar+0x11c>)
 8005fb2:	885b      	ldrh	r3, [r3, #2]
 8005fb4:	001a      	movs	r2, r3
 8005fb6:	1d3b      	adds	r3, r7, #4
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	18d3      	adds	r3, r2, r3
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005fbc:	2b3f      	cmp	r3, #63	; 0x3f
 8005fbe:	dd01      	ble.n	8005fc4 <ssd1306_WriteChar+0x44>
	{
		// Not enough space on current line
		return 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e066      	b.n	8006092 <ssd1306_WriteChar+0x112>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	e051      	b.n	800606e <ssd1306_WriteChar+0xee>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005fca:	1d3b      	adds	r3, r7, #4
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	230f      	movs	r3, #15
 8005fd0:	18fb      	adds	r3, r7, r3
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	3b20      	subs	r3, #32
 8005fd6:	1d39      	adds	r1, r7, #4
 8005fd8:	7849      	ldrb	r1, [r1, #1]
 8005fda:	434b      	muls	r3, r1
 8005fdc:	0019      	movs	r1, r3
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	18cb      	adds	r3, r1, r3
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	18d3      	adds	r3, r2, r3
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8005fea:	2300      	movs	r3, #0
 8005fec:	61bb      	str	r3, [r7, #24]
 8005fee:	e035      	b.n	800605c <ssd1306_WriteChar+0xdc>
		{
			if ((b << j) & 0x8000) 
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	409a      	lsls	r2, r3
 8005ff6:	2380      	movs	r3, #128	; 0x80
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	d014      	beq.n	8006028 <ssd1306_WriteChar+0xa8>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005ffe:	4b27      	ldr	r3, [pc, #156]	; (800609c <ssd1306_WriteChar+0x11c>)
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b2da      	uxtb	r2, r3
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	18d3      	adds	r3, r2, r3
 800600a:	b2d8      	uxtb	r0, r3
 800600c:	4b23      	ldr	r3, [pc, #140]	; (800609c <ssd1306_WriteChar+0x11c>)
 800600e:	885b      	ldrh	r3, [r3, #2]
 8006010:	b2da      	uxtb	r2, r3
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	18d3      	adds	r3, r2, r3
 8006018:	b2d9      	uxtb	r1, r3
 800601a:	230e      	movs	r3, #14
 800601c:	18fb      	adds	r3, r7, r3
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	001a      	movs	r2, r3
 8006022:	f7ff ff35 	bl	8005e90 <ssd1306_DrawPixel>
 8006026:	e016      	b.n	8006056 <ssd1306_WriteChar+0xd6>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006028:	4b1c      	ldr	r3, [pc, #112]	; (800609c <ssd1306_WriteChar+0x11c>)
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b2da      	uxtb	r2, r3
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	18d3      	adds	r3, r2, r3
 8006034:	b2d8      	uxtb	r0, r3
 8006036:	4b19      	ldr	r3, [pc, #100]	; (800609c <ssd1306_WriteChar+0x11c>)
 8006038:	885b      	ldrh	r3, [r3, #2]
 800603a:	b2da      	uxtb	r2, r3
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	18d3      	adds	r3, r2, r3
 8006042:	b2d9      	uxtb	r1, r3
 8006044:	230e      	movs	r3, #14
 8006046:	18fb      	adds	r3, r7, r3
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	425a      	negs	r2, r3
 800604c:	4153      	adcs	r3, r2
 800604e:	b2db      	uxtb	r3, r3
 8006050:	001a      	movs	r2, r3
 8006052:	f7ff ff1d 	bl	8005e90 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	3301      	adds	r3, #1
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	1d3b      	adds	r3, r7, #4
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	001a      	movs	r2, r3
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	4293      	cmp	r3, r2
 8006066:	d3c3      	bcc.n	8005ff0 <ssd1306_WriteChar+0x70>
	for (i = 0; i < Font.FontHeight; i++)
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	3301      	adds	r3, #1
 800606c:	61fb      	str	r3, [r7, #28]
 800606e:	1d3b      	adds	r3, r7, #4
 8006070:	785b      	ldrb	r3, [r3, #1]
 8006072:	001a      	movs	r2, r3
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	4293      	cmp	r3, r2
 8006078:	d3a7      	bcc.n	8005fca <ssd1306_WriteChar+0x4a>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800607a:	4b08      	ldr	r3, [pc, #32]	; (800609c <ssd1306_WriteChar+0x11c>)
 800607c:	881a      	ldrh	r2, [r3, #0]
 800607e:	1d3b      	adds	r3, r7, #4
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	18d3      	adds	r3, r2, r3
 8006086:	b29a      	uxth	r2, r3
 8006088:	4b04      	ldr	r3, [pc, #16]	; (800609c <ssd1306_WriteChar+0x11c>)
 800608a:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 800608c:	230f      	movs	r3, #15
 800608e:	18fb      	adds	r3, r7, r3
 8006090:	781b      	ldrb	r3, [r3, #0]
}
 8006092:	0018      	movs	r0, r3
 8006094:	46bd      	mov	sp, r7
 8006096:	b009      	add	sp, #36	; 0x24
 8006098:	bd90      	pop	{r4, r7, pc}
 800609a:	46c0      	nop			; (mov r8, r8)
 800609c:	2000075c 	.word	0x2000075c

080060a0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	1d38      	adds	r0, r7, #4
 80060aa:	6001      	str	r1, [r0, #0]
 80060ac:	6042      	str	r2, [r0, #4]
 80060ae:	001a      	movs	r2, r3
 80060b0:	1cfb      	adds	r3, r7, #3
 80060b2:	701a      	strb	r2, [r3, #0]
	// Write until null-byte
	while (*str) 
 80060b4:	e014      	b.n	80060e0 <ssd1306_WriteString+0x40>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	7818      	ldrb	r0, [r3, #0]
 80060ba:	1cfb      	adds	r3, r7, #3
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	1d3a      	adds	r2, r7, #4
 80060c0:	6811      	ldr	r1, [r2, #0]
 80060c2:	6852      	ldr	r2, [r2, #4]
 80060c4:	f7ff ff5c 	bl	8005f80 <ssd1306_WriteChar>
 80060c8:	0003      	movs	r3, r0
 80060ca:	001a      	movs	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d002      	beq.n	80060da <ssd1306_WriteString+0x3a>
		{
			// Char could not be written
			return *str;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	e008      	b.n	80060ec <ssd1306_WriteString+0x4c>
		}
		
		// Next char
		str++;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3301      	adds	r3, #1
 80060de:	60fb      	str	r3, [r7, #12]
	while (*str) 
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1e6      	bne.n	80060b6 <ssd1306_WriteString+0x16>
	}
	
	// Everything ok
	return *str;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	781b      	ldrb	r3, [r3, #0]
}
 80060ec:	0018      	movs	r0, r3
 80060ee:	46bd      	mov	sp, r7
 80060f0:	b004      	add	sp, #16
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	0002      	movs	r2, r0
 80060fc:	1dfb      	adds	r3, r7, #7
 80060fe:	701a      	strb	r2, [r3, #0]
 8006100:	1dbb      	adds	r3, r7, #6
 8006102:	1c0a      	adds	r2, r1, #0
 8006104:	701a      	strb	r2, [r3, #0]
	SSD1306.CurrentX = x;
 8006106:	1dfb      	adds	r3, r7, #7
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	b29a      	uxth	r2, r3
 800610c:	4b05      	ldr	r3, [pc, #20]	; (8006124 <ssd1306_SetCursor+0x30>)
 800610e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8006110:	1dbb      	adds	r3, r7, #6
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	b29a      	uxth	r2, r3
 8006116:	4b03      	ldr	r3, [pc, #12]	; (8006124 <ssd1306_SetCursor+0x30>)
 8006118:	805a      	strh	r2, [r3, #2]
}
 800611a:	46c0      	nop			; (mov r8, r8)
 800611c:	46bd      	mov	sp, r7
 800611e:	b002      	add	sp, #8
 8006120:	bd80      	pop	{r7, pc}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	2000075c 	.word	0x2000075c

08006128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800612c:	4b07      	ldr	r3, [pc, #28]	; (800614c <HAL_MspInit+0x24>)
 800612e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006130:	4b06      	ldr	r3, [pc, #24]	; (800614c <HAL_MspInit+0x24>)
 8006132:	2101      	movs	r1, #1
 8006134:	430a      	orrs	r2, r1
 8006136:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8006138:	4b04      	ldr	r3, [pc, #16]	; (800614c <HAL_MspInit+0x24>)
 800613a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800613c:	4b03      	ldr	r3, [pc, #12]	; (800614c <HAL_MspInit+0x24>)
 800613e:	2180      	movs	r1, #128	; 0x80
 8006140:	0549      	lsls	r1, r1, #21
 8006142:	430a      	orrs	r2, r1
 8006144:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40021000 	.word	0x40021000

08006150 <NMI_Handler>:

/**
* @brief This function handles Non maskable Interrupt.
*/
void NMI_Handler(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006154:	46c0      	nop			; (mov r8, r8)
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800615e:	e7fe      	b.n	800615e <HardFault_Handler+0x4>

08006160 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006164:	46c0      	nop			; (mov r8, r8)
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006178:	f000 faa6 	bl	80066c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800617c:	f000 ff20 	bl	8006fc0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006180:	46c0      	nop			; (mov r8, r8)
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
	...

08006188 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800618c:	4b03      	ldr	r3, [pc, #12]	; (800619c <TIM2_IRQHandler+0x14>)
 800618e:	0018      	movs	r0, r3
 8006190:	f002 fdbe 	bl	8008d10 <HAL_TIM_IRQHandler>


}
 8006194:	46c0      	nop			; (mov r8, r8)
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	46c0      	nop			; (mov r8, r8)
 800619c:	200008d0 	.word	0x200008d0

080061a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
	
	if(htim->Instance==TIM2)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	2380      	movs	r3, #128	; 0x80
 80061ae:	05db      	lsls	r3, r3, #23
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d103      	bne.n	80061bc <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		//HAL_GPIO_TogglePin(GPIOC, led0_Pin);
		one_second_timer_increment_counter();
 80061b4:	f7ff f88e 	bl	80052d4 <one_second_timer_increment_counter>
		one_second_timer_set_flag();
 80061b8:	f7ff f86e 	bl	8005298 <one_second_timer_set_flag>
	}
}
 80061bc:	46c0      	nop			; (mov r8, r8)
 80061be:	46bd      	mov	sp, r7
 80061c0:	b002      	add	sp, #8
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80061cc:	4b11      	ldr	r3, [pc, #68]	; (8006214 <_sbrk+0x50>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d102      	bne.n	80061da <_sbrk+0x16>
		heap_end = &end;
 80061d4:	4b0f      	ldr	r3, [pc, #60]	; (8006214 <_sbrk+0x50>)
 80061d6:	4a10      	ldr	r2, [pc, #64]	; (8006218 <_sbrk+0x54>)
 80061d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80061da:	4b0e      	ldr	r3, [pc, #56]	; (8006214 <_sbrk+0x50>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80061e0:	4b0c      	ldr	r3, [pc, #48]	; (8006214 <_sbrk+0x50>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	18d3      	adds	r3, r2, r3
 80061e8:	466a      	mov	r2, sp
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d907      	bls.n	80061fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80061ee:	f003 fddf 	bl	8009db0 <__errno>
 80061f2:	0003      	movs	r3, r0
 80061f4:	220c      	movs	r2, #12
 80061f6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80061f8:	2301      	movs	r3, #1
 80061fa:	425b      	negs	r3, r3
 80061fc:	e006      	b.n	800620c <_sbrk+0x48>
	}

	heap_end += incr;
 80061fe:	4b05      	ldr	r3, [pc, #20]	; (8006214 <_sbrk+0x50>)
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	18d2      	adds	r2, r2, r3
 8006206:	4b03      	ldr	r3, [pc, #12]	; (8006214 <_sbrk+0x50>)
 8006208:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800620a:	68fb      	ldr	r3, [r7, #12]
}
 800620c:	0018      	movs	r0, r3
 800620e:	46bd      	mov	sp, r7
 8006210:	b004      	add	sp, #16
 8006212:	bd80      	pop	{r7, pc}
 8006214:	20000764 	.word	0x20000764
 8006218:	20000998 	.word	0x20000998

0800621c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8006220:	4b17      	ldr	r3, [pc, #92]	; (8006280 <SystemInit+0x64>)
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	4b16      	ldr	r3, [pc, #88]	; (8006280 <SystemInit+0x64>)
 8006226:	2180      	movs	r1, #128	; 0x80
 8006228:	0049      	lsls	r1, r1, #1
 800622a:	430a      	orrs	r2, r1
 800622c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800622e:	4b14      	ldr	r3, [pc, #80]	; (8006280 <SystemInit+0x64>)
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	4b13      	ldr	r3, [pc, #76]	; (8006280 <SystemInit+0x64>)
 8006234:	4913      	ldr	r1, [pc, #76]	; (8006284 <SystemInit+0x68>)
 8006236:	400a      	ands	r2, r1
 8006238:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800623a:	4b11      	ldr	r3, [pc, #68]	; (8006280 <SystemInit+0x64>)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	4b10      	ldr	r3, [pc, #64]	; (8006280 <SystemInit+0x64>)
 8006240:	4911      	ldr	r1, [pc, #68]	; (8006288 <SystemInit+0x6c>)
 8006242:	400a      	ands	r2, r1
 8006244:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006246:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <SystemInit+0x64>)
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	4b0d      	ldr	r3, [pc, #52]	; (8006280 <SystemInit+0x64>)
 800624c:	2101      	movs	r1, #1
 800624e:	438a      	bics	r2, r1
 8006250:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006252:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <SystemInit+0x64>)
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <SystemInit+0x64>)
 8006258:	490c      	ldr	r1, [pc, #48]	; (800628c <SystemInit+0x70>)
 800625a:	400a      	ands	r2, r1
 800625c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800625e:	4b08      	ldr	r3, [pc, #32]	; (8006280 <SystemInit+0x64>)
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	4b07      	ldr	r3, [pc, #28]	; (8006280 <SystemInit+0x64>)
 8006264:	490a      	ldr	r1, [pc, #40]	; (8006290 <SystemInit+0x74>)
 8006266:	400a      	ands	r2, r1
 8006268:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800626a:	4b05      	ldr	r3, [pc, #20]	; (8006280 <SystemInit+0x64>)
 800626c:	2200      	movs	r2, #0
 800626e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006270:	4b08      	ldr	r3, [pc, #32]	; (8006294 <SystemInit+0x78>)
 8006272:	2280      	movs	r2, #128	; 0x80
 8006274:	0512      	lsls	r2, r2, #20
 8006276:	609a      	str	r2, [r3, #8]
#endif
}
 8006278:	46c0      	nop			; (mov r8, r8)
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	46c0      	nop			; (mov r8, r8)
 8006280:	40021000 	.word	0x40021000
 8006284:	88ff400c 	.word	0x88ff400c
 8006288:	fef6fff6 	.word	0xfef6fff6
 800628c:	fffbffff 	.word	0xfffbffff
 8006290:	ff02ffff 	.word	0xff02ffff
 8006294:	e000ed00 	.word	0xe000ed00

08006298 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 800629e:	4b20      	ldr	r3, [pc, #128]	; (8006320 <MX_TIM2_Init+0x88>)
 80062a0:	2280      	movs	r2, #128	; 0x80
 80062a2:	05d2      	lsls	r2, r2, #23
 80062a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 80062a6:	4b1e      	ldr	r3, [pc, #120]	; (8006320 <MX_TIM2_Init+0x88>)
 80062a8:	22fa      	movs	r2, #250	; 0xfa
 80062aa:	01d2      	lsls	r2, r2, #7
 80062ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062ae:	4b1c      	ldr	r3, [pc, #112]	; (8006320 <MX_TIM2_Init+0x88>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80062b4:	4b1a      	ldr	r3, [pc, #104]	; (8006320 <MX_TIM2_Init+0x88>)
 80062b6:	22fa      	movs	r2, #250	; 0xfa
 80062b8:	0092      	lsls	r2, r2, #2
 80062ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062bc:	4b18      	ldr	r3, [pc, #96]	; (8006320 <MX_TIM2_Init+0x88>)
 80062be:	2200      	movs	r2, #0
 80062c0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80062c2:	4b17      	ldr	r3, [pc, #92]	; (8006320 <MX_TIM2_Init+0x88>)
 80062c4:	0018      	movs	r0, r3
 80062c6:	f002 fcd5 	bl	8008c74 <HAL_TIM_Base_Init>
 80062ca:	1e03      	subs	r3, r0, #0
 80062cc:	d001      	beq.n	80062d2 <MX_TIM2_Init+0x3a>
  {
    Error_Handler();
 80062ce:	f7fe ffc9 	bl	8005264 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80062d2:	2108      	movs	r1, #8
 80062d4:	187b      	adds	r3, r7, r1
 80062d6:	2280      	movs	r2, #128	; 0x80
 80062d8:	0152      	lsls	r2, r2, #5
 80062da:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80062dc:	187a      	adds	r2, r7, r1
 80062de:	4b10      	ldr	r3, [pc, #64]	; (8006320 <MX_TIM2_Init+0x88>)
 80062e0:	0011      	movs	r1, r2
 80062e2:	0018      	movs	r0, r3
 80062e4:	f002 fdfc 	bl	8008ee0 <HAL_TIM_ConfigClockSource>
 80062e8:	1e03      	subs	r3, r0, #0
 80062ea:	d001      	beq.n	80062f0 <MX_TIM2_Init+0x58>
  {
	  Error_Handler();
 80062ec:	f7fe ffba 	bl	8005264 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062f0:	003b      	movs	r3, r7
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062f6:	003b      	movs	r3, r7
 80062f8:	2200      	movs	r2, #0
 80062fa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80062fc:	003a      	movs	r2, r7
 80062fe:	4b08      	ldr	r3, [pc, #32]	; (8006320 <MX_TIM2_Init+0x88>)
 8006300:	0011      	movs	r1, r2
 8006302:	0018      	movs	r0, r3
 8006304:	f002 ffb8 	bl	8009278 <HAL_TIMEx_MasterConfigSynchronization>
 8006308:	1e03      	subs	r3, r0, #0
 800630a:	d001      	beq.n	8006310 <MX_TIM2_Init+0x78>
  {
	  Error_Handler();
 800630c:	f7fe ffaa 	bl	8005264 <Error_Handler>
  }

  HAL_TIM_Base_Start_IT(&htim2);
 8006310:	4b03      	ldr	r3, [pc, #12]	; (8006320 <MX_TIM2_Init+0x88>)
 8006312:	0018      	movs	r0, r3
 8006314:	f002 fcda 	bl	8008ccc <HAL_TIM_Base_Start_IT>
}
 8006318:	46c0      	nop			; (mov r8, r8)
 800631a:	46bd      	mov	sp, r7
 800631c:	b006      	add	sp, #24
 800631e:	bd80      	pop	{r7, pc}
 8006320:	200008d0 	.word	0x200008d0

08006324 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	2380      	movs	r3, #128	; 0x80
 8006332:	05db      	lsls	r3, r3, #23
 8006334:	429a      	cmp	r2, r3
 8006336:	d10d      	bne.n	8006354 <HAL_TIM_Base_MspInit+0x30>
  {
    
	/* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006338:	4b08      	ldr	r3, [pc, #32]	; (800635c <HAL_TIM_Base_MspInit+0x38>)
 800633a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800633c:	4b07      	ldr	r3, [pc, #28]	; (800635c <HAL_TIM_Base_MspInit+0x38>)
 800633e:	2101      	movs	r1, #1
 8006340:	430a      	orrs	r2, r1
 8006342:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 8006344:	2200      	movs	r2, #0
 8006346:	2107      	movs	r1, #7
 8006348:	200f      	movs	r0, #15
 800634a:	f000 fe07 	bl	8006f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800634e:	200f      	movs	r0, #15
 8006350:	f000 fe19 	bl	8006f86 <HAL_NVIC_EnableIRQ>
  }
}
 8006354:	46c0      	nop			; (mov r8, r8)
 8006356:	46bd      	mov	sp, r7
 8006358:	b002      	add	sp, #8
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40021000 	.word	0x40021000

08006360 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006364:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <MX_USART1_UART_Init+0x58>)
 8006366:	4a15      	ldr	r2, [pc, #84]	; (80063bc <MX_USART1_UART_Init+0x5c>)
 8006368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800636a:	4b13      	ldr	r3, [pc, #76]	; (80063b8 <MX_USART1_UART_Init+0x58>)
 800636c:	22e1      	movs	r2, #225	; 0xe1
 800636e:	0252      	lsls	r2, r2, #9
 8006370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006372:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <MX_USART1_UART_Init+0x58>)
 8006374:	2200      	movs	r2, #0
 8006376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006378:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <MX_USART1_UART_Init+0x58>)
 800637a:	2200      	movs	r2, #0
 800637c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800637e:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <MX_USART1_UART_Init+0x58>)
 8006380:	2200      	movs	r2, #0
 8006382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006384:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <MX_USART1_UART_Init+0x58>)
 8006386:	220c      	movs	r2, #12
 8006388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800638a:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <MX_USART1_UART_Init+0x58>)
 800638c:	2200      	movs	r2, #0
 800638e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006390:	4b09      	ldr	r3, [pc, #36]	; (80063b8 <MX_USART1_UART_Init+0x58>)
 8006392:	2200      	movs	r2, #0
 8006394:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006396:	4b08      	ldr	r3, [pc, #32]	; (80063b8 <MX_USART1_UART_Init+0x58>)
 8006398:	2200      	movs	r2, #0
 800639a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800639c:	4b06      	ldr	r3, [pc, #24]	; (80063b8 <MX_USART1_UART_Init+0x58>)
 800639e:	2200      	movs	r2, #0
 80063a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80063a2:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <MX_USART1_UART_Init+0x58>)
 80063a4:	0018      	movs	r0, r3
 80063a6:	f002 ffab 	bl	8009300 <HAL_UART_Init>
 80063aa:	1e03      	subs	r3, r0, #0
 80063ac:	d001      	beq.n	80063b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80063ae:	f7fe ff59 	bl	8005264 <Error_Handler>
  }

}
 80063b2:	46c0      	nop			; (mov r8, r8)
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	2000090c 	.word	0x2000090c
 80063bc:	40013800 	.word	0x40013800

080063c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063c8:	230c      	movs	r3, #12
 80063ca:	18fb      	adds	r3, r7, r3
 80063cc:	0018      	movs	r0, r3
 80063ce:	2314      	movs	r3, #20
 80063d0:	001a      	movs	r2, r3
 80063d2:	2100      	movs	r1, #0
 80063d4:	f003 fd16 	bl	8009e04 <memset>
  if(uartHandle->Instance==USART1)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a17      	ldr	r2, [pc, #92]	; (800643c <HAL_UART_MspInit+0x7c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d128      	bne.n	8006434 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80063e2:	4b17      	ldr	r3, [pc, #92]	; (8006440 <HAL_UART_MspInit+0x80>)
 80063e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e6:	4b16      	ldr	r3, [pc, #88]	; (8006440 <HAL_UART_MspInit+0x80>)
 80063e8:	2180      	movs	r1, #128	; 0x80
 80063ea:	01c9      	lsls	r1, r1, #7
 80063ec:	430a      	orrs	r2, r1
 80063ee:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063f0:	4b13      	ldr	r3, [pc, #76]	; (8006440 <HAL_UART_MspInit+0x80>)
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	4b12      	ldr	r3, [pc, #72]	; (8006440 <HAL_UART_MspInit+0x80>)
 80063f6:	2102      	movs	r1, #2
 80063f8:	430a      	orrs	r2, r1
 80063fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80063fc:	4b10      	ldr	r3, [pc, #64]	; (8006440 <HAL_UART_MspInit+0x80>)
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	2202      	movs	r2, #2
 8006402:	4013      	ands	r3, r2
 8006404:	60bb      	str	r3, [r7, #8]
 8006406:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006408:	210c      	movs	r1, #12
 800640a:	187b      	adds	r3, r7, r1
 800640c:	22c0      	movs	r2, #192	; 0xc0
 800640e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006410:	187b      	adds	r3, r7, r1
 8006412:	2202      	movs	r2, #2
 8006414:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006416:	187b      	adds	r3, r7, r1
 8006418:	2200      	movs	r2, #0
 800641a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800641c:	187b      	adds	r3, r7, r1
 800641e:	2203      	movs	r2, #3
 8006420:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8006422:	187b      	adds	r3, r7, r1
 8006424:	2200      	movs	r2, #0
 8006426:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006428:	187b      	adds	r3, r7, r1
 800642a:	4a06      	ldr	r2, [pc, #24]	; (8006444 <HAL_UART_MspInit+0x84>)
 800642c:	0019      	movs	r1, r3
 800642e:	0010      	movs	r0, r2
 8006430:	f000 fdd2 	bl	8006fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006434:	46c0      	nop			; (mov r8, r8)
 8006436:	46bd      	mov	sp, r7
 8006438:	b008      	add	sp, #32
 800643a:	bd80      	pop	{r7, pc}
 800643c:	40013800 	.word	0x40013800
 8006440:	40021000 	.word	0x40021000
 8006444:	50000400 	.word	0x50000400

08006448 <voltmeter_measure_voltage>:




void voltmeter_measure_voltage()
{
 8006448:	b590      	push	{r4, r7, lr}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
	int i;

	accu_voltage = 0;
 800644e:	4a4d      	ldr	r2, [pc, #308]	; (8006584 <voltmeter_measure_voltage+0x13c>)
 8006450:	2300      	movs	r3, #0
 8006452:	2400      	movs	r4, #0
 8006454:	6013      	str	r3, [r2, #0]
 8006456:	6054      	str	r4, [r2, #4]

	for(i=0; i<11; i++)
 8006458:	2300      	movs	r3, #0
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	e042      	b.n	80064e4 <voltmeter_measure_voltage+0x9c>
	{
		// measure accu voltage
	    HAL_ADC_Start(&hadc);
 800645e:	4b4a      	ldr	r3, [pc, #296]	; (8006588 <voltmeter_measure_voltage+0x140>)
 8006460:	0018      	movs	r0, r3
 8006462:	f000 fad9 	bl	8006a18 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc, 500);
 8006466:	23fa      	movs	r3, #250	; 0xfa
 8006468:	005a      	lsls	r2, r3, #1
 800646a:	4b47      	ldr	r3, [pc, #284]	; (8006588 <voltmeter_measure_voltage+0x140>)
 800646c:	0011      	movs	r1, r2
 800646e:	0018      	movs	r0, r3
 8006470:	f000 fb26 	bl	8006ac0 <HAL_ADC_PollForConversion>
	    uint32_t adc_voltage =  HAL_ADC_GetValue(&hadc);
 8006474:	4b44      	ldr	r3, [pc, #272]	; (8006588 <voltmeter_measure_voltage+0x140>)
 8006476:	0018      	movs	r0, r3
 8006478:	f000 fbb8 	bl	8006bec <HAL_ADC_GetValue>
 800647c:	0003      	movs	r3, r0
 800647e:	607b      	str	r3, [r7, #4]
	    adc_voltage *= 3;
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	0013      	movs	r3, r2
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	189b      	adds	r3, r3, r2
 8006488:	607b      	str	r3, [r7, #4]
	    accu_voltage += (double)adc_voltage * voltage_coefficient * 100.0 * 1.0351;
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fb fe48 	bl	8002120 <__aeabi_ui2d>
 8006490:	4b3e      	ldr	r3, [pc, #248]	; (800658c <voltmeter_measure_voltage+0x144>)
 8006492:	685c      	ldr	r4, [r3, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	001a      	movs	r2, r3
 8006498:	0023      	movs	r3, r4
 800649a:	f7fb f817 	bl	80014cc <__aeabi_dmul>
 800649e:	0003      	movs	r3, r0
 80064a0:	000c      	movs	r4, r1
 80064a2:	0018      	movs	r0, r3
 80064a4:	0021      	movs	r1, r4
 80064a6:	2200      	movs	r2, #0
 80064a8:	4b39      	ldr	r3, [pc, #228]	; (8006590 <voltmeter_measure_voltage+0x148>)
 80064aa:	f7fb f80f 	bl	80014cc <__aeabi_dmul>
 80064ae:	0003      	movs	r3, r0
 80064b0:	000c      	movs	r4, r1
 80064b2:	0018      	movs	r0, r3
 80064b4:	0021      	movs	r1, r4
 80064b6:	4a37      	ldr	r2, [pc, #220]	; (8006594 <voltmeter_measure_voltage+0x14c>)
 80064b8:	4b37      	ldr	r3, [pc, #220]	; (8006598 <voltmeter_measure_voltage+0x150>)
 80064ba:	f7fb f807 	bl	80014cc <__aeabi_dmul>
 80064be:	0003      	movs	r3, r0
 80064c0:	000c      	movs	r4, r1
 80064c2:	0018      	movs	r0, r3
 80064c4:	0021      	movs	r1, r4
 80064c6:	4b2f      	ldr	r3, [pc, #188]	; (8006584 <voltmeter_measure_voltage+0x13c>)
 80064c8:	685c      	ldr	r4, [r3, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	001a      	movs	r2, r3
 80064ce:	0023      	movs	r3, r4
 80064d0:	f7fa f8d6 	bl	8000680 <__aeabi_dadd>
 80064d4:	0003      	movs	r3, r0
 80064d6:	000c      	movs	r4, r1
 80064d8:	4a2a      	ldr	r2, [pc, #168]	; (8006584 <voltmeter_measure_voltage+0x13c>)
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	6054      	str	r4, [r2, #4]
	for(i=0; i<11; i++)
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	3301      	adds	r3, #1
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2b0a      	cmp	r3, #10
 80064e8:	ddb9      	ble.n	800645e <voltmeter_measure_voltage+0x16>
	    
	}

	accu_voltage /= 11;
 80064ea:	4b26      	ldr	r3, [pc, #152]	; (8006584 <voltmeter_measure_voltage+0x13c>)
 80064ec:	6818      	ldr	r0, [r3, #0]
 80064ee:	6859      	ldr	r1, [r3, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	4b2a      	ldr	r3, [pc, #168]	; (800659c <voltmeter_measure_voltage+0x154>)
 80064f4:	f7fa fbe0 	bl	8000cb8 <__aeabi_ddiv>
 80064f8:	0003      	movs	r3, r0
 80064fa:	000c      	movs	r4, r1
 80064fc:	4a21      	ldr	r2, [pc, #132]	; (8006584 <voltmeter_measure_voltage+0x13c>)
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	6054      	str	r4, [r2, #4]
	    
	double current_voltage;
	if (accu_voltage > UP_BOUND)
 8006502:	4b20      	ldr	r3, [pc, #128]	; (8006584 <voltmeter_measure_voltage+0x13c>)
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	6859      	ldr	r1, [r3, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	4b25      	ldr	r3, [pc, #148]	; (80065a0 <voltmeter_measure_voltage+0x158>)
 800650c:	f7f9 ffa4 	bl	8000458 <__aeabi_dcmpgt>
 8006510:	1e03      	subs	r3, r0, #0
 8006512:	d004      	beq.n	800651e <voltmeter_measure_voltage+0xd6>
	    current_voltage = UP_BOUND;
 8006514:	2300      	movs	r3, #0
 8006516:	4c22      	ldr	r4, [pc, #136]	; (80065a0 <voltmeter_measure_voltage+0x158>)
 8006518:	60bb      	str	r3, [r7, #8]
 800651a:	60fc      	str	r4, [r7, #12]
 800651c:	e012      	b.n	8006544 <voltmeter_measure_voltage+0xfc>
	else if (accu_voltage < LOW_BOUND)
 800651e:	4b19      	ldr	r3, [pc, #100]	; (8006584 <voltmeter_measure_voltage+0x13c>)
 8006520:	6818      	ldr	r0, [r3, #0]
 8006522:	6859      	ldr	r1, [r3, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	4b1f      	ldr	r3, [pc, #124]	; (80065a4 <voltmeter_measure_voltage+0x15c>)
 8006528:	f7f9 ff82 	bl	8000430 <__aeabi_dcmplt>
 800652c:	1e03      	subs	r3, r0, #0
 800652e:	d004      	beq.n	800653a <voltmeter_measure_voltage+0xf2>
	    current_voltage = LOW_BOUND;
 8006530:	2300      	movs	r3, #0
 8006532:	4c1c      	ldr	r4, [pc, #112]	; (80065a4 <voltmeter_measure_voltage+0x15c>)
 8006534:	60bb      	str	r3, [r7, #8]
 8006536:	60fc      	str	r4, [r7, #12]
 8006538:	e004      	b.n	8006544 <voltmeter_measure_voltage+0xfc>
	else
	    current_voltage = accu_voltage;
 800653a:	4b12      	ldr	r3, [pc, #72]	; (8006584 <voltmeter_measure_voltage+0x13c>)
 800653c:	685c      	ldr	r4, [r3, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	60fc      	str	r4, [r7, #12]
	    
	accu_percentage = (current_voltage - LOW_BOUND)/(UP_BOUND - LOW_BOUND)*100.0;
 8006544:	2200      	movs	r2, #0
 8006546:	4b17      	ldr	r3, [pc, #92]	; (80065a4 <voltmeter_measure_voltage+0x15c>)
 8006548:	68b8      	ldr	r0, [r7, #8]
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	f7fb fa30 	bl	80019b0 <__aeabi_dsub>
 8006550:	0003      	movs	r3, r0
 8006552:	000c      	movs	r4, r1
 8006554:	0018      	movs	r0, r3
 8006556:	0021      	movs	r1, r4
 8006558:	2200      	movs	r2, #0
 800655a:	4b13      	ldr	r3, [pc, #76]	; (80065a8 <voltmeter_measure_voltage+0x160>)
 800655c:	f7fa fbac 	bl	8000cb8 <__aeabi_ddiv>
 8006560:	0003      	movs	r3, r0
 8006562:	000c      	movs	r4, r1
 8006564:	0018      	movs	r0, r3
 8006566:	0021      	movs	r1, r4
 8006568:	2200      	movs	r2, #0
 800656a:	4b09      	ldr	r3, [pc, #36]	; (8006590 <voltmeter_measure_voltage+0x148>)
 800656c:	f7fa ffae 	bl	80014cc <__aeabi_dmul>
 8006570:	0003      	movs	r3, r0
 8006572:	000c      	movs	r4, r1
 8006574:	4a0d      	ldr	r2, [pc, #52]	; (80065ac <voltmeter_measure_voltage+0x164>)
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	6054      	str	r4, [r2, #4]
}
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	46bd      	mov	sp, r7
 800657e:	b007      	add	sp, #28
 8006580:	bd90      	pop	{r4, r7, pc}
 8006582:	46c0      	nop			; (mov r8, r8)
 8006584:	20000768 	.word	0x20000768
 8006588:	20000780 	.word	0x20000780
 800658c:	20000030 	.word	0x20000030
 8006590:	40590000 	.word	0x40590000
 8006594:	04816f00 	.word	0x04816f00
 8006598:	3ff08fc5 	.word	0x3ff08fc5
 800659c:	40260000 	.word	0x40260000
 80065a0:	4089a000 	.word	0x4089a000
 80065a4:	4084a000 	.word	0x4084a000
 80065a8:	40640000 	.word	0x40640000
 80065ac:	20000770 	.word	0x20000770

080065b0 <voltmeter_get_voltage>:



double voltmeter_get_voltage()
{
 80065b0:	b590      	push	{r4, r7, lr}
 80065b2:	af00      	add	r7, sp, #0
	return accu_voltage;
 80065b4:	4b03      	ldr	r3, [pc, #12]	; (80065c4 <voltmeter_get_voltage+0x14>)
 80065b6:	685c      	ldr	r4, [r3, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
}
 80065ba:	0018      	movs	r0, r3
 80065bc:	0021      	movs	r1, r4
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd90      	pop	{r4, r7, pc}
 80065c2:	46c0      	nop			; (mov r8, r8)
 80065c4:	20000768 	.word	0x20000768

080065c8 <voltmeter_get_percentage>:



double voltmeter_get_percentage()
{
 80065c8:	b590      	push	{r4, r7, lr}
 80065ca:	af00      	add	r7, sp, #0
	return accu_percentage;
 80065cc:	4b03      	ldr	r3, [pc, #12]	; (80065dc <voltmeter_get_percentage+0x14>)
 80065ce:	685c      	ldr	r4, [r3, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
}
 80065d2:	0018      	movs	r0, r3
 80065d4:	0021      	movs	r1, r4
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd90      	pop	{r4, r7, pc}
 80065da:	46c0      	nop			; (mov r8, r8)
 80065dc:	20000770 	.word	0x20000770

080065e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80065e0:	480d      	ldr	r0, [pc, #52]	; (8006618 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80065e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80065e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80065e6:	e003      	b.n	80065f0 <LoopCopyDataInit>

080065e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80065e8:	4b0c      	ldr	r3, [pc, #48]	; (800661c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80065ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80065ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80065ee:	3104      	adds	r1, #4

080065f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80065f0:	480b      	ldr	r0, [pc, #44]	; (8006620 <LoopForever+0xa>)
  ldr  r3, =_edata
 80065f2:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <LoopForever+0xe>)
  adds  r2, r0, r1
 80065f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80065f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80065f8:	d3f6      	bcc.n	80065e8 <CopyDataInit>
  ldr  r2, =_sbss
 80065fa:	4a0b      	ldr	r2, [pc, #44]	; (8006628 <LoopForever+0x12>)
  b  LoopFillZerobss
 80065fc:	e002      	b.n	8006604 <LoopFillZerobss>

080065fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80065fe:	2300      	movs	r3, #0
  str  r3, [r2]
 8006600:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006602:	3204      	adds	r2, #4

08006604 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8006604:	4b09      	ldr	r3, [pc, #36]	; (800662c <LoopForever+0x16>)
  cmp  r2, r3
 8006606:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006608:	d3f9      	bcc.n	80065fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800660a:	f7ff fe07 	bl	800621c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800660e:	f003 fbd5 	bl	8009dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006612:	f7fc f92f 	bl	8002874 <main>

08006616 <LoopForever>:

LoopForever:
    b LoopForever
 8006616:	e7fe      	b.n	8006616 <LoopForever>
   ldr   r0, =_estack
 8006618:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 800661c:	0800d60c 	.word	0x0800d60c
  ldr  r0, =_sdata
 8006620:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006624:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 8006628:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 800662c:	20000994 	.word	0x20000994

08006630 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006630:	e7fe      	b.n	8006630 <ADC1_COMP_IRQHandler>
	...

08006634 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800663a:	1dfb      	adds	r3, r7, #7
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8006640:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <HAL_Init+0x3c>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	4b0a      	ldr	r3, [pc, #40]	; (8006670 <HAL_Init+0x3c>)
 8006646:	2140      	movs	r1, #64	; 0x40
 8006648:	430a      	orrs	r2, r1
 800664a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800664c:	2000      	movs	r0, #0
 800664e:	f000 f811 	bl	8006674 <HAL_InitTick>
 8006652:	1e03      	subs	r3, r0, #0
 8006654:	d003      	beq.n	800665e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8006656:	1dfb      	adds	r3, r7, #7
 8006658:	2201      	movs	r2, #1
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	e001      	b.n	8006662 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800665e:	f7ff fd63 	bl	8006128 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006662:	1dfb      	adds	r3, r7, #7
 8006664:	781b      	ldrb	r3, [r3, #0]
}
 8006666:	0018      	movs	r0, r3
 8006668:	46bd      	mov	sp, r7
 800666a:	b002      	add	sp, #8
 800666c:	bd80      	pop	{r7, pc}
 800666e:	46c0      	nop			; (mov r8, r8)
 8006670:	40022000 	.word	0x40022000

08006674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800667c:	230f      	movs	r3, #15
 800667e:	18fb      	adds	r3, r7, r3
 8006680:	2200      	movs	r2, #0
 8006682:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8006684:	4b0f      	ldr	r3, [pc, #60]	; (80066c4 <HAL_InitTick+0x50>)
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	23fa      	movs	r3, #250	; 0xfa
 800668a:	0099      	lsls	r1, r3, #2
 800668c:	0010      	movs	r0, r2
 800668e:	f7f9 fd43 	bl	8000118 <__udivsi3>
 8006692:	0003      	movs	r3, r0
 8006694:	0018      	movs	r0, r3
 8006696:	f000 fc86 	bl	8006fa6 <HAL_SYSTICK_Config>
 800669a:	1e03      	subs	r3, r0, #0
 800669c:	d004      	beq.n	80066a8 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800669e:	230f      	movs	r3, #15
 80066a0:	18fb      	adds	r3, r7, r3
 80066a2:	2201      	movs	r2, #1
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	e006      	b.n	80066b6 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	2301      	movs	r3, #1
 80066ac:	425b      	negs	r3, r3
 80066ae:	2200      	movs	r2, #0
 80066b0:	0018      	movs	r0, r3
 80066b2:	f000 fc53 	bl	8006f5c <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80066b6:	230f      	movs	r3, #15
 80066b8:	18fb      	adds	r3, r7, r3
 80066ba:	781b      	ldrb	r3, [r3, #0]
}
 80066bc:	0018      	movs	r0, r3
 80066be:	46bd      	mov	sp, r7
 80066c0:	b004      	add	sp, #16
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	2000002c 	.word	0x2000002c

080066c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  uwTick++;
 80066cc:	4b03      	ldr	r3, [pc, #12]	; (80066dc <HAL_IncTick+0x14>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	4b02      	ldr	r3, [pc, #8]	; (80066dc <HAL_IncTick+0x14>)
 80066d4:	601a      	str	r2, [r3, #0]
}
 80066d6:	46c0      	nop			; (mov r8, r8)
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	2000098c 	.word	0x2000098c

080066e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  return uwTick;
 80066e4:	4b02      	ldr	r3, [pc, #8]	; (80066f0 <HAL_GetTick+0x10>)
 80066e6:	681b      	ldr	r3, [r3, #0]
}
 80066e8:	0018      	movs	r0, r3
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	2000098c 	.word	0x2000098c

080066f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80066fc:	f7ff fff0 	bl	80066e0 <HAL_GetTick>
 8006700:	0003      	movs	r3, r0
 8006702:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	3301      	adds	r3, #1
 800670c:	d002      	beq.n	8006714 <HAL_Delay+0x20>
  {
    wait++;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3301      	adds	r3, #1
 8006712:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006714:	46c0      	nop			; (mov r8, r8)
 8006716:	f7ff ffe3 	bl	80066e0 <HAL_GetTick>
 800671a:	0002      	movs	r2, r0
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	429a      	cmp	r2, r3
 8006724:	d8f7      	bhi.n	8006716 <HAL_Delay+0x22>
  {
  }
}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	46bd      	mov	sp, r7
 800672a:	b004      	add	sp, #16
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e159      	b.n	80069f6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10a      	bne.n	8006760 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2250      	movs	r2, #80	; 0x50
 8006754:	2100      	movs	r1, #0
 8006756:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	0018      	movs	r0, r3
 800675c:	f7fb fda0 	bl	80022a0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006764:	2210      	movs	r2, #16
 8006766:	4013      	ands	r3, r2
 8006768:	2b10      	cmp	r3, #16
 800676a:	d005      	beq.n	8006778 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	2204      	movs	r2, #4
 8006774:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006776:	d00b      	beq.n	8006790 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677c:	2210      	movs	r2, #16
 800677e:	431a      	orrs	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2250      	movs	r2, #80	; 0x50
 8006788:	2100      	movs	r1, #0
 800678a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e132      	b.n	80069f6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006794:	4a9a      	ldr	r2, [pc, #616]	; (8006a00 <HAL_ADC_Init+0x2d0>)
 8006796:	4013      	ands	r3, r2
 8006798:	2202      	movs	r2, #2
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2203      	movs	r2, #3
 80067a8:	4013      	ands	r3, r2
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d108      	bne.n	80067c0 <HAL_ADC_Init+0x90>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2201      	movs	r2, #1
 80067b6:	4013      	ands	r3, r2
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d101      	bne.n	80067c0 <HAL_ADC_Init+0x90>
 80067bc:	2301      	movs	r3, #1
 80067be:	e000      	b.n	80067c2 <HAL_ADC_Init+0x92>
 80067c0:	2300      	movs	r3, #0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d149      	bne.n	800685a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	23c0      	movs	r3, #192	; 0xc0
 80067cc:	061b      	lsls	r3, r3, #24
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d00b      	beq.n	80067ea <HAL_ADC_Init+0xba>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	2380      	movs	r3, #128	; 0x80
 80067d8:	05db      	lsls	r3, r3, #23
 80067da:	429a      	cmp	r2, r3
 80067dc:	d005      	beq.n	80067ea <HAL_ADC_Init+0xba>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	2380      	movs	r3, #128	; 0x80
 80067e4:	061b      	lsls	r3, r3, #24
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d111      	bne.n	800680e <HAL_ADC_Init+0xde>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	691a      	ldr	r2, [r3, #16]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	0092      	lsls	r2, r2, #2
 80067f6:	0892      	lsrs	r2, r2, #2
 80067f8:	611a      	str	r2, [r3, #16]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6919      	ldr	r1, [r3, #16]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	611a      	str	r2, [r3, #16]
 800680c:	e014      	b.n	8006838 <HAL_ADC_Init+0x108>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	0092      	lsls	r2, r2, #2
 800681a:	0892      	lsrs	r2, r2, #2
 800681c:	611a      	str	r2, [r3, #16]
 800681e:	4b79      	ldr	r3, [pc, #484]	; (8006a04 <HAL_ADC_Init+0x2d4>)
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	4b78      	ldr	r3, [pc, #480]	; (8006a04 <HAL_ADC_Init+0x2d4>)
 8006824:	4978      	ldr	r1, [pc, #480]	; (8006a08 <HAL_ADC_Init+0x2d8>)
 8006826:	400a      	ands	r2, r1
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	4b76      	ldr	r3, [pc, #472]	; (8006a04 <HAL_ADC_Init+0x2d4>)
 800682c:	6819      	ldr	r1, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	4b74      	ldr	r3, [pc, #464]	; (8006a04 <HAL_ADC_Init+0x2d4>)
 8006834:	430a      	orrs	r2, r1
 8006836:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68da      	ldr	r2, [r3, #12]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2118      	movs	r1, #24
 8006844:	438a      	bics	r2, r1
 8006846:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68d9      	ldr	r1, [r3, #12]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	689a      	ldr	r2, [r3, #8]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800685a:	4b6a      	ldr	r3, [pc, #424]	; (8006a04 <HAL_ADC_Init+0x2d4>)
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4b69      	ldr	r3, [pc, #420]	; (8006a04 <HAL_ADC_Init+0x2d4>)
 8006860:	496a      	ldr	r1, [pc, #424]	; (8006a0c <HAL_ADC_Init+0x2dc>)
 8006862:	400a      	ands	r2, r1
 8006864:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8006866:	4b67      	ldr	r3, [pc, #412]	; (8006a04 <HAL_ADC_Init+0x2d4>)
 8006868:	6819      	ldr	r1, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686e:	065a      	lsls	r2, r3, #25
 8006870:	4b64      	ldr	r3, [pc, #400]	; (8006a04 <HAL_ADC_Init+0x2d4>)
 8006872:	430a      	orrs	r2, r1
 8006874:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	2380      	movs	r3, #128	; 0x80
 800687e:	055b      	lsls	r3, r3, #21
 8006880:	4013      	ands	r3, r2
 8006882:	d108      	bne.n	8006896 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2180      	movs	r1, #128	; 0x80
 8006890:	0549      	lsls	r1, r1, #21
 8006892:	430a      	orrs	r2, r1
 8006894:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68da      	ldr	r2, [r3, #12]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	495b      	ldr	r1, [pc, #364]	; (8006a10 <HAL_ADC_Init+0x2e0>)
 80068a2:	400a      	ands	r2, r1
 80068a4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68d9      	ldr	r1, [r3, #12]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d101      	bne.n	80068bc <HAL_ADC_Init+0x18c>
 80068b8:	2304      	movs	r3, #4
 80068ba:	e000      	b.n	80068be <HAL_ADC_Init+0x18e>
 80068bc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80068be:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2020      	movs	r0, #32
 80068c4:	5c1b      	ldrb	r3, [r3, r0]
 80068c6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80068c8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	202c      	movs	r0, #44	; 0x2c
 80068ce:	5c1b      	ldrb	r3, [r3, r0]
 80068d0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80068d2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80068d8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80068e0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80068e8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068f6:	23c2      	movs	r3, #194	; 0xc2
 80068f8:	33ff      	adds	r3, #255	; 0xff
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d00b      	beq.n	8006916 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68d9      	ldr	r1, [r3, #12]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2221      	movs	r2, #33	; 0x21
 800691a:	5c9b      	ldrb	r3, [r3, r2]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d11a      	bne.n	8006956 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	5c9b      	ldrb	r3, [r3, r2]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d109      	bne.n	800693e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2180      	movs	r1, #128	; 0x80
 8006936:	0249      	lsls	r1, r1, #9
 8006938:	430a      	orrs	r2, r1
 800693a:	60da      	str	r2, [r3, #12]
 800693c:	e00b      	b.n	8006956 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006942:	2220      	movs	r2, #32
 8006944:	431a      	orrs	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800694e:	2201      	movs	r2, #1
 8006950:	431a      	orrs	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695a:	2b01      	cmp	r3, #1
 800695c:	d11f      	bne.n	800699e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	691a      	ldr	r2, [r3, #16]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	492a      	ldr	r1, [pc, #168]	; (8006a14 <HAL_ADC_Init+0x2e4>)
 800696a:	400a      	ands	r2, r1
 800696c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6919      	ldr	r1, [r3, #16]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800697c:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8006982:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2101      	movs	r1, #1
 8006998:	430a      	orrs	r2, r1
 800699a:	611a      	str	r2, [r3, #16]
 800699c:	e00e      	b.n	80069bc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	2201      	movs	r2, #1
 80069a6:	4013      	ands	r3, r2
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d107      	bne.n	80069bc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	691a      	ldr	r2, [r3, #16]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2101      	movs	r1, #1
 80069b8:	438a      	bics	r2, r1
 80069ba:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695a      	ldr	r2, [r3, #20]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2107      	movs	r1, #7
 80069c8:	438a      	bics	r2, r1
 80069ca:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6959      	ldr	r1, [r3, #20]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e8:	2203      	movs	r2, #3
 80069ea:	4393      	bics	r3, r2
 80069ec:	2201      	movs	r2, #1
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	0018      	movs	r0, r3
 80069f8:	46bd      	mov	sp, r7
 80069fa:	b002      	add	sp, #8
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	fffffefd 	.word	0xfffffefd
 8006a04:	40012708 	.word	0x40012708
 8006a08:	ffc3ffff 	.word	0xffc3ffff
 8006a0c:	fdffffff 	.word	0xfdffffff
 8006a10:	fffe0219 	.word	0xfffe0219
 8006a14:	fffffc03 	.word	0xfffffc03

08006a18 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006a18:	b590      	push	{r4, r7, lr}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a20:	230f      	movs	r3, #15
 8006a22:	18fb      	adds	r3, r7, r3
 8006a24:	2200      	movs	r2, #0
 8006a26:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	2204      	movs	r2, #4
 8006a30:	4013      	ands	r3, r2
 8006a32:	d138      	bne.n	8006aa6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2250      	movs	r2, #80	; 0x50
 8006a38:	5c9b      	ldrb	r3, [r3, r2]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_ADC_Start+0x2a>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e038      	b.n	8006ab4 <HAL_ADC_Start+0x9c>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2250      	movs	r2, #80	; 0x50
 8006a46:	2101      	movs	r1, #1
 8006a48:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d007      	beq.n	8006a62 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006a52:	230f      	movs	r3, #15
 8006a54:	18fc      	adds	r4, r7, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	0018      	movs	r0, r3
 8006a5a:	f000 f959 	bl	8006d10 <ADC_Enable>
 8006a5e:	0003      	movs	r3, r0
 8006a60:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006a62:	230f      	movs	r3, #15
 8006a64:	18fb      	adds	r3, r7, r3
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d120      	bne.n	8006aae <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a70:	4a12      	ldr	r2, [pc, #72]	; (8006abc <HAL_ADC_Start+0xa4>)
 8006a72:	4013      	ands	r3, r2
 8006a74:	2280      	movs	r2, #128	; 0x80
 8006a76:	0052      	lsls	r2, r2, #1
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2250      	movs	r2, #80	; 0x50
 8006a88:	2100      	movs	r1, #0
 8006a8a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	221c      	movs	r2, #28
 8006a92:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2104      	movs	r1, #4
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	609a      	str	r2, [r3, #8]
 8006aa4:	e003      	b.n	8006aae <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006aa6:	230f      	movs	r3, #15
 8006aa8:	18fb      	adds	r3, r7, r3
 8006aaa:	2202      	movs	r2, #2
 8006aac:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006aae:	230f      	movs	r3, #15
 8006ab0:	18fb      	adds	r3, r7, r3
 8006ab2:	781b      	ldrb	r3, [r3, #0]
}
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	b005      	add	sp, #20
 8006aba:	bd90      	pop	{r4, r7, pc}
 8006abc:	fffff0fe 	.word	0xfffff0fe

08006ac0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	2b08      	cmp	r3, #8
 8006ad8:	d102      	bne.n	8006ae0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8006ada:	2308      	movs	r3, #8
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	e014      	b.n	8006b0a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	4013      	ands	r3, r2
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d10b      	bne.n	8006b06 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af2:	2220      	movs	r2, #32
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2250      	movs	r2, #80	; 0x50
 8006afe:	2100      	movs	r1, #0
 8006b00:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e06c      	b.n	8006be0 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8006b06:	230c      	movs	r3, #12
 8006b08:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8006b0a:	f7ff fde9 	bl	80066e0 <HAL_GetTick>
 8006b0e:	0003      	movs	r3, r0
 8006b10:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006b12:	e019      	b.n	8006b48 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	3301      	adds	r3, #1
 8006b18:	d016      	beq.n	8006b48 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <HAL_ADC_PollForConversion+0x70>
 8006b20:	f7ff fdde 	bl	80066e0 <HAL_GetTick>
 8006b24:	0002      	movs	r2, r0
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d20b      	bcs.n	8006b48 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b34:	2204      	movs	r2, #4
 8006b36:	431a      	orrs	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2250      	movs	r2, #80	; 0x50
 8006b40:	2100      	movs	r1, #0
 8006b42:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e04b      	b.n	8006be0 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4013      	ands	r3, r2
 8006b52:	d0df      	beq.n	8006b14 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b58:	2280      	movs	r2, #128	; 0x80
 8006b5a:	0092      	lsls	r2, r2, #2
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	23c0      	movs	r3, #192	; 0xc0
 8006b6a:	011b      	lsls	r3, r3, #4
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	d12e      	bne.n	8006bce <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2220      	movs	r2, #32
 8006b74:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d129      	bne.n	8006bce <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2208      	movs	r2, #8
 8006b82:	4013      	ands	r3, r2
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d122      	bne.n	8006bce <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	2204      	movs	r2, #4
 8006b90:	4013      	ands	r3, r2
 8006b92:	d110      	bne.n	8006bb6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	210c      	movs	r1, #12
 8006ba0:	438a      	bics	r2, r1
 8006ba2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba8:	4a0f      	ldr	r2, [pc, #60]	; (8006be8 <HAL_ADC_PollForConversion+0x128>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	2201      	movs	r2, #1
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	655a      	str	r2, [r3, #84]	; 0x54
 8006bb4:	e00b      	b.n	8006bce <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bba:	2220      	movs	r2, #32
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d103      	bne.n	8006bde <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	220c      	movs	r2, #12
 8006bdc:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	0018      	movs	r0, r3
 8006be2:	46bd      	mov	sp, r7
 8006be4:	b004      	add	sp, #16
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	fffffefe 	.word	0xfffffefe

08006bec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b002      	add	sp, #8
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2250      	movs	r2, #80	; 0x50
 8006c12:	5c9b      	ldrb	r3, [r3, r2]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d101      	bne.n	8006c1c <HAL_ADC_ConfigChannel+0x18>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e06c      	b.n	8006cf6 <HAL_ADC_ConfigChannel+0xf2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2250      	movs	r2, #80	; 0x50
 8006c20:	2101      	movs	r1, #1
 8006c22:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	2204      	movs	r2, #4
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	d00b      	beq.n	8006c48 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c34:	2220      	movs	r2, #32
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2250      	movs	r2, #80	; 0x50
 8006c40:	2100      	movs	r1, #0
 8006c42:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e056      	b.n	8006cf6 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	4a2c      	ldr	r2, [pc, #176]	; (8006d00 <HAL_ADC_ConfigChannel+0xfc>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d028      	beq.n	8006ca4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	035b      	lsls	r3, r3, #13
 8006c5e:	0b5a      	lsrs	r2, r3, #13
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	2380      	movs	r3, #128	; 0x80
 8006c6e:	02db      	lsls	r3, r3, #11
 8006c70:	4013      	ands	r3, r2
 8006c72:	d009      	beq.n	8006c88 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006c74:	4b23      	ldr	r3, [pc, #140]	; (8006d04 <HAL_ADC_ConfigChannel+0x100>)
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	4b22      	ldr	r3, [pc, #136]	; (8006d04 <HAL_ADC_ConfigChannel+0x100>)
 8006c7a:	2180      	movs	r1, #128	; 0x80
 8006c7c:	0409      	lsls	r1, r1, #16
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006c82:	200a      	movs	r0, #10
 8006c84:	f000 f8a4 	bl	8006dd0 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	2380      	movs	r3, #128	; 0x80
 8006c8e:	029b      	lsls	r3, r3, #10
 8006c90:	4013      	ands	r3, r2
 8006c92:	d02b      	beq.n	8006cec <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8006c94:	4b1b      	ldr	r3, [pc, #108]	; (8006d04 <HAL_ADC_ConfigChannel+0x100>)
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	4b1a      	ldr	r3, [pc, #104]	; (8006d04 <HAL_ADC_ConfigChannel+0x100>)
 8006c9a:	2180      	movs	r1, #128	; 0x80
 8006c9c:	03c9      	lsls	r1, r1, #15
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	e023      	b.n	8006cec <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	035b      	lsls	r3, r3, #13
 8006cb0:	0b5b      	lsrs	r3, r3, #13
 8006cb2:	43d9      	mvns	r1, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	400a      	ands	r2, r1
 8006cba:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	2380      	movs	r3, #128	; 0x80
 8006cc2:	02db      	lsls	r3, r3, #11
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	d005      	beq.n	8006cd4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006cc8:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <HAL_ADC_ConfigChannel+0x100>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <HAL_ADC_ConfigChannel+0x100>)
 8006cce:	490e      	ldr	r1, [pc, #56]	; (8006d08 <HAL_ADC_ConfigChannel+0x104>)
 8006cd0:	400a      	ands	r2, r1
 8006cd2:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	2380      	movs	r3, #128	; 0x80
 8006cda:	029b      	lsls	r3, r3, #10
 8006cdc:	4013      	ands	r3, r2
 8006cde:	d005      	beq.n	8006cec <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006ce0:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <HAL_ADC_ConfigChannel+0x100>)
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	4b07      	ldr	r3, [pc, #28]	; (8006d04 <HAL_ADC_ConfigChannel+0x100>)
 8006ce6:	4909      	ldr	r1, [pc, #36]	; (8006d0c <HAL_ADC_ConfigChannel+0x108>)
 8006ce8:	400a      	ands	r2, r1
 8006cea:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2250      	movs	r2, #80	; 0x50
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	b002      	add	sp, #8
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	46c0      	nop			; (mov r8, r8)
 8006d00:	00001001 	.word	0x00001001
 8006d04:	40012708 	.word	0x40012708
 8006d08:	ff7fffff 	.word	0xff7fffff
 8006d0c:	ffbfffff 	.word	0xffbfffff

08006d10 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2203      	movs	r2, #3
 8006d24:	4013      	ands	r3, r2
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d108      	bne.n	8006d3c <ADC_Enable+0x2c>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2201      	movs	r2, #1
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <ADC_Enable+0x2c>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <ADC_Enable+0x2e>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d13f      	bne.n	8006dc2 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	4a20      	ldr	r2, [pc, #128]	; (8006dcc <ADC_Enable+0xbc>)
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	d00d      	beq.n	8006d6a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d52:	2210      	movs	r2, #16
 8006d54:	431a      	orrs	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5e:	2201      	movs	r2, #1
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e02c      	b.n	8006dc4 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689a      	ldr	r2, [r3, #8]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2101      	movs	r1, #1
 8006d76:	430a      	orrs	r2, r1
 8006d78:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	f000 f828 	bl	8006dd0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006d80:	f7ff fcae 	bl	80066e0 <HAL_GetTick>
 8006d84:	0003      	movs	r3, r0
 8006d86:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006d88:	e014      	b.n	8006db4 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006d8a:	f7ff fca9 	bl	80066e0 <HAL_GetTick>
 8006d8e:	0002      	movs	r2, r0
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b0a      	cmp	r3, #10
 8006d96:	d90d      	bls.n	8006db4 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9c:	2210      	movs	r2, #16
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da8:	2201      	movs	r2, #1
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e007      	b.n	8006dc4 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d1e3      	bne.n	8006d8a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	b004      	add	sp, #16
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	80000017 	.word	0x80000017

08006dd0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006dd8:	4b0a      	ldr	r3, [pc, #40]	; (8006e04 <ADC_DelayMicroSecond+0x34>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	490a      	ldr	r1, [pc, #40]	; (8006e08 <ADC_DelayMicroSecond+0x38>)
 8006dde:	0018      	movs	r0, r3
 8006de0:	f7f9 f99a 	bl	8000118 <__udivsi3>
 8006de4:	0003      	movs	r3, r0
 8006de6:	001a      	movs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4353      	muls	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8006dee:	e002      	b.n	8006df6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1f9      	bne.n	8006df0 <ADC_DelayMicroSecond+0x20>
  } 
}
 8006dfc:	46c0      	nop			; (mov r8, r8)
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	b004      	add	sp, #16
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	2000002c 	.word	0x2000002c
 8006e08:	000f4240 	.word	0x000f4240

08006e0c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	0002      	movs	r2, r0
 8006e14:	1dfb      	adds	r3, r7, #7
 8006e16:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006e18:	1dfb      	adds	r3, r7, #7
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	001a      	movs	r2, r3
 8006e1e:	231f      	movs	r3, #31
 8006e20:	401a      	ands	r2, r3
 8006e22:	4b04      	ldr	r3, [pc, #16]	; (8006e34 <NVIC_EnableIRQ+0x28>)
 8006e24:	2101      	movs	r1, #1
 8006e26:	4091      	lsls	r1, r2
 8006e28:	000a      	movs	r2, r1
 8006e2a:	601a      	str	r2, [r3, #0]
}
 8006e2c:	46c0      	nop			; (mov r8, r8)
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	b002      	add	sp, #8
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	e000e100 	.word	0xe000e100

08006e38 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e38:	b590      	push	{r4, r7, lr}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	0002      	movs	r2, r0
 8006e40:	6039      	str	r1, [r7, #0]
 8006e42:	1dfb      	adds	r3, r7, #7
 8006e44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8006e46:	1dfb      	adds	r3, r7, #7
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e4c:	d932      	bls.n	8006eb4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e4e:	4a2f      	ldr	r2, [pc, #188]	; (8006f0c <NVIC_SetPriority+0xd4>)
 8006e50:	1dfb      	adds	r3, r7, #7
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	0019      	movs	r1, r3
 8006e56:	230f      	movs	r3, #15
 8006e58:	400b      	ands	r3, r1
 8006e5a:	3b08      	subs	r3, #8
 8006e5c:	089b      	lsrs	r3, r3, #2
 8006e5e:	3306      	adds	r3, #6
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	18d3      	adds	r3, r2, r3
 8006e64:	3304      	adds	r3, #4
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	1dfa      	adds	r2, r7, #7
 8006e6a:	7812      	ldrb	r2, [r2, #0]
 8006e6c:	0011      	movs	r1, r2
 8006e6e:	2203      	movs	r2, #3
 8006e70:	400a      	ands	r2, r1
 8006e72:	00d2      	lsls	r2, r2, #3
 8006e74:	21ff      	movs	r1, #255	; 0xff
 8006e76:	4091      	lsls	r1, r2
 8006e78:	000a      	movs	r2, r1
 8006e7a:	43d2      	mvns	r2, r2
 8006e7c:	401a      	ands	r2, r3
 8006e7e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	019b      	lsls	r3, r3, #6
 8006e84:	22ff      	movs	r2, #255	; 0xff
 8006e86:	401a      	ands	r2, r3
 8006e88:	1dfb      	adds	r3, r7, #7
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	2303      	movs	r3, #3
 8006e90:	4003      	ands	r3, r0
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e96:	481d      	ldr	r0, [pc, #116]	; (8006f0c <NVIC_SetPriority+0xd4>)
 8006e98:	1dfb      	adds	r3, r7, #7
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	001c      	movs	r4, r3
 8006e9e:	230f      	movs	r3, #15
 8006ea0:	4023      	ands	r3, r4
 8006ea2:	3b08      	subs	r3, #8
 8006ea4:	089b      	lsrs	r3, r3, #2
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	3306      	adds	r3, #6
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	18c3      	adds	r3, r0, r3
 8006eae:	3304      	adds	r3, #4
 8006eb0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006eb2:	e027      	b.n	8006f04 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006eb4:	4a16      	ldr	r2, [pc, #88]	; (8006f10 <NVIC_SetPriority+0xd8>)
 8006eb6:	1dfb      	adds	r3, r7, #7
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	b25b      	sxtb	r3, r3
 8006ebc:	089b      	lsrs	r3, r3, #2
 8006ebe:	33c0      	adds	r3, #192	; 0xc0
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	589b      	ldr	r3, [r3, r2]
 8006ec4:	1dfa      	adds	r2, r7, #7
 8006ec6:	7812      	ldrb	r2, [r2, #0]
 8006ec8:	0011      	movs	r1, r2
 8006eca:	2203      	movs	r2, #3
 8006ecc:	400a      	ands	r2, r1
 8006ece:	00d2      	lsls	r2, r2, #3
 8006ed0:	21ff      	movs	r1, #255	; 0xff
 8006ed2:	4091      	lsls	r1, r2
 8006ed4:	000a      	movs	r2, r1
 8006ed6:	43d2      	mvns	r2, r2
 8006ed8:	401a      	ands	r2, r3
 8006eda:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	019b      	lsls	r3, r3, #6
 8006ee0:	22ff      	movs	r2, #255	; 0xff
 8006ee2:	401a      	ands	r2, r3
 8006ee4:	1dfb      	adds	r3, r7, #7
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	0018      	movs	r0, r3
 8006eea:	2303      	movs	r3, #3
 8006eec:	4003      	ands	r3, r0
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ef2:	4807      	ldr	r0, [pc, #28]	; (8006f10 <NVIC_SetPriority+0xd8>)
 8006ef4:	1dfb      	adds	r3, r7, #7
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	b25b      	sxtb	r3, r3
 8006efa:	089b      	lsrs	r3, r3, #2
 8006efc:	430a      	orrs	r2, r1
 8006efe:	33c0      	adds	r3, #192	; 0xc0
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	501a      	str	r2, [r3, r0]
}
 8006f04:	46c0      	nop			; (mov r8, r8)
 8006f06:	46bd      	mov	sp, r7
 8006f08:	b003      	add	sp, #12
 8006f0a:	bd90      	pop	{r4, r7, pc}
 8006f0c:	e000ed00 	.word	0xe000ed00
 8006f10:	e000e100 	.word	0xe000e100

08006f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	4a0c      	ldr	r2, [pc, #48]	; (8006f54 <SysTick_Config+0x40>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d901      	bls.n	8006f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f26:	2301      	movs	r3, #1
 8006f28:	e010      	b.n	8006f4c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f2a:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <SysTick_Config+0x44>)
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	3a01      	subs	r2, #1
 8006f30:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f32:	2301      	movs	r3, #1
 8006f34:	425b      	negs	r3, r3
 8006f36:	2103      	movs	r1, #3
 8006f38:	0018      	movs	r0, r3
 8006f3a:	f7ff ff7d 	bl	8006e38 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f3e:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <SysTick_Config+0x44>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f44:	4b04      	ldr	r3, [pc, #16]	; (8006f58 <SysTick_Config+0x44>)
 8006f46:	2207      	movs	r2, #7
 8006f48:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	b002      	add	sp, #8
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	00ffffff 	.word	0x00ffffff
 8006f58:	e000e010 	.word	0xe000e010

08006f5c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	607a      	str	r2, [r7, #4]
 8006f66:	210f      	movs	r1, #15
 8006f68:	187b      	adds	r3, r7, r1
 8006f6a:	1c02      	adds	r2, r0, #0
 8006f6c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	187b      	adds	r3, r7, r1
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	b25b      	sxtb	r3, r3
 8006f76:	0011      	movs	r1, r2
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f7ff ff5d 	bl	8006e38 <NVIC_SetPriority>
}
 8006f7e:	46c0      	nop			; (mov r8, r8)
 8006f80:	46bd      	mov	sp, r7
 8006f82:	b004      	add	sp, #16
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	0002      	movs	r2, r0
 8006f8e:	1dfb      	adds	r3, r7, #7
 8006f90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f92:	1dfb      	adds	r3, r7, #7
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	b25b      	sxtb	r3, r3
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f7ff ff37 	bl	8006e0c <NVIC_EnableIRQ>
}
 8006f9e:	46c0      	nop			; (mov r8, r8)
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	b002      	add	sp, #8
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b082      	sub	sp, #8
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	f7ff ffaf 	bl	8006f14 <SysTick_Config>
 8006fb6:	0003      	movs	r3, r0
}
 8006fb8:	0018      	movs	r0, r3
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	b002      	add	sp, #8
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006fc4:	f000 f803 	bl	8006fce <HAL_SYSTICK_Callback>
}
 8006fc8:	46c0      	nop			; (mov r8, r8)
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8006fee:	e14f      	b.n	8007290 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	4091      	lsls	r1, r2
 8006ffa:	000a      	movs	r2, r1
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d100      	bne.n	8007008 <HAL_GPIO_Init+0x30>
 8007006:	e140      	b.n	800728a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d003      	beq.n	8007018 <HAL_GPIO_Init+0x40>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2b12      	cmp	r3, #18
 8007016:	d123      	bne.n	8007060 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	08da      	lsrs	r2, r3, #3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3208      	adds	r2, #8
 8007020:	0092      	lsls	r2, r2, #2
 8007022:	58d3      	ldr	r3, [r2, r3]
 8007024:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2207      	movs	r2, #7
 800702a:	4013      	ands	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	220f      	movs	r2, #15
 8007030:	409a      	lsls	r2, r3
 8007032:	0013      	movs	r3, r2
 8007034:	43da      	mvns	r2, r3
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	4013      	ands	r3, r2
 800703a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2107      	movs	r1, #7
 8007044:	400b      	ands	r3, r1
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	409a      	lsls	r2, r3
 800704a:	0013      	movs	r3, r2
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	08da      	lsrs	r2, r3, #3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3208      	adds	r2, #8
 800705a:	0092      	lsls	r2, r2, #2
 800705c:	6939      	ldr	r1, [r7, #16]
 800705e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d00b      	beq.n	8007080 <HAL_GPIO_Init+0xa8>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	2b02      	cmp	r3, #2
 800706e:	d007      	beq.n	8007080 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007074:	2b11      	cmp	r3, #17
 8007076:	d003      	beq.n	8007080 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2b12      	cmp	r3, #18
 800707e:	d130      	bne.n	80070e2 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	2203      	movs	r2, #3
 800708c:	409a      	lsls	r2, r3
 800708e:	0013      	movs	r3, r2
 8007090:	43da      	mvns	r2, r3
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	4013      	ands	r3, r2
 8007096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	68da      	ldr	r2, [r3, #12]
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	409a      	lsls	r2, r3
 80070a2:	0013      	movs	r3, r2
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070b6:	2201      	movs	r2, #1
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	409a      	lsls	r2, r3
 80070bc:	0013      	movs	r3, r2
 80070be:	43da      	mvns	r2, r3
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	4013      	ands	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	091b      	lsrs	r3, r3, #4
 80070cc:	2201      	movs	r2, #1
 80070ce:	401a      	ands	r2, r3
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	409a      	lsls	r2, r3
 80070d4:	0013      	movs	r3, r2
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	2203      	movs	r2, #3
 80070ee:	409a      	lsls	r2, r3
 80070f0:	0013      	movs	r3, r2
 80070f2:	43da      	mvns	r2, r3
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	4013      	ands	r3, r2
 80070f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2203      	movs	r2, #3
 8007100:	401a      	ands	r2, r3
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	409a      	lsls	r2, r3
 8007108:	0013      	movs	r3, r2
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	4313      	orrs	r3, r2
 800710e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	2203      	movs	r2, #3
 8007122:	409a      	lsls	r2, r3
 8007124:	0013      	movs	r3, r2
 8007126:	43da      	mvns	r2, r3
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	4013      	ands	r3, r2
 800712c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	689a      	ldr	r2, [r3, #8]
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	409a      	lsls	r2, r3
 8007138:	0013      	movs	r3, r2
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	4313      	orrs	r3, r2
 800713e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	2380      	movs	r3, #128	; 0x80
 800714c:	055b      	lsls	r3, r3, #21
 800714e:	4013      	ands	r3, r2
 8007150:	d100      	bne.n	8007154 <HAL_GPIO_Init+0x17c>
 8007152:	e09a      	b.n	800728a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007154:	4b54      	ldr	r3, [pc, #336]	; (80072a8 <HAL_GPIO_Init+0x2d0>)
 8007156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007158:	4b53      	ldr	r3, [pc, #332]	; (80072a8 <HAL_GPIO_Init+0x2d0>)
 800715a:	2101      	movs	r1, #1
 800715c:	430a      	orrs	r2, r1
 800715e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8007160:	4a52      	ldr	r2, [pc, #328]	; (80072ac <HAL_GPIO_Init+0x2d4>)
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	089b      	lsrs	r3, r3, #2
 8007166:	3302      	adds	r3, #2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	589b      	ldr	r3, [r3, r2]
 800716c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2203      	movs	r2, #3
 8007172:	4013      	ands	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	220f      	movs	r2, #15
 8007178:	409a      	lsls	r2, r3
 800717a:	0013      	movs	r3, r2
 800717c:	43da      	mvns	r2, r3
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	4013      	ands	r3, r2
 8007182:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	23a0      	movs	r3, #160	; 0xa0
 8007188:	05db      	lsls	r3, r3, #23
 800718a:	429a      	cmp	r2, r3
 800718c:	d019      	beq.n	80071c2 <HAL_GPIO_Init+0x1ea>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a47      	ldr	r2, [pc, #284]	; (80072b0 <HAL_GPIO_Init+0x2d8>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d013      	beq.n	80071be <HAL_GPIO_Init+0x1e6>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a46      	ldr	r2, [pc, #280]	; (80072b4 <HAL_GPIO_Init+0x2dc>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d00d      	beq.n	80071ba <HAL_GPIO_Init+0x1e2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a45      	ldr	r2, [pc, #276]	; (80072b8 <HAL_GPIO_Init+0x2e0>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d007      	beq.n	80071b6 <HAL_GPIO_Init+0x1de>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a44      	ldr	r2, [pc, #272]	; (80072bc <HAL_GPIO_Init+0x2e4>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d101      	bne.n	80071b2 <HAL_GPIO_Init+0x1da>
 80071ae:	2305      	movs	r3, #5
 80071b0:	e008      	b.n	80071c4 <HAL_GPIO_Init+0x1ec>
 80071b2:	2306      	movs	r3, #6
 80071b4:	e006      	b.n	80071c4 <HAL_GPIO_Init+0x1ec>
 80071b6:	2303      	movs	r3, #3
 80071b8:	e004      	b.n	80071c4 <HAL_GPIO_Init+0x1ec>
 80071ba:	2302      	movs	r3, #2
 80071bc:	e002      	b.n	80071c4 <HAL_GPIO_Init+0x1ec>
 80071be:	2301      	movs	r3, #1
 80071c0:	e000      	b.n	80071c4 <HAL_GPIO_Init+0x1ec>
 80071c2:	2300      	movs	r3, #0
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	2103      	movs	r1, #3
 80071c8:	400a      	ands	r2, r1
 80071ca:	0092      	lsls	r2, r2, #2
 80071cc:	4093      	lsls	r3, r2
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80071d4:	4935      	ldr	r1, [pc, #212]	; (80072ac <HAL_GPIO_Init+0x2d4>)
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	089b      	lsrs	r3, r3, #2
 80071da:	3302      	adds	r3, #2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80071e2:	4b37      	ldr	r3, [pc, #220]	; (80072c0 <HAL_GPIO_Init+0x2e8>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	43da      	mvns	r2, r3
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	4013      	ands	r3, r2
 80071f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	2380      	movs	r3, #128	; 0x80
 80071f8:	025b      	lsls	r3, r3, #9
 80071fa:	4013      	ands	r3, r2
 80071fc:	d003      	beq.n	8007206 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4313      	orrs	r3, r2
 8007204:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007206:	4b2e      	ldr	r3, [pc, #184]	; (80072c0 <HAL_GPIO_Init+0x2e8>)
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800720c:	4b2c      	ldr	r3, [pc, #176]	; (80072c0 <HAL_GPIO_Init+0x2e8>)
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	43da      	mvns	r2, r3
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	4013      	ands	r3, r2
 800721a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	2380      	movs	r3, #128	; 0x80
 8007222:	029b      	lsls	r3, r3, #10
 8007224:	4013      	ands	r3, r2
 8007226:	d003      	beq.n	8007230 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4313      	orrs	r3, r2
 800722e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007230:	4b23      	ldr	r3, [pc, #140]	; (80072c0 <HAL_GPIO_Init+0x2e8>)
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007236:	4b22      	ldr	r3, [pc, #136]	; (80072c0 <HAL_GPIO_Init+0x2e8>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	43da      	mvns	r2, r3
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	4013      	ands	r3, r2
 8007244:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	2380      	movs	r3, #128	; 0x80
 800724c:	035b      	lsls	r3, r3, #13
 800724e:	4013      	ands	r3, r2
 8007250:	d003      	beq.n	800725a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800725a:	4b19      	ldr	r3, [pc, #100]	; (80072c0 <HAL_GPIO_Init+0x2e8>)
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007260:	4b17      	ldr	r3, [pc, #92]	; (80072c0 <HAL_GPIO_Init+0x2e8>)
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	43da      	mvns	r2, r3
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	4013      	ands	r3, r2
 800726e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	2380      	movs	r3, #128	; 0x80
 8007276:	039b      	lsls	r3, r3, #14
 8007278:	4013      	ands	r3, r2
 800727a:	d003      	beq.n	8007284 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007284:	4b0e      	ldr	r3, [pc, #56]	; (80072c0 <HAL_GPIO_Init+0x2e8>)
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	3301      	adds	r3, #1
 800728e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	40da      	lsrs	r2, r3
 8007298:	1e13      	subs	r3, r2, #0
 800729a:	d000      	beq.n	800729e <HAL_GPIO_Init+0x2c6>
 800729c:	e6a8      	b.n	8006ff0 <HAL_GPIO_Init+0x18>
  }
}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	46bd      	mov	sp, r7
 80072a2:	b006      	add	sp, #24
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	40021000 	.word	0x40021000
 80072ac:	40010000 	.word	0x40010000
 80072b0:	50000400 	.word	0x50000400
 80072b4:	50000800 	.word	0x50000800
 80072b8:	50000c00 	.word	0x50000c00
 80072bc:	50001c00 	.word	0x50001c00
 80072c0:	40010400 	.word	0x40010400

080072c4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	0008      	movs	r0, r1
 80072ce:	0011      	movs	r1, r2
 80072d0:	1cbb      	adds	r3, r7, #2
 80072d2:	1c02      	adds	r2, r0, #0
 80072d4:	801a      	strh	r2, [r3, #0]
 80072d6:	1c7b      	adds	r3, r7, #1
 80072d8:	1c0a      	adds	r2, r1, #0
 80072da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80072dc:	1c7b      	adds	r3, r7, #1
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d004      	beq.n	80072ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80072e4:	1cbb      	adds	r3, r7, #2
 80072e6:	881a      	ldrh	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80072ec:	e003      	b.n	80072f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80072ee:	1cbb      	adds	r3, r7, #2
 80072f0:	881a      	ldrh	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	46bd      	mov	sp, r7
 80072fa:	b002      	add	sp, #8
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e082      	b.n	8007418 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2241      	movs	r2, #65	; 0x41
 8007316:	5c9b      	ldrb	r3, [r3, r2]
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d107      	bne.n	800732e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2240      	movs	r2, #64	; 0x40
 8007322:	2100      	movs	r1, #0
 8007324:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	0018      	movs	r0, r3
 800732a:	f7fb fa2b 	bl	8002784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2241      	movs	r2, #65	; 0x41
 8007332:	2124      	movs	r1, #36	; 0x24
 8007334:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2101      	movs	r1, #1
 8007342:	438a      	bics	r2, r1
 8007344:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4934      	ldr	r1, [pc, #208]	; (8007420 <HAL_I2C_Init+0x120>)
 8007350:	400a      	ands	r2, r1
 8007352:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689a      	ldr	r2, [r3, #8]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4931      	ldr	r1, [pc, #196]	; (8007424 <HAL_I2C_Init+0x124>)
 8007360:	400a      	ands	r2, r1
 8007362:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d108      	bne.n	800737e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2180      	movs	r1, #128	; 0x80
 8007376:	0209      	lsls	r1, r1, #8
 8007378:	430a      	orrs	r2, r1
 800737a:	609a      	str	r2, [r3, #8]
 800737c:	e007      	b.n	800738e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2184      	movs	r1, #132	; 0x84
 8007388:	0209      	lsls	r1, r1, #8
 800738a:	430a      	orrs	r2, r1
 800738c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	2b02      	cmp	r3, #2
 8007394:	d104      	bne.n	80073a0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2280      	movs	r2, #128	; 0x80
 800739c:	0112      	lsls	r2, r2, #4
 800739e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	491f      	ldr	r1, [pc, #124]	; (8007428 <HAL_I2C_Init+0x128>)
 80073ac:	430a      	orrs	r2, r1
 80073ae:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68da      	ldr	r2, [r3, #12]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	491a      	ldr	r1, [pc, #104]	; (8007424 <HAL_I2C_Init+0x124>)
 80073bc:	400a      	ands	r2, r1
 80073be:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691a      	ldr	r2, [r3, #16]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	431a      	orrs	r2, r3
 80073ca:	0011      	movs	r1, r2
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	021a      	lsls	r2, r3, #8
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	69d9      	ldr	r1, [r3, #28]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1a      	ldr	r2, [r3, #32]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2101      	movs	r1, #1
 80073f6:	430a      	orrs	r2, r1
 80073f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2241      	movs	r2, #65	; 0x41
 8007404:	2120      	movs	r1, #32
 8007406:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2242      	movs	r2, #66	; 0x42
 8007412:	2100      	movs	r1, #0
 8007414:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	0018      	movs	r0, r3
 800741a:	46bd      	mov	sp, r7
 800741c:	b002      	add	sp, #8
 800741e:	bd80      	pop	{r7, pc}
 8007420:	f0ffffff 	.word	0xf0ffffff
 8007424:	ffff7fff 	.word	0xffff7fff
 8007428:	02008000 	.word	0x02008000

0800742c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800742c:	b590      	push	{r4, r7, lr}
 800742e:	b089      	sub	sp, #36	; 0x24
 8007430:	af02      	add	r7, sp, #8
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	000c      	movs	r4, r1
 8007436:	0010      	movs	r0, r2
 8007438:	0019      	movs	r1, r3
 800743a:	230a      	movs	r3, #10
 800743c:	18fb      	adds	r3, r7, r3
 800743e:	1c22      	adds	r2, r4, #0
 8007440:	801a      	strh	r2, [r3, #0]
 8007442:	2308      	movs	r3, #8
 8007444:	18fb      	adds	r3, r7, r3
 8007446:	1c02      	adds	r2, r0, #0
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	1dbb      	adds	r3, r7, #6
 800744c:	1c0a      	adds	r2, r1, #0
 800744e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2241      	movs	r2, #65	; 0x41
 8007454:	5c9b      	ldrb	r3, [r3, r2]
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b20      	cmp	r3, #32
 800745a:	d000      	beq.n	800745e <HAL_I2C_Mem_Write+0x32>
 800745c:	e10c      	b.n	8007678 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007460:	2b00      	cmp	r3, #0
 8007462:	d004      	beq.n	800746e <HAL_I2C_Mem_Write+0x42>
 8007464:	232c      	movs	r3, #44	; 0x2c
 8007466:	18fb      	adds	r3, r7, r3
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d105      	bne.n	800747a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2280      	movs	r2, #128	; 0x80
 8007472:	0092      	lsls	r2, r2, #2
 8007474:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e0ff      	b.n	800767a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2240      	movs	r2, #64	; 0x40
 800747e:	5c9b      	ldrb	r3, [r3, r2]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_I2C_Mem_Write+0x5c>
 8007484:	2302      	movs	r3, #2
 8007486:	e0f8      	b.n	800767a <HAL_I2C_Mem_Write+0x24e>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2240      	movs	r2, #64	; 0x40
 800748c:	2101      	movs	r1, #1
 800748e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007490:	f7ff f926 	bl	80066e0 <HAL_GetTick>
 8007494:	0003      	movs	r3, r0
 8007496:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007498:	2380      	movs	r3, #128	; 0x80
 800749a:	0219      	lsls	r1, r3, #8
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	2319      	movs	r3, #25
 80074a4:	2201      	movs	r2, #1
 80074a6:	f000 fb0b 	bl	8007ac0 <I2C_WaitOnFlagUntilTimeout>
 80074aa:	1e03      	subs	r3, r0, #0
 80074ac:	d001      	beq.n	80074b2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e0e3      	b.n	800767a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2241      	movs	r2, #65	; 0x41
 80074b6:	2121      	movs	r1, #33	; 0x21
 80074b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2242      	movs	r2, #66	; 0x42
 80074be:	2140      	movs	r1, #64	; 0x40
 80074c0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	222c      	movs	r2, #44	; 0x2c
 80074d2:	18ba      	adds	r2, r7, r2
 80074d4:	8812      	ldrh	r2, [r2, #0]
 80074d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074de:	1dbb      	adds	r3, r7, #6
 80074e0:	881c      	ldrh	r4, [r3, #0]
 80074e2:	2308      	movs	r3, #8
 80074e4:	18fb      	adds	r3, r7, r3
 80074e6:	881a      	ldrh	r2, [r3, #0]
 80074e8:	230a      	movs	r3, #10
 80074ea:	18fb      	adds	r3, r7, r3
 80074ec:	8819      	ldrh	r1, [r3, #0]
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	9301      	str	r3, [sp, #4]
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	0023      	movs	r3, r4
 80074fa:	f000 f9f9 	bl	80078f0 <I2C_RequestMemoryWrite>
 80074fe:	1e03      	subs	r3, r0, #0
 8007500:	d005      	beq.n	800750e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2240      	movs	r2, #64	; 0x40
 8007506:	2100      	movs	r1, #0
 8007508:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e0b5      	b.n	800767a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007512:	b29b      	uxth	r3, r3
 8007514:	2bff      	cmp	r3, #255	; 0xff
 8007516:	d911      	bls.n	800753c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	22ff      	movs	r2, #255	; 0xff
 800751c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007522:	b2da      	uxtb	r2, r3
 8007524:	2380      	movs	r3, #128	; 0x80
 8007526:	045c      	lsls	r4, r3, #17
 8007528:	230a      	movs	r3, #10
 800752a:	18fb      	adds	r3, r7, r3
 800752c:	8819      	ldrh	r1, [r3, #0]
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	2300      	movs	r3, #0
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	0023      	movs	r3, r4
 8007536:	f000 fbe3 	bl	8007d00 <I2C_TransferConfig>
 800753a:	e012      	b.n	8007562 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007540:	b29a      	uxth	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800754a:	b2da      	uxtb	r2, r3
 800754c:	2380      	movs	r3, #128	; 0x80
 800754e:	049c      	lsls	r4, r3, #18
 8007550:	230a      	movs	r3, #10
 8007552:	18fb      	adds	r3, r7, r3
 8007554:	8819      	ldrh	r1, [r3, #0]
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	2300      	movs	r3, #0
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	0023      	movs	r3, r4
 800755e:	f000 fbcf 	bl	8007d00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	0018      	movs	r0, r3
 800756a:	f000 fae8 	bl	8007b3e <I2C_WaitOnTXISFlagUntilTimeout>
 800756e:	1e03      	subs	r3, r0, #0
 8007570:	d001      	beq.n	8007576 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e081      	b.n	800767a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	781a      	ldrb	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759e:	3b01      	subs	r3, #1
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d03a      	beq.n	8007626 <HAL_I2C_Mem_Write+0x1fa>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d136      	bne.n	8007626 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	0013      	movs	r3, r2
 80075c2:	2200      	movs	r2, #0
 80075c4:	2180      	movs	r1, #128	; 0x80
 80075c6:	f000 fa7b 	bl	8007ac0 <I2C_WaitOnFlagUntilTimeout>
 80075ca:	1e03      	subs	r3, r0, #0
 80075cc:	d001      	beq.n	80075d2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e053      	b.n	800767a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2bff      	cmp	r3, #255	; 0xff
 80075da:	d911      	bls.n	8007600 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	22ff      	movs	r2, #255	; 0xff
 80075e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	2380      	movs	r3, #128	; 0x80
 80075ea:	045c      	lsls	r4, r3, #17
 80075ec:	230a      	movs	r3, #10
 80075ee:	18fb      	adds	r3, r7, r3
 80075f0:	8819      	ldrh	r1, [r3, #0]
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	2300      	movs	r3, #0
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	0023      	movs	r3, r4
 80075fa:	f000 fb81 	bl	8007d00 <I2C_TransferConfig>
 80075fe:	e012      	b.n	8007626 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800760e:	b2da      	uxtb	r2, r3
 8007610:	2380      	movs	r3, #128	; 0x80
 8007612:	049c      	lsls	r4, r3, #18
 8007614:	230a      	movs	r3, #10
 8007616:	18fb      	adds	r3, r7, r3
 8007618:	8819      	ldrh	r1, [r3, #0]
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	2300      	movs	r3, #0
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	0023      	movs	r3, r4
 8007622:	f000 fb6d 	bl	8007d00 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762a:	b29b      	uxth	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d198      	bne.n	8007562 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	0018      	movs	r0, r3
 8007638:	f000 fac0 	bl	8007bbc <I2C_WaitOnSTOPFlagUntilTimeout>
 800763c:	1e03      	subs	r3, r0, #0
 800763e:	d001      	beq.n	8007644 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e01a      	b.n	800767a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2220      	movs	r2, #32
 800764a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	490b      	ldr	r1, [pc, #44]	; (8007684 <HAL_I2C_Mem_Write+0x258>)
 8007658:	400a      	ands	r2, r1
 800765a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2241      	movs	r2, #65	; 0x41
 8007660:	2120      	movs	r1, #32
 8007662:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2242      	movs	r2, #66	; 0x42
 8007668:	2100      	movs	r1, #0
 800766a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2240      	movs	r2, #64	; 0x40
 8007670:	2100      	movs	r1, #0
 8007672:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	e000      	b.n	800767a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8007678:	2302      	movs	r3, #2
  }
}
 800767a:	0018      	movs	r0, r3
 800767c:	46bd      	mov	sp, r7
 800767e:	b007      	add	sp, #28
 8007680:	bd90      	pop	{r4, r7, pc}
 8007682:	46c0      	nop			; (mov r8, r8)
 8007684:	fe00e800 	.word	0xfe00e800

08007688 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007688:	b590      	push	{r4, r7, lr}
 800768a:	b089      	sub	sp, #36	; 0x24
 800768c:	af02      	add	r7, sp, #8
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	000c      	movs	r4, r1
 8007692:	0010      	movs	r0, r2
 8007694:	0019      	movs	r1, r3
 8007696:	230a      	movs	r3, #10
 8007698:	18fb      	adds	r3, r7, r3
 800769a:	1c22      	adds	r2, r4, #0
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	2308      	movs	r3, #8
 80076a0:	18fb      	adds	r3, r7, r3
 80076a2:	1c02      	adds	r2, r0, #0
 80076a4:	801a      	strh	r2, [r3, #0]
 80076a6:	1dbb      	adds	r3, r7, #6
 80076a8:	1c0a      	adds	r2, r1, #0
 80076aa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2241      	movs	r2, #65	; 0x41
 80076b0:	5c9b      	ldrb	r3, [r3, r2]
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d000      	beq.n	80076ba <HAL_I2C_Mem_Read+0x32>
 80076b8:	e110      	b.n	80078dc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d004      	beq.n	80076ca <HAL_I2C_Mem_Read+0x42>
 80076c0:	232c      	movs	r3, #44	; 0x2c
 80076c2:	18fb      	adds	r3, r7, r3
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d105      	bne.n	80076d6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2280      	movs	r2, #128	; 0x80
 80076ce:	0092      	lsls	r2, r2, #2
 80076d0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e103      	b.n	80078de <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2240      	movs	r2, #64	; 0x40
 80076da:	5c9b      	ldrb	r3, [r3, r2]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d101      	bne.n	80076e4 <HAL_I2C_Mem_Read+0x5c>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e0fc      	b.n	80078de <HAL_I2C_Mem_Read+0x256>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2240      	movs	r2, #64	; 0x40
 80076e8:	2101      	movs	r1, #1
 80076ea:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076ec:	f7fe fff8 	bl	80066e0 <HAL_GetTick>
 80076f0:	0003      	movs	r3, r0
 80076f2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076f4:	2380      	movs	r3, #128	; 0x80
 80076f6:	0219      	lsls	r1, r3, #8
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	2319      	movs	r3, #25
 8007700:	2201      	movs	r2, #1
 8007702:	f000 f9dd 	bl	8007ac0 <I2C_WaitOnFlagUntilTimeout>
 8007706:	1e03      	subs	r3, r0, #0
 8007708:	d001      	beq.n	800770e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e0e7      	b.n	80078de <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2241      	movs	r2, #65	; 0x41
 8007712:	2122      	movs	r1, #34	; 0x22
 8007714:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2242      	movs	r2, #66	; 0x42
 800771a:	2140      	movs	r1, #64	; 0x40
 800771c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007728:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	222c      	movs	r2, #44	; 0x2c
 800772e:	18ba      	adds	r2, r7, r2
 8007730:	8812      	ldrh	r2, [r2, #0]
 8007732:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800773a:	1dbb      	adds	r3, r7, #6
 800773c:	881c      	ldrh	r4, [r3, #0]
 800773e:	2308      	movs	r3, #8
 8007740:	18fb      	adds	r3, r7, r3
 8007742:	881a      	ldrh	r2, [r3, #0]
 8007744:	230a      	movs	r3, #10
 8007746:	18fb      	adds	r3, r7, r3
 8007748:	8819      	ldrh	r1, [r3, #0]
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	9301      	str	r3, [sp, #4]
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	0023      	movs	r3, r4
 8007756:	f000 f92f 	bl	80079b8 <I2C_RequestMemoryRead>
 800775a:	1e03      	subs	r3, r0, #0
 800775c:	d005      	beq.n	800776a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2240      	movs	r2, #64	; 0x40
 8007762:	2100      	movs	r1, #0
 8007764:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e0b9      	b.n	80078de <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776e:	b29b      	uxth	r3, r3
 8007770:	2bff      	cmp	r3, #255	; 0xff
 8007772:	d911      	bls.n	8007798 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	22ff      	movs	r2, #255	; 0xff
 8007778:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777e:	b2da      	uxtb	r2, r3
 8007780:	2380      	movs	r3, #128	; 0x80
 8007782:	045c      	lsls	r4, r3, #17
 8007784:	230a      	movs	r3, #10
 8007786:	18fb      	adds	r3, r7, r3
 8007788:	8819      	ldrh	r1, [r3, #0]
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	4b56      	ldr	r3, [pc, #344]	; (80078e8 <HAL_I2C_Mem_Read+0x260>)
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	0023      	movs	r3, r4
 8007792:	f000 fab5 	bl	8007d00 <I2C_TransferConfig>
 8007796:	e012      	b.n	80077be <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779c:	b29a      	uxth	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	2380      	movs	r3, #128	; 0x80
 80077aa:	049c      	lsls	r4, r3, #18
 80077ac:	230a      	movs	r3, #10
 80077ae:	18fb      	adds	r3, r7, r3
 80077b0:	8819      	ldrh	r1, [r3, #0]
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	4b4c      	ldr	r3, [pc, #304]	; (80078e8 <HAL_I2C_Mem_Read+0x260>)
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	0023      	movs	r3, r4
 80077ba:	f000 faa1 	bl	8007d00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80077be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	0013      	movs	r3, r2
 80077c8:	2200      	movs	r2, #0
 80077ca:	2104      	movs	r1, #4
 80077cc:	f000 f978 	bl	8007ac0 <I2C_WaitOnFlagUntilTimeout>
 80077d0:	1e03      	subs	r3, r0, #0
 80077d2:	d001      	beq.n	80077d8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e082      	b.n	80078de <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	b2d2      	uxtb	r2, r2
 80077e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f4:	3b01      	subs	r3, #1
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007800:	b29b      	uxth	r3, r3
 8007802:	3b01      	subs	r3, #1
 8007804:	b29a      	uxth	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780e:	b29b      	uxth	r3, r3
 8007810:	2b00      	cmp	r3, #0
 8007812:	d03a      	beq.n	800788a <HAL_I2C_Mem_Read+0x202>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007818:	2b00      	cmp	r3, #0
 800781a:	d136      	bne.n	800788a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800781c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	0013      	movs	r3, r2
 8007826:	2200      	movs	r2, #0
 8007828:	2180      	movs	r1, #128	; 0x80
 800782a:	f000 f949 	bl	8007ac0 <I2C_WaitOnFlagUntilTimeout>
 800782e:	1e03      	subs	r3, r0, #0
 8007830:	d001      	beq.n	8007836 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e053      	b.n	80078de <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800783a:	b29b      	uxth	r3, r3
 800783c:	2bff      	cmp	r3, #255	; 0xff
 800783e:	d911      	bls.n	8007864 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	22ff      	movs	r2, #255	; 0xff
 8007844:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800784a:	b2da      	uxtb	r2, r3
 800784c:	2380      	movs	r3, #128	; 0x80
 800784e:	045c      	lsls	r4, r3, #17
 8007850:	230a      	movs	r3, #10
 8007852:	18fb      	adds	r3, r7, r3
 8007854:	8819      	ldrh	r1, [r3, #0]
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	2300      	movs	r3, #0
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	0023      	movs	r3, r4
 800785e:	f000 fa4f 	bl	8007d00 <I2C_TransferConfig>
 8007862:	e012      	b.n	800788a <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007868:	b29a      	uxth	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007872:	b2da      	uxtb	r2, r3
 8007874:	2380      	movs	r3, #128	; 0x80
 8007876:	049c      	lsls	r4, r3, #18
 8007878:	230a      	movs	r3, #10
 800787a:	18fb      	adds	r3, r7, r3
 800787c:	8819      	ldrh	r1, [r3, #0]
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	2300      	movs	r3, #0
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	0023      	movs	r3, r4
 8007886:	f000 fa3b 	bl	8007d00 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788e:	b29b      	uxth	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d194      	bne.n	80077be <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	0018      	movs	r0, r3
 800789c:	f000 f98e 	bl	8007bbc <I2C_WaitOnSTOPFlagUntilTimeout>
 80078a0:	1e03      	subs	r3, r0, #0
 80078a2:	d001      	beq.n	80078a8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e01a      	b.n	80078de <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2220      	movs	r2, #32
 80078ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	490c      	ldr	r1, [pc, #48]	; (80078ec <HAL_I2C_Mem_Read+0x264>)
 80078bc:	400a      	ands	r2, r1
 80078be:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2241      	movs	r2, #65	; 0x41
 80078c4:	2120      	movs	r1, #32
 80078c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2242      	movs	r2, #66	; 0x42
 80078cc:	2100      	movs	r1, #0
 80078ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2240      	movs	r2, #64	; 0x40
 80078d4:	2100      	movs	r1, #0
 80078d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	e000      	b.n	80078de <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80078dc:	2302      	movs	r3, #2
  }
}
 80078de:	0018      	movs	r0, r3
 80078e0:	46bd      	mov	sp, r7
 80078e2:	b007      	add	sp, #28
 80078e4:	bd90      	pop	{r4, r7, pc}
 80078e6:	46c0      	nop			; (mov r8, r8)
 80078e8:	80002400 	.word	0x80002400
 80078ec:	fe00e800 	.word	0xfe00e800

080078f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80078f0:	b5b0      	push	{r4, r5, r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	000c      	movs	r4, r1
 80078fa:	0010      	movs	r0, r2
 80078fc:	0019      	movs	r1, r3
 80078fe:	250a      	movs	r5, #10
 8007900:	197b      	adds	r3, r7, r5
 8007902:	1c22      	adds	r2, r4, #0
 8007904:	801a      	strh	r2, [r3, #0]
 8007906:	2308      	movs	r3, #8
 8007908:	18fb      	adds	r3, r7, r3
 800790a:	1c02      	adds	r2, r0, #0
 800790c:	801a      	strh	r2, [r3, #0]
 800790e:	1dbb      	adds	r3, r7, #6
 8007910:	1c0a      	adds	r2, r1, #0
 8007912:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007914:	1dbb      	adds	r3, r7, #6
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	b2da      	uxtb	r2, r3
 800791a:	2380      	movs	r3, #128	; 0x80
 800791c:	045c      	lsls	r4, r3, #17
 800791e:	197b      	adds	r3, r7, r5
 8007920:	8819      	ldrh	r1, [r3, #0]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	4b23      	ldr	r3, [pc, #140]	; (80079b4 <I2C_RequestMemoryWrite+0xc4>)
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	0023      	movs	r3, r4
 800792a:	f000 f9e9 	bl	8007d00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800792e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007930:	6a39      	ldr	r1, [r7, #32]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	0018      	movs	r0, r3
 8007936:	f000 f902 	bl	8007b3e <I2C_WaitOnTXISFlagUntilTimeout>
 800793a:	1e03      	subs	r3, r0, #0
 800793c:	d001      	beq.n	8007942 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e033      	b.n	80079aa <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007942:	1dbb      	adds	r3, r7, #6
 8007944:	881b      	ldrh	r3, [r3, #0]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d107      	bne.n	800795a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800794a:	2308      	movs	r3, #8
 800794c:	18fb      	adds	r3, r7, r3
 800794e:	881b      	ldrh	r3, [r3, #0]
 8007950:	b2da      	uxtb	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	629a      	str	r2, [r3, #40]	; 0x28
 8007958:	e019      	b.n	800798e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800795a:	2308      	movs	r3, #8
 800795c:	18fb      	adds	r3, r7, r3
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	0a1b      	lsrs	r3, r3, #8
 8007962:	b29b      	uxth	r3, r3
 8007964:	b2da      	uxtb	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800796c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800796e:	6a39      	ldr	r1, [r7, #32]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	0018      	movs	r0, r3
 8007974:	f000 f8e3 	bl	8007b3e <I2C_WaitOnTXISFlagUntilTimeout>
 8007978:	1e03      	subs	r3, r0, #0
 800797a:	d001      	beq.n	8007980 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e014      	b.n	80079aa <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007980:	2308      	movs	r3, #8
 8007982:	18fb      	adds	r3, r7, r3
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	b2da      	uxtb	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800798e:	6a3a      	ldr	r2, [r7, #32]
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	0013      	movs	r3, r2
 8007998:	2200      	movs	r2, #0
 800799a:	2180      	movs	r1, #128	; 0x80
 800799c:	f000 f890 	bl	8007ac0 <I2C_WaitOnFlagUntilTimeout>
 80079a0:	1e03      	subs	r3, r0, #0
 80079a2:	d001      	beq.n	80079a8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e000      	b.n	80079aa <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	0018      	movs	r0, r3
 80079ac:	46bd      	mov	sp, r7
 80079ae:	b004      	add	sp, #16
 80079b0:	bdb0      	pop	{r4, r5, r7, pc}
 80079b2:	46c0      	nop			; (mov r8, r8)
 80079b4:	80002000 	.word	0x80002000

080079b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80079b8:	b5b0      	push	{r4, r5, r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af02      	add	r7, sp, #8
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	000c      	movs	r4, r1
 80079c2:	0010      	movs	r0, r2
 80079c4:	0019      	movs	r1, r3
 80079c6:	250a      	movs	r5, #10
 80079c8:	197b      	adds	r3, r7, r5
 80079ca:	1c22      	adds	r2, r4, #0
 80079cc:	801a      	strh	r2, [r3, #0]
 80079ce:	2308      	movs	r3, #8
 80079d0:	18fb      	adds	r3, r7, r3
 80079d2:	1c02      	adds	r2, r0, #0
 80079d4:	801a      	strh	r2, [r3, #0]
 80079d6:	1dbb      	adds	r3, r7, #6
 80079d8:	1c0a      	adds	r2, r1, #0
 80079da:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80079dc:	1dbb      	adds	r3, r7, #6
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	197b      	adds	r3, r7, r5
 80079e4:	8819      	ldrh	r1, [r3, #0]
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	4b23      	ldr	r3, [pc, #140]	; (8007a78 <I2C_RequestMemoryRead+0xc0>)
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	2300      	movs	r3, #0
 80079ee:	f000 f987 	bl	8007d00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f4:	6a39      	ldr	r1, [r7, #32]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	0018      	movs	r0, r3
 80079fa:	f000 f8a0 	bl	8007b3e <I2C_WaitOnTXISFlagUntilTimeout>
 80079fe:	1e03      	subs	r3, r0, #0
 8007a00:	d001      	beq.n	8007a06 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e033      	b.n	8007a6e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a06:	1dbb      	adds	r3, r7, #6
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d107      	bne.n	8007a1e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a0e:	2308      	movs	r3, #8
 8007a10:	18fb      	adds	r3, r7, r3
 8007a12:	881b      	ldrh	r3, [r3, #0]
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8007a1c:	e019      	b.n	8007a52 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a1e:	2308      	movs	r3, #8
 8007a20:	18fb      	adds	r3, r7, r3
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	0a1b      	lsrs	r3, r3, #8
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a32:	6a39      	ldr	r1, [r7, #32]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	0018      	movs	r0, r3
 8007a38:	f000 f881 	bl	8007b3e <I2C_WaitOnTXISFlagUntilTimeout>
 8007a3c:	1e03      	subs	r3, r0, #0
 8007a3e:	d001      	beq.n	8007a44 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e014      	b.n	8007a6e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a44:	2308      	movs	r3, #8
 8007a46:	18fb      	adds	r3, r7, r3
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007a52:	6a3a      	ldr	r2, [r7, #32]
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	0013      	movs	r3, r2
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2140      	movs	r1, #64	; 0x40
 8007a60:	f000 f82e 	bl	8007ac0 <I2C_WaitOnFlagUntilTimeout>
 8007a64:	1e03      	subs	r3, r0, #0
 8007a66:	d001      	beq.n	8007a6c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e000      	b.n	8007a6e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	0018      	movs	r0, r3
 8007a70:	46bd      	mov	sp, r7
 8007a72:	b004      	add	sp, #16
 8007a74:	bdb0      	pop	{r4, r5, r7, pc}
 8007a76:	46c0      	nop			; (mov r8, r8)
 8007a78:	80002000 	.word	0x80002000

08007a7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d103      	bne.n	8007a9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2200      	movs	r2, #0
 8007a98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d007      	beq.n	8007ab8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	699a      	ldr	r2, [r3, #24]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	619a      	str	r2, [r3, #24]
  }
}
 8007ab8:	46c0      	nop			; (mov r8, r8)
 8007aba:	46bd      	mov	sp, r7
 8007abc:	b002      	add	sp, #8
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	1dfb      	adds	r3, r7, #7
 8007ace:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ad0:	e021      	b.n	8007b16 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	d01e      	beq.n	8007b16 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ad8:	f7fe fe02 	bl	80066e0 <HAL_GetTick>
 8007adc:	0002      	movs	r2, r0
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d302      	bcc.n	8007aee <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d113      	bne.n	8007b16 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af2:	2220      	movs	r2, #32
 8007af4:	431a      	orrs	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2241      	movs	r2, #65	; 0x41
 8007afe:	2120      	movs	r1, #32
 8007b00:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2242      	movs	r2, #66	; 0x42
 8007b06:	2100      	movs	r1, #0
 8007b08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2240      	movs	r2, #64	; 0x40
 8007b0e:	2100      	movs	r1, #0
 8007b10:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e00f      	b.n	8007b36 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	425a      	negs	r2, r3
 8007b26:	4153      	adcs	r3, r2
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	001a      	movs	r2, r3
 8007b2c:	1dfb      	adds	r3, r7, #7
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d0ce      	beq.n	8007ad2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	0018      	movs	r0, r3
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	b004      	add	sp, #16
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	60b9      	str	r1, [r7, #8]
 8007b48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007b4a:	e02b      	b.n	8007ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	68b9      	ldr	r1, [r7, #8]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	0018      	movs	r0, r3
 8007b54:	f000 f86e 	bl	8007c34 <I2C_IsAcknowledgeFailed>
 8007b58:	1e03      	subs	r3, r0, #0
 8007b5a:	d001      	beq.n	8007b60 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e029      	b.n	8007bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	3301      	adds	r3, #1
 8007b64:	d01e      	beq.n	8007ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b66:	f7fe fdbb 	bl	80066e0 <HAL_GetTick>
 8007b6a:	0002      	movs	r2, r0
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d302      	bcc.n	8007b7c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d113      	bne.n	8007ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b80:	2220      	movs	r2, #32
 8007b82:	431a      	orrs	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2241      	movs	r2, #65	; 0x41
 8007b8c:	2120      	movs	r1, #32
 8007b8e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2242      	movs	r2, #66	; 0x42
 8007b94:	2100      	movs	r1, #0
 8007b96:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2240      	movs	r2, #64	; 0x40
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e007      	b.n	8007bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	2202      	movs	r2, #2
 8007bac:	4013      	ands	r3, r2
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d1cc      	bne.n	8007b4c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	0018      	movs	r0, r3
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	b004      	add	sp, #16
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007bc8:	e028      	b.n	8007c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	68b9      	ldr	r1, [r7, #8]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f000 f82f 	bl	8007c34 <I2C_IsAcknowledgeFailed>
 8007bd6:	1e03      	subs	r3, r0, #0
 8007bd8:	d001      	beq.n	8007bde <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e026      	b.n	8007c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bde:	f7fe fd7f 	bl	80066e0 <HAL_GetTick>
 8007be2:	0002      	movs	r2, r0
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d302      	bcc.n	8007bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d113      	bne.n	8007c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2241      	movs	r2, #65	; 0x41
 8007c04:	2120      	movs	r1, #32
 8007c06:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2242      	movs	r2, #66	; 0x42
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2240      	movs	r2, #64	; 0x40
 8007c14:	2100      	movs	r1, #0
 8007c16:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e007      	b.n	8007c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	2220      	movs	r2, #32
 8007c24:	4013      	ands	r3, r2
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	d1cf      	bne.n	8007bca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	0018      	movs	r0, r3
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	b004      	add	sp, #16
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	2210      	movs	r2, #16
 8007c48:	4013      	ands	r3, r2
 8007c4a:	2b10      	cmp	r3, #16
 8007c4c:	d151      	bne.n	8007cf2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c4e:	e021      	b.n	8007c94 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	3301      	adds	r3, #1
 8007c54:	d01e      	beq.n	8007c94 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c56:	f7fe fd43 	bl	80066e0 <HAL_GetTick>
 8007c5a:	0002      	movs	r2, r0
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d302      	bcc.n	8007c6c <I2C_IsAcknowledgeFailed+0x38>
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d113      	bne.n	8007c94 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c70:	2220      	movs	r2, #32
 8007c72:	431a      	orrs	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2241      	movs	r2, #65	; 0x41
 8007c7c:	2120      	movs	r1, #32
 8007c7e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2242      	movs	r2, #66	; 0x42
 8007c84:	2100      	movs	r1, #0
 8007c86:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2240      	movs	r2, #64	; 0x40
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e02f      	b.n	8007cf4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	2b20      	cmp	r3, #32
 8007ca0:	d1d6      	bne.n	8007c50 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2210      	movs	r2, #16
 8007ca8:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	f7ff fee1 	bl	8007a7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685a      	ldr	r2, [r3, #4]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	490d      	ldr	r1, [pc, #52]	; (8007cfc <I2C_IsAcknowledgeFailed+0xc8>)
 8007cc6:	400a      	ands	r2, r1
 8007cc8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cce:	2204      	movs	r2, #4
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2241      	movs	r2, #65	; 0x41
 8007cda:	2120      	movs	r1, #32
 8007cdc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2242      	movs	r2, #66	; 0x42
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2240      	movs	r2, #64	; 0x40
 8007cea:	2100      	movs	r1, #0
 8007cec:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e000      	b.n	8007cf4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	0018      	movs	r0, r3
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	b004      	add	sp, #16
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	fe00e800 	.word	0xfe00e800

08007d00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007d00:	b590      	push	{r4, r7, lr}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	0008      	movs	r0, r1
 8007d0a:	0011      	movs	r1, r2
 8007d0c:	607b      	str	r3, [r7, #4]
 8007d0e:	240a      	movs	r4, #10
 8007d10:	193b      	adds	r3, r7, r4
 8007d12:	1c02      	adds	r2, r0, #0
 8007d14:	801a      	strh	r2, [r3, #0]
 8007d16:	2009      	movs	r0, #9
 8007d18:	183b      	adds	r3, r7, r0
 8007d1a:	1c0a      	adds	r2, r1, #0
 8007d1c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	6a3a      	ldr	r2, [r7, #32]
 8007d26:	0d51      	lsrs	r1, r2, #21
 8007d28:	2280      	movs	r2, #128	; 0x80
 8007d2a:	00d2      	lsls	r2, r2, #3
 8007d2c:	400a      	ands	r2, r1
 8007d2e:	490e      	ldr	r1, [pc, #56]	; (8007d68 <I2C_TransferConfig+0x68>)
 8007d30:	430a      	orrs	r2, r1
 8007d32:	43d2      	mvns	r2, r2
 8007d34:	401a      	ands	r2, r3
 8007d36:	0011      	movs	r1, r2
 8007d38:	193b      	adds	r3, r7, r4
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	059b      	lsls	r3, r3, #22
 8007d3e:	0d9a      	lsrs	r2, r3, #22
 8007d40:	183b      	adds	r3, r7, r0
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	0418      	lsls	r0, r3, #16
 8007d46:	23ff      	movs	r3, #255	; 0xff
 8007d48:	041b      	lsls	r3, r3, #16
 8007d4a:	4003      	ands	r3, r0
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	431a      	orrs	r2, r3
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	431a      	orrs	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007d5e:	46c0      	nop			; (mov r8, r8)
 8007d60:	46bd      	mov	sp, r7
 8007d62:	b005      	add	sp, #20
 8007d64:	bd90      	pop	{r4, r7, pc}
 8007d66:	46c0      	nop			; (mov r8, r8)
 8007d68:	03ff63ff 	.word	0x03ff63ff

08007d6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2241      	movs	r2, #65	; 0x41
 8007d7a:	5c9b      	ldrb	r3, [r3, r2]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	d138      	bne.n	8007df4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2240      	movs	r2, #64	; 0x40
 8007d86:	5c9b      	ldrb	r3, [r3, r2]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d101      	bne.n	8007d90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	e032      	b.n	8007df6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2240      	movs	r2, #64	; 0x40
 8007d94:	2101      	movs	r1, #1
 8007d96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2241      	movs	r2, #65	; 0x41
 8007d9c:	2124      	movs	r1, #36	; 0x24
 8007d9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2101      	movs	r1, #1
 8007dac:	438a      	bics	r2, r1
 8007dae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4911      	ldr	r1, [pc, #68]	; (8007e00 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007dbc:	400a      	ands	r2, r1
 8007dbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6819      	ldr	r1, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2101      	movs	r1, #1
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2241      	movs	r2, #65	; 0x41
 8007de4:	2120      	movs	r1, #32
 8007de6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2240      	movs	r2, #64	; 0x40
 8007dec:	2100      	movs	r1, #0
 8007dee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	e000      	b.n	8007df6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007df4:	2302      	movs	r3, #2
  }
}
 8007df6:	0018      	movs	r0, r3
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	b002      	add	sp, #8
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	46c0      	nop			; (mov r8, r8)
 8007e00:	ffffefff 	.word	0xffffefff

08007e04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2241      	movs	r2, #65	; 0x41
 8007e12:	5c9b      	ldrb	r3, [r3, r2]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b20      	cmp	r3, #32
 8007e18:	d139      	bne.n	8007e8e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2240      	movs	r2, #64	; 0x40
 8007e1e:	5c9b      	ldrb	r3, [r3, r2]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d101      	bne.n	8007e28 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007e24:	2302      	movs	r3, #2
 8007e26:	e033      	b.n	8007e90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2240      	movs	r2, #64	; 0x40
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2241      	movs	r2, #65	; 0x41
 8007e34:	2124      	movs	r1, #36	; 0x24
 8007e36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2101      	movs	r1, #1
 8007e44:	438a      	bics	r2, r1
 8007e46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4a11      	ldr	r2, [pc, #68]	; (8007e98 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	021b      	lsls	r3, r3, #8
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2101      	movs	r1, #1
 8007e76:	430a      	orrs	r2, r1
 8007e78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2241      	movs	r2, #65	; 0x41
 8007e7e:	2120      	movs	r1, #32
 8007e80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2240      	movs	r2, #64	; 0x40
 8007e86:	2100      	movs	r1, #0
 8007e88:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	e000      	b.n	8007e90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007e8e:	2302      	movs	r3, #2
  }
}
 8007e90:	0018      	movs	r0, r3
 8007e92:	46bd      	mov	sp, r7
 8007e94:	b004      	add	sp, #16
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	fffff0ff 	.word	0xfffff0ff

08007e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e9c:	b5b0      	push	{r4, r5, r7, lr}
 8007e9e:	b08a      	sub	sp, #40	; 0x28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d102      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f000 fb58 	bl	8008560 <HAL_RCC_OscConfig+0x6c4>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eb0:	4bcd      	ldr	r3, [pc, #820]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	220c      	movs	r2, #12
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007eba:	4bcb      	ldr	r3, [pc, #812]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	2380      	movs	r3, #128	; 0x80
 8007ec0:	025b      	lsls	r3, r3, #9
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	4013      	ands	r3, r2
 8007ece:	d100      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x36>
 8007ed0:	e07c      	b.n	8007fcc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d007      	beq.n	8007ee8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	2b0c      	cmp	r3, #12
 8007edc:	d111      	bne.n	8007f02 <HAL_RCC_OscConfig+0x66>
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	2380      	movs	r3, #128	; 0x80
 8007ee2:	025b      	lsls	r3, r3, #9
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d10c      	bne.n	8007f02 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ee8:	4bbf      	ldr	r3, [pc, #764]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	2380      	movs	r3, #128	; 0x80
 8007eee:	029b      	lsls	r3, r3, #10
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	d100      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x5a>
 8007ef4:	e069      	b.n	8007fca <HAL_RCC_OscConfig+0x12e>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d165      	bne.n	8007fca <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e32e      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	2380      	movs	r3, #128	; 0x80
 8007f08:	025b      	lsls	r3, r3, #9
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d107      	bne.n	8007f1e <HAL_RCC_OscConfig+0x82>
 8007f0e:	4bb6      	ldr	r3, [pc, #728]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4bb5      	ldr	r3, [pc, #724]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007f14:	2180      	movs	r1, #128	; 0x80
 8007f16:	0249      	lsls	r1, r1, #9
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	601a      	str	r2, [r3, #0]
 8007f1c:	e027      	b.n	8007f6e <HAL_RCC_OscConfig+0xd2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	23a0      	movs	r3, #160	; 0xa0
 8007f24:	02db      	lsls	r3, r3, #11
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d10e      	bne.n	8007f48 <HAL_RCC_OscConfig+0xac>
 8007f2a:	4baf      	ldr	r3, [pc, #700]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	4bae      	ldr	r3, [pc, #696]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007f30:	2180      	movs	r1, #128	; 0x80
 8007f32:	02c9      	lsls	r1, r1, #11
 8007f34:	430a      	orrs	r2, r1
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	4bab      	ldr	r3, [pc, #684]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	4baa      	ldr	r3, [pc, #680]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007f3e:	2180      	movs	r1, #128	; 0x80
 8007f40:	0249      	lsls	r1, r1, #9
 8007f42:	430a      	orrs	r2, r1
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	e012      	b.n	8007f6e <HAL_RCC_OscConfig+0xd2>
 8007f48:	4ba7      	ldr	r3, [pc, #668]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	4ba6      	ldr	r3, [pc, #664]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007f4e:	49a7      	ldr	r1, [pc, #668]	; (80081ec <HAL_RCC_OscConfig+0x350>)
 8007f50:	400a      	ands	r2, r1
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	4ba4      	ldr	r3, [pc, #656]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	2380      	movs	r3, #128	; 0x80
 8007f5a:	025b      	lsls	r3, r3, #9
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4ba1      	ldr	r3, [pc, #644]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	4ba0      	ldr	r3, [pc, #640]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007f68:	49a1      	ldr	r1, [pc, #644]	; (80081f0 <HAL_RCC_OscConfig+0x354>)
 8007f6a:	400a      	ands	r2, r1
 8007f6c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d014      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f76:	f7fe fbb3 	bl	80066e0 <HAL_GetTick>
 8007f7a:	0003      	movs	r3, r0
 8007f7c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f7e:	e008      	b.n	8007f92 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f80:	f7fe fbae 	bl	80066e0 <HAL_GetTick>
 8007f84:	0002      	movs	r2, r0
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b64      	cmp	r3, #100	; 0x64
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e2e6      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f92:	4b95      	ldr	r3, [pc, #596]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	2380      	movs	r3, #128	; 0x80
 8007f98:	029b      	lsls	r3, r3, #10
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	d0f0      	beq.n	8007f80 <HAL_RCC_OscConfig+0xe4>
 8007f9e:	e015      	b.n	8007fcc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fa0:	f7fe fb9e 	bl	80066e0 <HAL_GetTick>
 8007fa4:	0003      	movs	r3, r0
 8007fa6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007fa8:	e008      	b.n	8007fbc <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007faa:	f7fe fb99 	bl	80066e0 <HAL_GetTick>
 8007fae:	0002      	movs	r2, r0
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	2b64      	cmp	r3, #100	; 0x64
 8007fb6:	d901      	bls.n	8007fbc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e2d1      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007fbc:	4b8a      	ldr	r3, [pc, #552]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	2380      	movs	r3, #128	; 0x80
 8007fc2:	029b      	lsls	r3, r3, #10
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	d1f0      	bne.n	8007faa <HAL_RCC_OscConfig+0x10e>
 8007fc8:	e000      	b.n	8007fcc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	d100      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x13c>
 8007fd6:	e08a      	b.n	80080ee <HAL_RCC_OscConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d005      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	2b0c      	cmp	r3, #12
 8007fe8:	d13d      	bne.n	8008066 <HAL_RCC_OscConfig+0x1ca>
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d13a      	bne.n	8008066 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8007ff0:	4b7d      	ldr	r3, [pc, #500]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2204      	movs	r2, #4
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	d004      	beq.n	8008004 <HAL_RCC_OscConfig+0x168>
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e2ad      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008004:	4b78      	ldr	r3, [pc, #480]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	4a7a      	ldr	r2, [pc, #488]	; (80081f4 <HAL_RCC_OscConfig+0x358>)
 800800a:	4013      	ands	r3, r2
 800800c:	0019      	movs	r1, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	021a      	lsls	r2, r3, #8
 8008014:	4b74      	ldr	r3, [pc, #464]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8008016:	430a      	orrs	r2, r1
 8008018:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800801a:	4b73      	ldr	r3, [pc, #460]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2209      	movs	r2, #9
 8008020:	4393      	bics	r3, r2
 8008022:	0019      	movs	r1, r3
 8008024:	4b70      	ldr	r3, [pc, #448]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	430a      	orrs	r2, r1
 800802a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800802c:	f000 fbc8 	bl	80087c0 <HAL_RCC_GetSysClockFreq>
 8008030:	0001      	movs	r1, r0
 8008032:	4b6d      	ldr	r3, [pc, #436]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	091b      	lsrs	r3, r3, #4
 8008038:	220f      	movs	r2, #15
 800803a:	4013      	ands	r3, r2
 800803c:	4a6e      	ldr	r2, [pc, #440]	; (80081f8 <HAL_RCC_OscConfig+0x35c>)
 800803e:	5cd3      	ldrb	r3, [r2, r3]
 8008040:	000a      	movs	r2, r1
 8008042:	40da      	lsrs	r2, r3
 8008044:	4b6d      	ldr	r3, [pc, #436]	; (80081fc <HAL_RCC_OscConfig+0x360>)
 8008046:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8008048:	2513      	movs	r5, #19
 800804a:	197c      	adds	r4, r7, r5
 800804c:	2000      	movs	r0, #0
 800804e:	f7fe fb11 	bl	8006674 <HAL_InitTick>
 8008052:	0003      	movs	r3, r0
 8008054:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8008056:	197b      	adds	r3, r7, r5
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d047      	beq.n	80080ee <HAL_RCC_OscConfig+0x252>
      {
        return status;
 800805e:	2313      	movs	r3, #19
 8008060:	18fb      	adds	r3, r7, r3
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	e27c      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d027      	beq.n	80080bc <HAL_RCC_OscConfig+0x220>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800806c:	4b5e      	ldr	r3, [pc, #376]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2209      	movs	r2, #9
 8008072:	4393      	bics	r3, r2
 8008074:	0019      	movs	r1, r3
 8008076:	4b5c      	ldr	r3, [pc, #368]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	430a      	orrs	r2, r1
 800807c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800807e:	f7fe fb2f 	bl	80066e0 <HAL_GetTick>
 8008082:	0003      	movs	r3, r0
 8008084:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008086:	e008      	b.n	800809a <HAL_RCC_OscConfig+0x1fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008088:	f7fe fb2a 	bl	80066e0 <HAL_GetTick>
 800808c:	0002      	movs	r2, r0
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	2b02      	cmp	r3, #2
 8008094:	d901      	bls.n	800809a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e262      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800809a:	4b53      	ldr	r3, [pc, #332]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2204      	movs	r2, #4
 80080a0:	4013      	ands	r3, r2
 80080a2:	d0f1      	beq.n	8008088 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080a4:	4b50      	ldr	r3, [pc, #320]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	4a52      	ldr	r2, [pc, #328]	; (80081f4 <HAL_RCC_OscConfig+0x358>)
 80080aa:	4013      	ands	r3, r2
 80080ac:	0019      	movs	r1, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	021a      	lsls	r2, r3, #8
 80080b4:	4b4c      	ldr	r3, [pc, #304]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 80080b6:	430a      	orrs	r2, r1
 80080b8:	605a      	str	r2, [r3, #4]
 80080ba:	e018      	b.n	80080ee <HAL_RCC_OscConfig+0x252>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080bc:	4b4a      	ldr	r3, [pc, #296]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	4b49      	ldr	r3, [pc, #292]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 80080c2:	2101      	movs	r1, #1
 80080c4:	438a      	bics	r2, r1
 80080c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080c8:	f7fe fb0a 	bl	80066e0 <HAL_GetTick>
 80080cc:	0003      	movs	r3, r0
 80080ce:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080d0:	e008      	b.n	80080e4 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080d2:	f7fe fb05 	bl	80066e0 <HAL_GetTick>
 80080d6:	0002      	movs	r2, r0
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d901      	bls.n	80080e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e23d      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080e4:	4b40      	ldr	r3, [pc, #256]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2204      	movs	r2, #4
 80080ea:	4013      	ands	r3, r2
 80080ec:	d1f1      	bne.n	80080d2 <HAL_RCC_OscConfig+0x236>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2210      	movs	r2, #16
 80080f4:	4013      	ands	r3, r2
 80080f6:	d100      	bne.n	80080fa <HAL_RCC_OscConfig+0x25e>
 80080f8:	e09e      	b.n	8008238 <HAL_RCC_OscConfig+0x39c>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d13f      	bne.n	8008180 <HAL_RCC_OscConfig+0x2e4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008100:	4b39      	ldr	r3, [pc, #228]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	2380      	movs	r3, #128	; 0x80
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4013      	ands	r3, r2
 800810a:	d005      	beq.n	8008118 <HAL_RCC_OscConfig+0x27c>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_RCC_OscConfig+0x27c>
      {
        return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e223      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008118:	4b33      	ldr	r3, [pc, #204]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	4a38      	ldr	r2, [pc, #224]	; (8008200 <HAL_RCC_OscConfig+0x364>)
 800811e:	4013      	ands	r3, r2
 8008120:	0019      	movs	r1, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a1a      	ldr	r2, [r3, #32]
 8008126:	4b30      	ldr	r3, [pc, #192]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8008128:	430a      	orrs	r2, r1
 800812a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800812c:	4b2e      	ldr	r3, [pc, #184]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	021b      	lsls	r3, r3, #8
 8008132:	0a19      	lsrs	r1, r3, #8
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	061a      	lsls	r2, r3, #24
 800813a:	4b2b      	ldr	r3, [pc, #172]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 800813c:	430a      	orrs	r2, r1
 800813e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a1b      	ldr	r3, [r3, #32]
 8008144:	0b5b      	lsrs	r3, r3, #13
 8008146:	3301      	adds	r3, #1
 8008148:	2280      	movs	r2, #128	; 0x80
 800814a:	0212      	lsls	r2, r2, #8
 800814c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800814e:	4b26      	ldr	r3, [pc, #152]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	091b      	lsrs	r3, r3, #4
 8008154:	210f      	movs	r1, #15
 8008156:	400b      	ands	r3, r1
 8008158:	4927      	ldr	r1, [pc, #156]	; (80081f8 <HAL_RCC_OscConfig+0x35c>)
 800815a:	5ccb      	ldrb	r3, [r1, r3]
 800815c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800815e:	4b27      	ldr	r3, [pc, #156]	; (80081fc <HAL_RCC_OscConfig+0x360>)
 8008160:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8008162:	2513      	movs	r5, #19
 8008164:	197c      	adds	r4, r7, r5
 8008166:	2000      	movs	r0, #0
 8008168:	f7fe fa84 	bl	8006674 <HAL_InitTick>
 800816c:	0003      	movs	r3, r0
 800816e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8008170:	197b      	adds	r3, r7, r5
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d05f      	beq.n	8008238 <HAL_RCC_OscConfig+0x39c>
        {
          return status;
 8008178:	2313      	movs	r3, #19
 800817a:	18fb      	adds	r3, r7, r3
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	e1ef      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d03d      	beq.n	8008204 <HAL_RCC_OscConfig+0x368>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008188:	4b17      	ldr	r3, [pc, #92]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	4b16      	ldr	r3, [pc, #88]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 800818e:	2180      	movs	r1, #128	; 0x80
 8008190:	0049      	lsls	r1, r1, #1
 8008192:	430a      	orrs	r2, r1
 8008194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008196:	f7fe faa3 	bl	80066e0 <HAL_GetTick>
 800819a:	0003      	movs	r3, r0
 800819c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800819e:	e008      	b.n	80081b2 <HAL_RCC_OscConfig+0x316>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80081a0:	f7fe fa9e 	bl	80066e0 <HAL_GetTick>
 80081a4:	0002      	movs	r2, r0
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d901      	bls.n	80081b2 <HAL_RCC_OscConfig+0x316>
          {
            return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e1d6      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80081b2:	4b0d      	ldr	r3, [pc, #52]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	2380      	movs	r3, #128	; 0x80
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4013      	ands	r3, r2
 80081bc:	d0f0      	beq.n	80081a0 <HAL_RCC_OscConfig+0x304>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80081be:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	4a0f      	ldr	r2, [pc, #60]	; (8008200 <HAL_RCC_OscConfig+0x364>)
 80081c4:	4013      	ands	r3, r2
 80081c6:	0019      	movs	r1, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a1a      	ldr	r2, [r3, #32]
 80081cc:	4b06      	ldr	r3, [pc, #24]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 80081ce:	430a      	orrs	r2, r1
 80081d0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081d2:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	021b      	lsls	r3, r3, #8
 80081d8:	0a19      	lsrs	r1, r3, #8
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	061a      	lsls	r2, r3, #24
 80081e0:	4b01      	ldr	r3, [pc, #4]	; (80081e8 <HAL_RCC_OscConfig+0x34c>)
 80081e2:	430a      	orrs	r2, r1
 80081e4:	605a      	str	r2, [r3, #4]
 80081e6:	e027      	b.n	8008238 <HAL_RCC_OscConfig+0x39c>
 80081e8:	40021000 	.word	0x40021000
 80081ec:	fffeffff 	.word	0xfffeffff
 80081f0:	fffbffff 	.word	0xfffbffff
 80081f4:	ffffe0ff 	.word	0xffffe0ff
 80081f8:	0800d3d4 	.word	0x0800d3d4
 80081fc:	2000002c 	.word	0x2000002c
 8008200:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008204:	4bbf      	ldr	r3, [pc, #764]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	4bbe      	ldr	r3, [pc, #760]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 800820a:	49bf      	ldr	r1, [pc, #764]	; (8008508 <HAL_RCC_OscConfig+0x66c>)
 800820c:	400a      	ands	r2, r1
 800820e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008210:	f7fe fa66 	bl	80066e0 <HAL_GetTick>
 8008214:	0003      	movs	r3, r0
 8008216:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008218:	e008      	b.n	800822c <HAL_RCC_OscConfig+0x390>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800821a:	f7fe fa61 	bl	80066e0 <HAL_GetTick>
 800821e:	0002      	movs	r2, r0
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	2b02      	cmp	r3, #2
 8008226:	d901      	bls.n	800822c <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e199      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800822c:	4bb5      	ldr	r3, [pc, #724]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	2380      	movs	r3, #128	; 0x80
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4013      	ands	r3, r2
 8008236:	d1f0      	bne.n	800821a <HAL_RCC_OscConfig+0x37e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2208      	movs	r2, #8
 800823e:	4013      	ands	r3, r2
 8008240:	d036      	beq.n	80082b0 <HAL_RCC_OscConfig+0x414>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d019      	beq.n	800827e <HAL_RCC_OscConfig+0x3e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800824a:	4bae      	ldr	r3, [pc, #696]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 800824c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800824e:	4bad      	ldr	r3, [pc, #692]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008250:	2101      	movs	r1, #1
 8008252:	430a      	orrs	r2, r1
 8008254:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008256:	f7fe fa43 	bl	80066e0 <HAL_GetTick>
 800825a:	0003      	movs	r3, r0
 800825c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800825e:	e008      	b.n	8008272 <HAL_RCC_OscConfig+0x3d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008260:	f7fe fa3e 	bl	80066e0 <HAL_GetTick>
 8008264:	0002      	movs	r2, r0
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	2b02      	cmp	r3, #2
 800826c:	d901      	bls.n	8008272 <HAL_RCC_OscConfig+0x3d6>
        {
          return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e176      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008272:	4ba4      	ldr	r3, [pc, #656]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008276:	2202      	movs	r2, #2
 8008278:	4013      	ands	r3, r2
 800827a:	d0f1      	beq.n	8008260 <HAL_RCC_OscConfig+0x3c4>
 800827c:	e018      	b.n	80082b0 <HAL_RCC_OscConfig+0x414>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800827e:	4ba1      	ldr	r3, [pc, #644]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008282:	4ba0      	ldr	r3, [pc, #640]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008284:	2101      	movs	r1, #1
 8008286:	438a      	bics	r2, r1
 8008288:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800828a:	f7fe fa29 	bl	80066e0 <HAL_GetTick>
 800828e:	0003      	movs	r3, r0
 8008290:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008292:	e008      	b.n	80082a6 <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008294:	f7fe fa24 	bl	80066e0 <HAL_GetTick>
 8008298:	0002      	movs	r2, r0
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d901      	bls.n	80082a6 <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e15c      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082a6:	4b97      	ldr	r3, [pc, #604]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 80082a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082aa:	2202      	movs	r2, #2
 80082ac:	4013      	ands	r3, r2
 80082ae:	d1f1      	bne.n	8008294 <HAL_RCC_OscConfig+0x3f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2204      	movs	r2, #4
 80082b6:	4013      	ands	r3, r2
 80082b8:	d100      	bne.n	80082bc <HAL_RCC_OscConfig+0x420>
 80082ba:	e0af      	b.n	800841c <HAL_RCC_OscConfig+0x580>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082bc:	2327      	movs	r3, #39	; 0x27
 80082be:	18fb      	adds	r3, r7, r3
 80082c0:	2200      	movs	r2, #0
 80082c2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082c4:	4b8f      	ldr	r3, [pc, #572]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 80082c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082c8:	2380      	movs	r3, #128	; 0x80
 80082ca:	055b      	lsls	r3, r3, #21
 80082cc:	4013      	ands	r3, r2
 80082ce:	d10a      	bne.n	80082e6 <HAL_RCC_OscConfig+0x44a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082d0:	4b8c      	ldr	r3, [pc, #560]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 80082d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082d4:	4b8b      	ldr	r3, [pc, #556]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 80082d6:	2180      	movs	r1, #128	; 0x80
 80082d8:	0549      	lsls	r1, r1, #21
 80082da:	430a      	orrs	r2, r1
 80082dc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80082de:	2327      	movs	r3, #39	; 0x27
 80082e0:	18fb      	adds	r3, r7, r3
 80082e2:	2201      	movs	r2, #1
 80082e4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082e6:	4b89      	ldr	r3, [pc, #548]	; (800850c <HAL_RCC_OscConfig+0x670>)
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	2380      	movs	r3, #128	; 0x80
 80082ec:	005b      	lsls	r3, r3, #1
 80082ee:	4013      	ands	r3, r2
 80082f0:	d11a      	bne.n	8008328 <HAL_RCC_OscConfig+0x48c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082f2:	4b86      	ldr	r3, [pc, #536]	; (800850c <HAL_RCC_OscConfig+0x670>)
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	4b85      	ldr	r3, [pc, #532]	; (800850c <HAL_RCC_OscConfig+0x670>)
 80082f8:	2180      	movs	r1, #128	; 0x80
 80082fa:	0049      	lsls	r1, r1, #1
 80082fc:	430a      	orrs	r2, r1
 80082fe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008300:	f7fe f9ee 	bl	80066e0 <HAL_GetTick>
 8008304:	0003      	movs	r3, r0
 8008306:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008308:	e008      	b.n	800831c <HAL_RCC_OscConfig+0x480>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800830a:	f7fe f9e9 	bl	80066e0 <HAL_GetTick>
 800830e:	0002      	movs	r2, r0
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	2b64      	cmp	r3, #100	; 0x64
 8008316:	d901      	bls.n	800831c <HAL_RCC_OscConfig+0x480>
        {
          return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e121      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800831c:	4b7b      	ldr	r3, [pc, #492]	; (800850c <HAL_RCC_OscConfig+0x670>)
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	2380      	movs	r3, #128	; 0x80
 8008322:	005b      	lsls	r3, r3, #1
 8008324:	4013      	ands	r3, r2
 8008326:	d0f0      	beq.n	800830a <HAL_RCC_OscConfig+0x46e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	689a      	ldr	r2, [r3, #8]
 800832c:	2380      	movs	r3, #128	; 0x80
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	429a      	cmp	r2, r3
 8008332:	d107      	bne.n	8008344 <HAL_RCC_OscConfig+0x4a8>
 8008334:	4b73      	ldr	r3, [pc, #460]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008338:	4b72      	ldr	r3, [pc, #456]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 800833a:	2180      	movs	r1, #128	; 0x80
 800833c:	0049      	lsls	r1, r1, #1
 800833e:	430a      	orrs	r2, r1
 8008340:	651a      	str	r2, [r3, #80]	; 0x50
 8008342:	e031      	b.n	80083a8 <HAL_RCC_OscConfig+0x50c>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10c      	bne.n	8008366 <HAL_RCC_OscConfig+0x4ca>
 800834c:	4b6d      	ldr	r3, [pc, #436]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 800834e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008350:	4b6c      	ldr	r3, [pc, #432]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008352:	496d      	ldr	r1, [pc, #436]	; (8008508 <HAL_RCC_OscConfig+0x66c>)
 8008354:	400a      	ands	r2, r1
 8008356:	651a      	str	r2, [r3, #80]	; 0x50
 8008358:	4b6a      	ldr	r3, [pc, #424]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 800835a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800835c:	4b69      	ldr	r3, [pc, #420]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 800835e:	496c      	ldr	r1, [pc, #432]	; (8008510 <HAL_RCC_OscConfig+0x674>)
 8008360:	400a      	ands	r2, r1
 8008362:	651a      	str	r2, [r3, #80]	; 0x50
 8008364:	e020      	b.n	80083a8 <HAL_RCC_OscConfig+0x50c>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	689a      	ldr	r2, [r3, #8]
 800836a:	23a0      	movs	r3, #160	; 0xa0
 800836c:	00db      	lsls	r3, r3, #3
 800836e:	429a      	cmp	r2, r3
 8008370:	d10e      	bne.n	8008390 <HAL_RCC_OscConfig+0x4f4>
 8008372:	4b64      	ldr	r3, [pc, #400]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008376:	4b63      	ldr	r3, [pc, #396]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008378:	2180      	movs	r1, #128	; 0x80
 800837a:	00c9      	lsls	r1, r1, #3
 800837c:	430a      	orrs	r2, r1
 800837e:	651a      	str	r2, [r3, #80]	; 0x50
 8008380:	4b60      	ldr	r3, [pc, #384]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008384:	4b5f      	ldr	r3, [pc, #380]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008386:	2180      	movs	r1, #128	; 0x80
 8008388:	0049      	lsls	r1, r1, #1
 800838a:	430a      	orrs	r2, r1
 800838c:	651a      	str	r2, [r3, #80]	; 0x50
 800838e:	e00b      	b.n	80083a8 <HAL_RCC_OscConfig+0x50c>
 8008390:	4b5c      	ldr	r3, [pc, #368]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008392:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008394:	4b5b      	ldr	r3, [pc, #364]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008396:	495c      	ldr	r1, [pc, #368]	; (8008508 <HAL_RCC_OscConfig+0x66c>)
 8008398:	400a      	ands	r2, r1
 800839a:	651a      	str	r2, [r3, #80]	; 0x50
 800839c:	4b59      	ldr	r3, [pc, #356]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 800839e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083a0:	4b58      	ldr	r3, [pc, #352]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 80083a2:	495b      	ldr	r1, [pc, #364]	; (8008510 <HAL_RCC_OscConfig+0x674>)
 80083a4:	400a      	ands	r2, r1
 80083a6:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d015      	beq.n	80083dc <HAL_RCC_OscConfig+0x540>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083b0:	f7fe f996 	bl	80066e0 <HAL_GetTick>
 80083b4:	0003      	movs	r3, r0
 80083b6:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083b8:	e009      	b.n	80083ce <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083ba:	f7fe f991 	bl	80066e0 <HAL_GetTick>
 80083be:	0002      	movs	r2, r0
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	4a53      	ldr	r2, [pc, #332]	; (8008514 <HAL_RCC_OscConfig+0x678>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d901      	bls.n	80083ce <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e0c8      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083ce:	4b4d      	ldr	r3, [pc, #308]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 80083d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083d2:	2380      	movs	r3, #128	; 0x80
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4013      	ands	r3, r2
 80083d8:	d0ef      	beq.n	80083ba <HAL_RCC_OscConfig+0x51e>
 80083da:	e014      	b.n	8008406 <HAL_RCC_OscConfig+0x56a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083dc:	f7fe f980 	bl	80066e0 <HAL_GetTick>
 80083e0:	0003      	movs	r3, r0
 80083e2:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083e4:	e009      	b.n	80083fa <HAL_RCC_OscConfig+0x55e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083e6:	f7fe f97b 	bl	80066e0 <HAL_GetTick>
 80083ea:	0002      	movs	r2, r0
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	4a48      	ldr	r2, [pc, #288]	; (8008514 <HAL_RCC_OscConfig+0x678>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0x55e>
        {
          return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e0b2      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083fa:	4b42      	ldr	r3, [pc, #264]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 80083fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083fe:	2380      	movs	r3, #128	; 0x80
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4013      	ands	r3, r2
 8008404:	d1ef      	bne.n	80083e6 <HAL_RCC_OscConfig+0x54a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008406:	2327      	movs	r3, #39	; 0x27
 8008408:	18fb      	adds	r3, r7, r3
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d105      	bne.n	800841c <HAL_RCC_OscConfig+0x580>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008410:	4b3c      	ldr	r3, [pc, #240]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008414:	4b3b      	ldr	r3, [pc, #236]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008416:	4940      	ldr	r1, [pc, #256]	; (8008518 <HAL_RCC_OscConfig+0x67c>)
 8008418:	400a      	ands	r2, r1
 800841a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008420:	2b00      	cmp	r3, #0
 8008422:	d100      	bne.n	8008426 <HAL_RCC_OscConfig+0x58a>
 8008424:	e09b      	b.n	800855e <HAL_RCC_OscConfig+0x6c2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	2b0c      	cmp	r3, #12
 800842a:	d064      	beq.n	80084f6 <HAL_RCC_OscConfig+0x65a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008430:	2b02      	cmp	r3, #2
 8008432:	d145      	bne.n	80084c0 <HAL_RCC_OscConfig+0x624>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008434:	4b33      	ldr	r3, [pc, #204]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	4b32      	ldr	r3, [pc, #200]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 800843a:	4938      	ldr	r1, [pc, #224]	; (800851c <HAL_RCC_OscConfig+0x680>)
 800843c:	400a      	ands	r2, r1
 800843e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008440:	f7fe f94e 	bl	80066e0 <HAL_GetTick>
 8008444:	0003      	movs	r3, r0
 8008446:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008448:	e008      	b.n	800845c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800844a:	f7fe f949 	bl	80066e0 <HAL_GetTick>
 800844e:	0002      	movs	r2, r0
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	2b02      	cmp	r3, #2
 8008456:	d901      	bls.n	800845c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e081      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800845c:	4b29      	ldr	r3, [pc, #164]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	2380      	movs	r3, #128	; 0x80
 8008462:	049b      	lsls	r3, r3, #18
 8008464:	4013      	ands	r3, r2
 8008466:	d1f0      	bne.n	800844a <HAL_RCC_OscConfig+0x5ae>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008468:	4b26      	ldr	r3, [pc, #152]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	4a2c      	ldr	r2, [pc, #176]	; (8008520 <HAL_RCC_OscConfig+0x684>)
 800846e:	4013      	ands	r3, r2
 8008470:	0019      	movs	r1, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847a:	431a      	orrs	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008480:	431a      	orrs	r2, r3
 8008482:	4b20      	ldr	r3, [pc, #128]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 8008484:	430a      	orrs	r2, r1
 8008486:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008488:	4b1e      	ldr	r3, [pc, #120]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	4b1d      	ldr	r3, [pc, #116]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 800848e:	2180      	movs	r1, #128	; 0x80
 8008490:	0449      	lsls	r1, r1, #17
 8008492:	430a      	orrs	r2, r1
 8008494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008496:	f7fe f923 	bl	80066e0 <HAL_GetTick>
 800849a:	0003      	movs	r3, r0
 800849c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800849e:	e008      	b.n	80084b2 <HAL_RCC_OscConfig+0x616>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084a0:	f7fe f91e 	bl	80066e0 <HAL_GetTick>
 80084a4:	0002      	movs	r2, r0
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_OscConfig+0x616>
          {
            return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e056      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80084b2:	4b14      	ldr	r3, [pc, #80]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	2380      	movs	r3, #128	; 0x80
 80084b8:	049b      	lsls	r3, r3, #18
 80084ba:	4013      	ands	r3, r2
 80084bc:	d0f0      	beq.n	80084a0 <HAL_RCC_OscConfig+0x604>
 80084be:	e04e      	b.n	800855e <HAL_RCC_OscConfig+0x6c2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084c0:	4b10      	ldr	r3, [pc, #64]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	4b0f      	ldr	r3, [pc, #60]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 80084c6:	4915      	ldr	r1, [pc, #84]	; (800851c <HAL_RCC_OscConfig+0x680>)
 80084c8:	400a      	ands	r2, r1
 80084ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084cc:	f7fe f908 	bl	80066e0 <HAL_GetTick>
 80084d0:	0003      	movs	r3, r0
 80084d2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80084d4:	e008      	b.n	80084e8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084d6:	f7fe f903 	bl	80066e0 <HAL_GetTick>
 80084da:	0002      	movs	r2, r0
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d901      	bls.n	80084e8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e03b      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80084e8:	4b06      	ldr	r3, [pc, #24]	; (8008504 <HAL_RCC_OscConfig+0x668>)
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	2380      	movs	r3, #128	; 0x80
 80084ee:	049b      	lsls	r3, r3, #18
 80084f0:	4013      	ands	r3, r2
 80084f2:	d1f0      	bne.n	80084d6 <HAL_RCC_OscConfig+0x63a>
 80084f4:	e033      	b.n	800855e <HAL_RCC_OscConfig+0x6c2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d112      	bne.n	8008524 <HAL_RCC_OscConfig+0x688>
      {
        return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e02e      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
 8008502:	46c0      	nop			; (mov r8, r8)
 8008504:	40021000 	.word	0x40021000
 8008508:	fffffeff 	.word	0xfffffeff
 800850c:	40007000 	.word	0x40007000
 8008510:	fffffbff 	.word	0xfffffbff
 8008514:	00001388 	.word	0x00001388
 8008518:	efffffff 	.word	0xefffffff
 800851c:	feffffff 	.word	0xfeffffff
 8008520:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008524:	4b10      	ldr	r3, [pc, #64]	; (8008568 <HAL_RCC_OscConfig+0x6cc>)
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800852a:	69fa      	ldr	r2, [r7, #28]
 800852c:	2380      	movs	r3, #128	; 0x80
 800852e:	025b      	lsls	r3, r3, #9
 8008530:	401a      	ands	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008536:	429a      	cmp	r2, r3
 8008538:	d10f      	bne.n	800855a <HAL_RCC_OscConfig+0x6be>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800853a:	69fa      	ldr	r2, [r7, #28]
 800853c:	23f0      	movs	r3, #240	; 0xf0
 800853e:	039b      	lsls	r3, r3, #14
 8008540:	401a      	ands	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008546:	429a      	cmp	r2, r3
 8008548:	d107      	bne.n	800855a <HAL_RCC_OscConfig+0x6be>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800854a:	69fa      	ldr	r2, [r7, #28]
 800854c:	23c0      	movs	r3, #192	; 0xc0
 800854e:	041b      	lsls	r3, r3, #16
 8008550:	401a      	ands	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008556:	429a      	cmp	r2, r3
 8008558:	d001      	beq.n	800855e <HAL_RCC_OscConfig+0x6c2>
        {
          return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e000      	b.n	8008560 <HAL_RCC_OscConfig+0x6c4>
        }
      }
    }
  }

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	0018      	movs	r0, r3
 8008562:	46bd      	mov	sp, r7
 8008564:	b00a      	add	sp, #40	; 0x28
 8008566:	bdb0      	pop	{r4, r5, r7, pc}
 8008568:	40021000 	.word	0x40021000

0800856c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800856c:	b5b0      	push	{r4, r5, r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e10d      	b.n	800879c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008580:	4b88      	ldr	r3, [pc, #544]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2201      	movs	r2, #1
 8008586:	4013      	ands	r3, r2
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	429a      	cmp	r2, r3
 800858c:	d911      	bls.n	80085b2 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800858e:	4b85      	ldr	r3, [pc, #532]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2201      	movs	r2, #1
 8008594:	4393      	bics	r3, r2
 8008596:	0019      	movs	r1, r3
 8008598:	4b82      	ldr	r3, [pc, #520]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	430a      	orrs	r2, r1
 800859e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085a0:	4b80      	ldr	r3, [pc, #512]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2201      	movs	r2, #1
 80085a6:	4013      	ands	r3, r2
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d001      	beq.n	80085b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e0f4      	b.n	800879c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2202      	movs	r2, #2
 80085b8:	4013      	ands	r3, r2
 80085ba:	d009      	beq.n	80085d0 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085bc:	4b7a      	ldr	r3, [pc, #488]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	22f0      	movs	r2, #240	; 0xf0
 80085c2:	4393      	bics	r3, r2
 80085c4:	0019      	movs	r1, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	689a      	ldr	r2, [r3, #8]
 80085ca:	4b77      	ldr	r3, [pc, #476]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 80085cc:	430a      	orrs	r2, r1
 80085ce:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2201      	movs	r2, #1
 80085d6:	4013      	ands	r3, r2
 80085d8:	d100      	bne.n	80085dc <HAL_RCC_ClockConfig+0x70>
 80085da:	e089      	b.n	80086f0 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d107      	bne.n	80085f4 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085e4:	4b70      	ldr	r3, [pc, #448]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	2380      	movs	r3, #128	; 0x80
 80085ea:	029b      	lsls	r3, r3, #10
 80085ec:	4013      	ands	r3, r2
 80085ee:	d120      	bne.n	8008632 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e0d3      	b.n	800879c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d107      	bne.n	800860c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085fc:	4b6a      	ldr	r3, [pc, #424]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	2380      	movs	r3, #128	; 0x80
 8008602:	049b      	lsls	r3, r3, #18
 8008604:	4013      	ands	r3, r2
 8008606:	d114      	bne.n	8008632 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e0c7      	b.n	800879c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d106      	bne.n	8008622 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008614:	4b64      	ldr	r3, [pc, #400]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2204      	movs	r2, #4
 800861a:	4013      	ands	r3, r2
 800861c:	d109      	bne.n	8008632 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e0bc      	b.n	800879c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008622:	4b61      	ldr	r3, [pc, #388]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	2380      	movs	r3, #128	; 0x80
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4013      	ands	r3, r2
 800862c:	d101      	bne.n	8008632 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e0b4      	b.n	800879c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008632:	4b5d      	ldr	r3, [pc, #372]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	2203      	movs	r2, #3
 8008638:	4393      	bics	r3, r2
 800863a:	0019      	movs	r1, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	4b59      	ldr	r3, [pc, #356]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 8008642:	430a      	orrs	r2, r1
 8008644:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008646:	f7fe f84b 	bl	80066e0 <HAL_GetTick>
 800864a:	0003      	movs	r3, r0
 800864c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	2b02      	cmp	r3, #2
 8008654:	d111      	bne.n	800867a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008656:	e009      	b.n	800866c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008658:	f7fe f842 	bl	80066e0 <HAL_GetTick>
 800865c:	0002      	movs	r2, r0
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	4a52      	ldr	r2, [pc, #328]	; (80087ac <HAL_RCC_ClockConfig+0x240>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d901      	bls.n	800866c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e097      	b.n	800879c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800866c:	4b4e      	ldr	r3, [pc, #312]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	220c      	movs	r2, #12
 8008672:	4013      	ands	r3, r2
 8008674:	2b08      	cmp	r3, #8
 8008676:	d1ef      	bne.n	8008658 <HAL_RCC_ClockConfig+0xec>
 8008678:	e03a      	b.n	80086f0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	2b03      	cmp	r3, #3
 8008680:	d111      	bne.n	80086a6 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008682:	e009      	b.n	8008698 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008684:	f7fe f82c 	bl	80066e0 <HAL_GetTick>
 8008688:	0002      	movs	r2, r0
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	4a47      	ldr	r2, [pc, #284]	; (80087ac <HAL_RCC_ClockConfig+0x240>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d901      	bls.n	8008698 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e081      	b.n	800879c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008698:	4b43      	ldr	r3, [pc, #268]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	220c      	movs	r2, #12
 800869e:	4013      	ands	r3, r2
 80086a0:	2b0c      	cmp	r3, #12
 80086a2:	d1ef      	bne.n	8008684 <HAL_RCC_ClockConfig+0x118>
 80086a4:	e024      	b.n	80086f0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d11b      	bne.n	80086e6 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80086ae:	e009      	b.n	80086c4 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086b0:	f7fe f816 	bl	80066e0 <HAL_GetTick>
 80086b4:	0002      	movs	r2, r0
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	4a3c      	ldr	r2, [pc, #240]	; (80087ac <HAL_RCC_ClockConfig+0x240>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d901      	bls.n	80086c4 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e06b      	b.n	800879c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80086c4:	4b38      	ldr	r3, [pc, #224]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	220c      	movs	r2, #12
 80086ca:	4013      	ands	r3, r2
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	d1ef      	bne.n	80086b0 <HAL_RCC_ClockConfig+0x144>
 80086d0:	e00e      	b.n	80086f0 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086d2:	f7fe f805 	bl	80066e0 <HAL_GetTick>
 80086d6:	0002      	movs	r2, r0
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	4a33      	ldr	r2, [pc, #204]	; (80087ac <HAL_RCC_ClockConfig+0x240>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d901      	bls.n	80086e6 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e05a      	b.n	800879c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80086e6:	4b30      	ldr	r3, [pc, #192]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	220c      	movs	r2, #12
 80086ec:	4013      	ands	r3, r2
 80086ee:	d1f0      	bne.n	80086d2 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80086f0:	4b2c      	ldr	r3, [pc, #176]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2201      	movs	r2, #1
 80086f6:	4013      	ands	r3, r2
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d211      	bcs.n	8008722 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086fe:	4b29      	ldr	r3, [pc, #164]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2201      	movs	r2, #1
 8008704:	4393      	bics	r3, r2
 8008706:	0019      	movs	r1, r3
 8008708:	4b26      	ldr	r3, [pc, #152]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	430a      	orrs	r2, r1
 800870e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008710:	4b24      	ldr	r3, [pc, #144]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2201      	movs	r2, #1
 8008716:	4013      	ands	r3, r2
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	429a      	cmp	r2, r3
 800871c:	d001      	beq.n	8008722 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e03c      	b.n	800879c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2204      	movs	r2, #4
 8008728:	4013      	ands	r3, r2
 800872a:	d009      	beq.n	8008740 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800872c:	4b1e      	ldr	r3, [pc, #120]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	4a1f      	ldr	r2, [pc, #124]	; (80087b0 <HAL_RCC_ClockConfig+0x244>)
 8008732:	4013      	ands	r3, r2
 8008734:	0019      	movs	r1, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	4b1b      	ldr	r3, [pc, #108]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 800873c:	430a      	orrs	r2, r1
 800873e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2208      	movs	r2, #8
 8008746:	4013      	ands	r3, r2
 8008748:	d00a      	beq.n	8008760 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800874a:	4b17      	ldr	r3, [pc, #92]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	4a19      	ldr	r2, [pc, #100]	; (80087b4 <HAL_RCC_ClockConfig+0x248>)
 8008750:	4013      	ands	r3, r2
 8008752:	0019      	movs	r1, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	00da      	lsls	r2, r3, #3
 800875a:	4b13      	ldr	r3, [pc, #76]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 800875c:	430a      	orrs	r2, r1
 800875e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008760:	f000 f82e 	bl	80087c0 <HAL_RCC_GetSysClockFreq>
 8008764:	0001      	movs	r1, r0
 8008766:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	091b      	lsrs	r3, r3, #4
 800876c:	220f      	movs	r2, #15
 800876e:	4013      	ands	r3, r2
 8008770:	4a11      	ldr	r2, [pc, #68]	; (80087b8 <HAL_RCC_ClockConfig+0x24c>)
 8008772:	5cd3      	ldrb	r3, [r2, r3]
 8008774:	000a      	movs	r2, r1
 8008776:	40da      	lsrs	r2, r3
 8008778:	4b10      	ldr	r3, [pc, #64]	; (80087bc <HAL_RCC_ClockConfig+0x250>)
 800877a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800877c:	250b      	movs	r5, #11
 800877e:	197c      	adds	r4, r7, r5
 8008780:	2000      	movs	r0, #0
 8008782:	f7fd ff77 	bl	8006674 <HAL_InitTick>
 8008786:	0003      	movs	r3, r0
 8008788:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800878a:	197b      	adds	r3, r7, r5
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8008792:	230b      	movs	r3, #11
 8008794:	18fb      	adds	r3, r7, r3
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	e000      	b.n	800879c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	0018      	movs	r0, r3
 800879e:	46bd      	mov	sp, r7
 80087a0:	b004      	add	sp, #16
 80087a2:	bdb0      	pop	{r4, r5, r7, pc}
 80087a4:	40022000 	.word	0x40022000
 80087a8:	40021000 	.word	0x40021000
 80087ac:	00001388 	.word	0x00001388
 80087b0:	fffff8ff 	.word	0xfffff8ff
 80087b4:	ffffc7ff 	.word	0xffffc7ff
 80087b8:	0800d3d4 	.word	0x0800d3d4
 80087bc:	2000002c 	.word	0x2000002c

080087c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80087c6:	4b3b      	ldr	r3, [pc, #236]	; (80088b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	220c      	movs	r2, #12
 80087d0:	4013      	ands	r3, r2
 80087d2:	2b08      	cmp	r3, #8
 80087d4:	d00e      	beq.n	80087f4 <HAL_RCC_GetSysClockFreq+0x34>
 80087d6:	2b0c      	cmp	r3, #12
 80087d8:	d00f      	beq.n	80087fa <HAL_RCC_GetSysClockFreq+0x3a>
 80087da:	2b04      	cmp	r3, #4
 80087dc:	d157      	bne.n	800888e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80087de:	4b35      	ldr	r3, [pc, #212]	; (80088b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2210      	movs	r2, #16
 80087e4:	4013      	ands	r3, r2
 80087e6:	d002      	beq.n	80087ee <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80087e8:	4b33      	ldr	r3, [pc, #204]	; (80088b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087ea:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80087ec:	e05d      	b.n	80088aa <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80087ee:	4b33      	ldr	r3, [pc, #204]	; (80088bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80087f0:	613b      	str	r3, [r7, #16]
      break;
 80087f2:	e05a      	b.n	80088aa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80087f4:	4b32      	ldr	r3, [pc, #200]	; (80088c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80087f6:	613b      	str	r3, [r7, #16]
      break;
 80087f8:	e057      	b.n	80088aa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	0c9b      	lsrs	r3, r3, #18
 80087fe:	220f      	movs	r2, #15
 8008800:	4013      	ands	r3, r2
 8008802:	4a30      	ldr	r2, [pc, #192]	; (80088c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8008804:	5cd3      	ldrb	r3, [r2, r3]
 8008806:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	0d9b      	lsrs	r3, r3, #22
 800880c:	2203      	movs	r2, #3
 800880e:	4013      	ands	r3, r2
 8008810:	3301      	adds	r3, #1
 8008812:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008814:	4b27      	ldr	r3, [pc, #156]	; (80088b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008816:	68da      	ldr	r2, [r3, #12]
 8008818:	2380      	movs	r3, #128	; 0x80
 800881a:	025b      	lsls	r3, r3, #9
 800881c:	4013      	ands	r3, r2
 800881e:	d00f      	beq.n	8008840 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8008820:	68b9      	ldr	r1, [r7, #8]
 8008822:	000a      	movs	r2, r1
 8008824:	0152      	lsls	r2, r2, #5
 8008826:	1a52      	subs	r2, r2, r1
 8008828:	0193      	lsls	r3, r2, #6
 800882a:	1a9b      	subs	r3, r3, r2
 800882c:	00db      	lsls	r3, r3, #3
 800882e:	185b      	adds	r3, r3, r1
 8008830:	025b      	lsls	r3, r3, #9
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	0018      	movs	r0, r3
 8008836:	f7f7 fc6f 	bl	8000118 <__udivsi3>
 800883a:	0003      	movs	r3, r0
 800883c:	617b      	str	r3, [r7, #20]
 800883e:	e023      	b.n	8008888 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008840:	4b1c      	ldr	r3, [pc, #112]	; (80088b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2210      	movs	r2, #16
 8008846:	4013      	ands	r3, r2
 8008848:	d00f      	beq.n	800886a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800884a:	68b9      	ldr	r1, [r7, #8]
 800884c:	000a      	movs	r2, r1
 800884e:	0152      	lsls	r2, r2, #5
 8008850:	1a52      	subs	r2, r2, r1
 8008852:	0193      	lsls	r3, r2, #6
 8008854:	1a9b      	subs	r3, r3, r2
 8008856:	00db      	lsls	r3, r3, #3
 8008858:	185b      	adds	r3, r3, r1
 800885a:	021b      	lsls	r3, r3, #8
 800885c:	6879      	ldr	r1, [r7, #4]
 800885e:	0018      	movs	r0, r3
 8008860:	f7f7 fc5a 	bl	8000118 <__udivsi3>
 8008864:	0003      	movs	r3, r0
 8008866:	617b      	str	r3, [r7, #20]
 8008868:	e00e      	b.n	8008888 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800886a:	68b9      	ldr	r1, [r7, #8]
 800886c:	000a      	movs	r2, r1
 800886e:	0152      	lsls	r2, r2, #5
 8008870:	1a52      	subs	r2, r2, r1
 8008872:	0193      	lsls	r3, r2, #6
 8008874:	1a9b      	subs	r3, r3, r2
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	185b      	adds	r3, r3, r1
 800887a:	029b      	lsls	r3, r3, #10
 800887c:	6879      	ldr	r1, [r7, #4]
 800887e:	0018      	movs	r0, r3
 8008880:	f7f7 fc4a 	bl	8000118 <__udivsi3>
 8008884:	0003      	movs	r3, r0
 8008886:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	613b      	str	r3, [r7, #16]
      break;
 800888c:	e00d      	b.n	80088aa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800888e:	4b09      	ldr	r3, [pc, #36]	; (80088b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	0b5b      	lsrs	r3, r3, #13
 8008894:	2207      	movs	r2, #7
 8008896:	4013      	ands	r3, r2
 8008898:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	3301      	adds	r3, #1
 800889e:	2280      	movs	r2, #128	; 0x80
 80088a0:	0212      	lsls	r2, r2, #8
 80088a2:	409a      	lsls	r2, r3
 80088a4:	0013      	movs	r3, r2
 80088a6:	613b      	str	r3, [r7, #16]
      break;
 80088a8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80088aa:	693b      	ldr	r3, [r7, #16]
}
 80088ac:	0018      	movs	r0, r3
 80088ae:	46bd      	mov	sp, r7
 80088b0:	b006      	add	sp, #24
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	40021000 	.word	0x40021000
 80088b8:	003d0900 	.word	0x003d0900
 80088bc:	00f42400 	.word	0x00f42400
 80088c0:	007a1200 	.word	0x007a1200
 80088c4:	0800d3ec 	.word	0x0800d3ec

080088c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088cc:	4b02      	ldr	r3, [pc, #8]	; (80088d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80088ce:	681b      	ldr	r3, [r3, #0]
}
 80088d0:	0018      	movs	r0, r3
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	46c0      	nop			; (mov r8, r8)
 80088d8:	2000002c 	.word	0x2000002c

080088dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80088e0:	f7ff fff2 	bl	80088c8 <HAL_RCC_GetHCLKFreq>
 80088e4:	0001      	movs	r1, r0
 80088e6:	4b06      	ldr	r3, [pc, #24]	; (8008900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	0a1b      	lsrs	r3, r3, #8
 80088ec:	2207      	movs	r2, #7
 80088ee:	4013      	ands	r3, r2
 80088f0:	4a04      	ldr	r2, [pc, #16]	; (8008904 <HAL_RCC_GetPCLK1Freq+0x28>)
 80088f2:	5cd3      	ldrb	r3, [r2, r3]
 80088f4:	40d9      	lsrs	r1, r3
 80088f6:	000b      	movs	r3, r1
}
 80088f8:	0018      	movs	r0, r3
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	46c0      	nop			; (mov r8, r8)
 8008900:	40021000 	.word	0x40021000
 8008904:	0800d3e4 	.word	0x0800d3e4

08008908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800890c:	f7ff ffdc 	bl	80088c8 <HAL_RCC_GetHCLKFreq>
 8008910:	0001      	movs	r1, r0
 8008912:	4b06      	ldr	r3, [pc, #24]	; (800892c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	0adb      	lsrs	r3, r3, #11
 8008918:	2207      	movs	r2, #7
 800891a:	4013      	ands	r3, r2
 800891c:	4a04      	ldr	r2, [pc, #16]	; (8008930 <HAL_RCC_GetPCLK2Freq+0x28>)
 800891e:	5cd3      	ldrb	r3, [r2, r3]
 8008920:	40d9      	lsrs	r1, r3
 8008922:	000b      	movs	r3, r1
}
 8008924:	0018      	movs	r0, r3
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	46c0      	nop			; (mov r8, r8)
 800892c:	40021000 	.word	0x40021000
 8008930:	0800d3e4 	.word	0x0800d3e4

08008934 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2220      	movs	r2, #32
 8008942:	4013      	ands	r3, r2
 8008944:	d100      	bne.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8008946:	e0c7      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8008948:	2317      	movs	r3, #23
 800894a:	18fb      	adds	r3, r7, r3
 800894c:	2200      	movs	r2, #0
 800894e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008950:	4b89      	ldr	r3, [pc, #548]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008954:	2380      	movs	r3, #128	; 0x80
 8008956:	055b      	lsls	r3, r3, #21
 8008958:	4013      	ands	r3, r2
 800895a:	d10a      	bne.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800895c:	4b86      	ldr	r3, [pc, #536]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800895e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008960:	4b85      	ldr	r3, [pc, #532]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008962:	2180      	movs	r1, #128	; 0x80
 8008964:	0549      	lsls	r1, r1, #21
 8008966:	430a      	orrs	r2, r1
 8008968:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800896a:	2317      	movs	r3, #23
 800896c:	18fb      	adds	r3, r7, r3
 800896e:	2201      	movs	r2, #1
 8008970:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008972:	4b82      	ldr	r3, [pc, #520]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	2380      	movs	r3, #128	; 0x80
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	4013      	ands	r3, r2
 800897c:	d11a      	bne.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800897e:	4b7f      	ldr	r3, [pc, #508]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	4b7e      	ldr	r3, [pc, #504]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008984:	2180      	movs	r1, #128	; 0x80
 8008986:	0049      	lsls	r1, r1, #1
 8008988:	430a      	orrs	r2, r1
 800898a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800898c:	f7fd fea8 	bl	80066e0 <HAL_GetTick>
 8008990:	0003      	movs	r3, r0
 8008992:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008994:	e008      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008996:	f7fd fea3 	bl	80066e0 <HAL_GetTick>
 800899a:	0002      	movs	r2, r0
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	2b64      	cmp	r3, #100	; 0x64
 80089a2:	d901      	bls.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e0e3      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089a8:	4b74      	ldr	r3, [pc, #464]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	2380      	movs	r3, #128	; 0x80
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	4013      	ands	r3, r2
 80089b2:	d0f0      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80089b4:	4b70      	ldr	r3, [pc, #448]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	23c0      	movs	r3, #192	; 0xc0
 80089ba:	039b      	lsls	r3, r3, #14
 80089bc:	4013      	ands	r3, r2
 80089be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	23c0      	movs	r3, #192	; 0xc0
 80089c6:	039b      	lsls	r3, r3, #14
 80089c8:	4013      	ands	r3, r2
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d013      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	23c0      	movs	r3, #192	; 0xc0
 80089d6:	029b      	lsls	r3, r3, #10
 80089d8:	401a      	ands	r2, r3
 80089da:	23c0      	movs	r3, #192	; 0xc0
 80089dc:	029b      	lsls	r3, r3, #10
 80089de:	429a      	cmp	r2, r3
 80089e0:	d10a      	bne.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80089e2:	4b65      	ldr	r3, [pc, #404]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	2380      	movs	r3, #128	; 0x80
 80089e8:	029b      	lsls	r3, r3, #10
 80089ea:	401a      	ands	r2, r3
 80089ec:	2380      	movs	r3, #128	; 0x80
 80089ee:	029b      	lsls	r3, r3, #10
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d101      	bne.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e0bb      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80089f8:	4b5f      	ldr	r3, [pc, #380]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80089fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089fc:	23c0      	movs	r3, #192	; 0xc0
 80089fe:	029b      	lsls	r3, r3, #10
 8008a00:	4013      	ands	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d03b      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	23c0      	movs	r3, #192	; 0xc0
 8008a10:	029b      	lsls	r3, r3, #10
 8008a12:	4013      	ands	r3, r2
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d033      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2220      	movs	r2, #32
 8008a20:	4013      	ands	r3, r2
 8008a22:	d02e      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8008a24:	4b54      	ldr	r3, [pc, #336]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a28:	4a55      	ldr	r2, [pc, #340]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008a2e:	4b52      	ldr	r3, [pc, #328]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a32:	4b51      	ldr	r3, [pc, #324]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008a34:	2180      	movs	r1, #128	; 0x80
 8008a36:	0309      	lsls	r1, r1, #12
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008a3c:	4b4e      	ldr	r3, [pc, #312]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008a3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a40:	4b4d      	ldr	r3, [pc, #308]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008a42:	4950      	ldr	r1, [pc, #320]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008a44:	400a      	ands	r2, r1
 8008a46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8008a48:	4b4b      	ldr	r3, [pc, #300]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	2380      	movs	r3, #128	; 0x80
 8008a52:	005b      	lsls	r3, r3, #1
 8008a54:	4013      	ands	r3, r2
 8008a56:	d014      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a58:	f7fd fe42 	bl	80066e0 <HAL_GetTick>
 8008a5c:	0003      	movs	r3, r0
 8008a5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a60:	e009      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a62:	f7fd fe3d 	bl	80066e0 <HAL_GetTick>
 8008a66:	0002      	movs	r2, r0
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	4a46      	ldr	r2, [pc, #280]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d901      	bls.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e07c      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a76:	4b40      	ldr	r3, [pc, #256]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008a78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a7a:	2380      	movs	r3, #128	; 0x80
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4013      	ands	r3, r2
 8008a80:	d0ef      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	23c0      	movs	r3, #192	; 0xc0
 8008a88:	029b      	lsls	r3, r3, #10
 8008a8a:	401a      	ands	r2, r3
 8008a8c:	23c0      	movs	r3, #192	; 0xc0
 8008a8e:	029b      	lsls	r3, r3, #10
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d10c      	bne.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008a94:	4b38      	ldr	r3, [pc, #224]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a3c      	ldr	r2, [pc, #240]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	0019      	movs	r1, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	23c0      	movs	r3, #192	; 0xc0
 8008aa4:	039b      	lsls	r3, r3, #14
 8008aa6:	401a      	ands	r2, r3
 8008aa8:	4b33      	ldr	r3, [pc, #204]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	4b32      	ldr	r3, [pc, #200]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008ab0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	23c0      	movs	r3, #192	; 0xc0
 8008ab8:	029b      	lsls	r3, r3, #10
 8008aba:	401a      	ands	r2, r3
 8008abc:	4b2e      	ldr	r3, [pc, #184]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008ac2:	2317      	movs	r3, #23
 8008ac4:	18fb      	adds	r3, r7, r3
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d105      	bne.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008acc:	4b2a      	ldr	r3, [pc, #168]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ad0:	4b29      	ldr	r3, [pc, #164]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008ad2:	492f      	ldr	r1, [pc, #188]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008ad4:	400a      	ands	r2, r1
 8008ad6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2201      	movs	r2, #1
 8008ade:	4013      	ands	r3, r2
 8008ae0:	d009      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ae2:	4b25      	ldr	r3, [pc, #148]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ae6:	2203      	movs	r2, #3
 8008ae8:	4393      	bics	r3, r2
 8008aea:	0019      	movs	r1, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	4b21      	ldr	r3, [pc, #132]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008af2:	430a      	orrs	r2, r1
 8008af4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2202      	movs	r2, #2
 8008afc:	4013      	ands	r3, r2
 8008afe:	d009      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b00:	4b1d      	ldr	r3, [pc, #116]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b04:	220c      	movs	r2, #12
 8008b06:	4393      	bics	r3, r2
 8008b08:	0019      	movs	r1, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68da      	ldr	r2, [r3, #12]
 8008b0e:	4b1a      	ldr	r3, [pc, #104]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008b10:	430a      	orrs	r2, r1
 8008b12:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2204      	movs	r2, #4
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	d009      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b1e:	4b16      	ldr	r3, [pc, #88]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b22:	4a1c      	ldr	r2, [pc, #112]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b24:	4013      	ands	r3, r2
 8008b26:	0019      	movs	r1, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	691a      	ldr	r2, [r3, #16]
 8008b2c:	4b12      	ldr	r3, [pc, #72]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2208      	movs	r2, #8
 8008b38:	4013      	ands	r3, r2
 8008b3a:	d009      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b3c:	4b0e      	ldr	r3, [pc, #56]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b40:	4a15      	ldr	r2, [pc, #84]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008b42:	4013      	ands	r3, r2
 8008b44:	0019      	movs	r1, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	695a      	ldr	r2, [r3, #20]
 8008b4a:	4b0b      	ldr	r3, [pc, #44]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2280      	movs	r2, #128	; 0x80
 8008b56:	4013      	ands	r3, r2
 8008b58:	d009      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008b5a:	4b07      	ldr	r3, [pc, #28]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b5e:	4a0f      	ldr	r2, [pc, #60]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008b60:	4013      	ands	r3, r2
 8008b62:	0019      	movs	r1, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	699a      	ldr	r2, [r3, #24]
 8008b68:	4b03      	ldr	r3, [pc, #12]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	0018      	movs	r0, r3
 8008b72:	46bd      	mov	sp, r7
 8008b74:	b006      	add	sp, #24
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	40021000 	.word	0x40021000
 8008b7c:	40007000 	.word	0x40007000
 8008b80:	fffcffff 	.word	0xfffcffff
 8008b84:	fff7ffff 	.word	0xfff7ffff
 8008b88:	00001388 	.word	0x00001388
 8008b8c:	ffcfffff 	.word	0xffcfffff
 8008b90:	efffffff 	.word	0xefffffff
 8008b94:	fffff3ff 	.word	0xfffff3ff
 8008b98:	ffffcfff 	.word	0xffffcfff
 8008b9c:	fff3ffff 	.word	0xfff3ffff

08008ba0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d101      	bne.n	8008bb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e059      	b.n	8008c66 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2251      	movs	r2, #81	; 0x51
 8008bbc:	5c9b      	ldrb	r3, [r3, r2]
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d107      	bne.n	8008bd4 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2250      	movs	r2, #80	; 0x50
 8008bc8:	2100      	movs	r1, #0
 8008bca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	0018      	movs	r0, r3
 8008bd0:	f7fd f816 	bl	8005c00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2251      	movs	r2, #81	; 0x51
 8008bd8:	2102      	movs	r1, #2
 8008bda:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2140      	movs	r1, #64	; 0x40
 8008be8:	438a      	bics	r2, r1
 8008bea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	431a      	orrs	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	431a      	orrs	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	431a      	orrs	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6999      	ldr	r1, [r3, #24]
 8008c0c:	2380      	movs	r3, #128	; 0x80
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	400b      	ands	r3, r1
 8008c12:	431a      	orrs	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	69db      	ldr	r3, [r3, #28]
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	0011      	movs	r1, r2
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	0c1b      	lsrs	r3, r3, #16
 8008c34:	2204      	movs	r2, #4
 8008c36:	4013      	ands	r3, r2
 8008c38:	0019      	movs	r1, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	430a      	orrs	r2, r1
 8008c44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	69da      	ldr	r2, [r3, #28]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4907      	ldr	r1, [pc, #28]	; (8008c70 <HAL_SPI_Init+0xd0>)
 8008c52:	400a      	ands	r2, r1
 8008c54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2251      	movs	r2, #81	; 0x51
 8008c60:	2101      	movs	r1, #1
 8008c62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	0018      	movs	r0, r3
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	b002      	add	sp, #8
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	46c0      	nop			; (mov r8, r8)
 8008c70:	fffff7ff 	.word	0xfffff7ff

08008c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e01e      	b.n	8008cc4 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2239      	movs	r2, #57	; 0x39
 8008c8a:	5c9b      	ldrb	r3, [r3, r2]
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d107      	bne.n	8008ca2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2238      	movs	r2, #56	; 0x38
 8008c96:	2100      	movs	r1, #0
 8008c98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	0018      	movs	r0, r3
 8008c9e:	f7fd fb41 	bl	8006324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2239      	movs	r2, #57	; 0x39
 8008ca6:	2102      	movs	r1, #2
 8008ca8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	0019      	movs	r1, r3
 8008cb4:	0010      	movs	r0, r2
 8008cb6:	f000 f9f1 	bl	800909c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2239      	movs	r2, #57	; 0x39
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	0018      	movs	r0, r3
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	b002      	add	sp, #8
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68da      	ldr	r2, [r3, #12]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2101      	movs	r1, #1
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	2207      	movs	r2, #7
 8008cec:	4013      	ands	r3, r2
 8008cee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b06      	cmp	r3, #6
 8008cf4:	d007      	beq.n	8008d06 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2101      	movs	r1, #1
 8008d02:	430a      	orrs	r2, r1
 8008d04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	0018      	movs	r0, r3
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	b004      	add	sp, #16
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	4013      	ands	r3, r2
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d124      	bne.n	8008d70 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	2202      	movs	r2, #2
 8008d2e:	4013      	ands	r3, r2
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d11d      	bne.n	8008d70 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2203      	movs	r2, #3
 8008d3a:	4252      	negs	r2, r2
 8008d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	2203      	movs	r2, #3
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	d004      	beq.n	8008d5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	0018      	movs	r0, r3
 8008d54:	f000 f98a 	bl	800906c <HAL_TIM_IC_CaptureCallback>
 8008d58:	e007      	b.n	8008d6a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	0018      	movs	r0, r3
 8008d5e:	f000 f97d 	bl	800905c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	0018      	movs	r0, r3
 8008d66:	f000 f989 	bl	800907c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	2204      	movs	r2, #4
 8008d78:	4013      	ands	r3, r2
 8008d7a:	2b04      	cmp	r3, #4
 8008d7c:	d125      	bne.n	8008dca <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	2204      	movs	r2, #4
 8008d86:	4013      	ands	r3, r2
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d11e      	bne.n	8008dca <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2205      	movs	r2, #5
 8008d92:	4252      	negs	r2, r2
 8008d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2202      	movs	r2, #2
 8008d9a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	699a      	ldr	r2, [r3, #24]
 8008da2:	23c0      	movs	r3, #192	; 0xc0
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4013      	ands	r3, r2
 8008da8:	d004      	beq.n	8008db4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	0018      	movs	r0, r3
 8008dae:	f000 f95d 	bl	800906c <HAL_TIM_IC_CaptureCallback>
 8008db2:	e007      	b.n	8008dc4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	0018      	movs	r0, r3
 8008db8:	f000 f950 	bl	800905c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f000 f95c 	bl	800907c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	2208      	movs	r2, #8
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	2b08      	cmp	r3, #8
 8008dd6:	d124      	bne.n	8008e22 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	2208      	movs	r2, #8
 8008de0:	4013      	ands	r3, r2
 8008de2:	2b08      	cmp	r3, #8
 8008de4:	d11d      	bne.n	8008e22 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2209      	movs	r2, #9
 8008dec:	4252      	negs	r2, r2
 8008dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2204      	movs	r2, #4
 8008df4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	2203      	movs	r2, #3
 8008dfe:	4013      	ands	r3, r2
 8008e00:	d004      	beq.n	8008e0c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	0018      	movs	r0, r3
 8008e06:	f000 f931 	bl	800906c <HAL_TIM_IC_CaptureCallback>
 8008e0a:	e007      	b.n	8008e1c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	0018      	movs	r0, r3
 8008e10:	f000 f924 	bl	800905c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	0018      	movs	r0, r3
 8008e18:	f000 f930 	bl	800907c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	2210      	movs	r2, #16
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	2b10      	cmp	r3, #16
 8008e2e:	d125      	bne.n	8008e7c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	2210      	movs	r2, #16
 8008e38:	4013      	ands	r3, r2
 8008e3a:	2b10      	cmp	r3, #16
 8008e3c:	d11e      	bne.n	8008e7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2211      	movs	r2, #17
 8008e44:	4252      	negs	r2, r2
 8008e46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2208      	movs	r2, #8
 8008e4c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69da      	ldr	r2, [r3, #28]
 8008e54:	23c0      	movs	r3, #192	; 0xc0
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4013      	ands	r3, r2
 8008e5a:	d004      	beq.n	8008e66 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	0018      	movs	r0, r3
 8008e60:	f000 f904 	bl	800906c <HAL_TIM_IC_CaptureCallback>
 8008e64:	e007      	b.n	8008e76 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	0018      	movs	r0, r3
 8008e6a:	f000 f8f7 	bl	800905c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	0018      	movs	r0, r3
 8008e72:	f000 f903 	bl	800907c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	2201      	movs	r2, #1
 8008e84:	4013      	ands	r3, r2
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d10f      	bne.n	8008eaa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	2201      	movs	r2, #1
 8008e92:	4013      	ands	r3, r2
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d108      	bne.n	8008eaa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	4252      	negs	r2, r2
 8008ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	0018      	movs	r0, r3
 8008ea6:	f7fd f97b 	bl	80061a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	2240      	movs	r2, #64	; 0x40
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	2b40      	cmp	r3, #64	; 0x40
 8008eb6:	d10f      	bne.n	8008ed8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	2240      	movs	r2, #64	; 0x40
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	2b40      	cmp	r3, #64	; 0x40
 8008ec4:	d108      	bne.n	8008ed8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2241      	movs	r2, #65	; 0x41
 8008ecc:	4252      	negs	r2, r2
 8008ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	0018      	movs	r0, r3
 8008ed4:	f000 f8da 	bl	800908c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ed8:	46c0      	nop			; (mov r8, r8)
 8008eda:	46bd      	mov	sp, r7
 8008edc:	b002      	add	sp, #8
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2238      	movs	r2, #56	; 0x38
 8008eee:	5c9b      	ldrb	r3, [r3, r2]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d101      	bne.n	8008ef8 <HAL_TIM_ConfigClockSource+0x18>
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	e0ab      	b.n	8009050 <HAL_TIM_ConfigClockSource+0x170>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2238      	movs	r2, #56	; 0x38
 8008efc:	2101      	movs	r1, #1
 8008efe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2239      	movs	r2, #57	; 0x39
 8008f04:	2102      	movs	r1, #2
 8008f06:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2277      	movs	r2, #119	; 0x77
 8008f14:	4393      	bics	r3, r2
 8008f16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4a4f      	ldr	r2, [pc, #316]	; (8009058 <HAL_TIM_ConfigClockSource+0x178>)
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b40      	cmp	r3, #64	; 0x40
 8008f2e:	d100      	bne.n	8008f32 <HAL_TIM_ConfigClockSource+0x52>
 8008f30:	e06b      	b.n	800900a <HAL_TIM_ConfigClockSource+0x12a>
 8008f32:	d80e      	bhi.n	8008f52 <HAL_TIM_ConfigClockSource+0x72>
 8008f34:	2b10      	cmp	r3, #16
 8008f36:	d100      	bne.n	8008f3a <HAL_TIM_ConfigClockSource+0x5a>
 8008f38:	e077      	b.n	800902a <HAL_TIM_ConfigClockSource+0x14a>
 8008f3a:	d803      	bhi.n	8008f44 <HAL_TIM_ConfigClockSource+0x64>
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d100      	bne.n	8008f42 <HAL_TIM_ConfigClockSource+0x62>
 8008f40:	e073      	b.n	800902a <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008f42:	e07c      	b.n	800903e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8008f44:	2b20      	cmp	r3, #32
 8008f46:	d100      	bne.n	8008f4a <HAL_TIM_ConfigClockSource+0x6a>
 8008f48:	e06f      	b.n	800902a <HAL_TIM_ConfigClockSource+0x14a>
 8008f4a:	2b30      	cmp	r3, #48	; 0x30
 8008f4c:	d100      	bne.n	8008f50 <HAL_TIM_ConfigClockSource+0x70>
 8008f4e:	e06c      	b.n	800902a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8008f50:	e075      	b.n	800903e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8008f52:	2b70      	cmp	r3, #112	; 0x70
 8008f54:	d00e      	beq.n	8008f74 <HAL_TIM_ConfigClockSource+0x94>
 8008f56:	d804      	bhi.n	8008f62 <HAL_TIM_ConfigClockSource+0x82>
 8008f58:	2b50      	cmp	r3, #80	; 0x50
 8008f5a:	d036      	beq.n	8008fca <HAL_TIM_ConfigClockSource+0xea>
 8008f5c:	2b60      	cmp	r3, #96	; 0x60
 8008f5e:	d044      	beq.n	8008fea <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8008f60:	e06d      	b.n	800903e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8008f62:	2280      	movs	r2, #128	; 0x80
 8008f64:	0152      	lsls	r2, r2, #5
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d068      	beq.n	800903c <HAL_TIM_ConfigClockSource+0x15c>
 8008f6a:	2280      	movs	r2, #128	; 0x80
 8008f6c:	0192      	lsls	r2, r2, #6
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d017      	beq.n	8008fa2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8008f72:	e064      	b.n	800903e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6818      	ldr	r0, [r3, #0]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	6899      	ldr	r1, [r3, #8]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	f000 f958 	bl	8009238 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2277      	movs	r2, #119	; 0x77
 8008f94:	4313      	orrs	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	609a      	str	r2, [r3, #8]
      break;
 8008fa0:	e04d      	b.n	800903e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6818      	ldr	r0, [r3, #0]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	6899      	ldr	r1, [r3, #8]
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	f000 f941 	bl	8009238 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	689a      	ldr	r2, [r3, #8]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2180      	movs	r1, #128	; 0x80
 8008fc2:	01c9      	lsls	r1, r1, #7
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	609a      	str	r2, [r3, #8]
      break;
 8008fc8:	e039      	b.n	800903e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6818      	ldr	r0, [r3, #0]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	6859      	ldr	r1, [r3, #4]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	001a      	movs	r2, r3
 8008fd8:	f000 f8b4 	bl	8009144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2150      	movs	r1, #80	; 0x50
 8008fe2:	0018      	movs	r0, r3
 8008fe4:	f000 f90e 	bl	8009204 <TIM_ITRx_SetConfig>
      break;
 8008fe8:	e029      	b.n	800903e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6818      	ldr	r0, [r3, #0]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	6859      	ldr	r1, [r3, #4]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	001a      	movs	r2, r3
 8008ff8:	f000 f8d2 	bl	80091a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2160      	movs	r1, #96	; 0x60
 8009002:	0018      	movs	r0, r3
 8009004:	f000 f8fe 	bl	8009204 <TIM_ITRx_SetConfig>
      break;
 8009008:	e019      	b.n	800903e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6818      	ldr	r0, [r3, #0]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	6859      	ldr	r1, [r3, #4]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	001a      	movs	r2, r3
 8009018:	f000 f894 	bl	8009144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2140      	movs	r1, #64	; 0x40
 8009022:	0018      	movs	r0, r3
 8009024:	f000 f8ee 	bl	8009204 <TIM_ITRx_SetConfig>
      break;
 8009028:	e009      	b.n	800903e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	0019      	movs	r1, r3
 8009034:	0010      	movs	r0, r2
 8009036:	f000 f8e5 	bl	8009204 <TIM_ITRx_SetConfig>
      break;
 800903a:	e000      	b.n	800903e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800903c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2239      	movs	r2, #57	; 0x39
 8009042:	2101      	movs	r1, #1
 8009044:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2238      	movs	r2, #56	; 0x38
 800904a:	2100      	movs	r1, #0
 800904c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	0018      	movs	r0, r3
 8009052:	46bd      	mov	sp, r7
 8009054:	b004      	add	sp, #16
 8009056:	bd80      	pop	{r7, pc}
 8009058:	ffff00ff 	.word	0xffff00ff

0800905c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009064:	46c0      	nop			; (mov r8, r8)
 8009066:	46bd      	mov	sp, r7
 8009068:	b002      	add	sp, #8
 800906a:	bd80      	pop	{r7, pc}

0800906c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009074:	46c0      	nop			; (mov r8, r8)
 8009076:	46bd      	mov	sp, r7
 8009078:	b002      	add	sp, #8
 800907a:	bd80      	pop	{r7, pc}

0800907c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009084:	46c0      	nop			; (mov r8, r8)
 8009086:	46bd      	mov	sp, r7
 8009088:	b002      	add	sp, #8
 800908a:	bd80      	pop	{r7, pc}

0800908c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009094:	46c0      	nop			; (mov r8, r8)
 8009096:	46bd      	mov	sp, r7
 8009098:	b002      	add	sp, #8
 800909a:	bd80      	pop	{r7, pc}

0800909c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	2380      	movs	r3, #128	; 0x80
 80090b0:	05db      	lsls	r3, r3, #23
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d007      	beq.n	80090c6 <TIM_Base_SetConfig+0x2a>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a1f      	ldr	r2, [pc, #124]	; (8009138 <TIM_Base_SetConfig+0x9c>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d003      	beq.n	80090c6 <TIM_Base_SetConfig+0x2a>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a1e      	ldr	r2, [pc, #120]	; (800913c <TIM_Base_SetConfig+0xa0>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d108      	bne.n	80090d8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2270      	movs	r2, #112	; 0x70
 80090ca:	4393      	bics	r3, r2
 80090cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	2380      	movs	r3, #128	; 0x80
 80090dc:	05db      	lsls	r3, r3, #23
 80090de:	429a      	cmp	r2, r3
 80090e0:	d007      	beq.n	80090f2 <TIM_Base_SetConfig+0x56>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a14      	ldr	r2, [pc, #80]	; (8009138 <TIM_Base_SetConfig+0x9c>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d003      	beq.n	80090f2 <TIM_Base_SetConfig+0x56>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a13      	ldr	r2, [pc, #76]	; (800913c <TIM_Base_SetConfig+0xa0>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d108      	bne.n	8009104 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	4a12      	ldr	r2, [pc, #72]	; (8009140 <TIM_Base_SetConfig+0xa4>)
 80090f6:	4013      	ands	r3, r2
 80090f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	4313      	orrs	r3, r2
 8009102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2280      	movs	r2, #128	; 0x80
 8009108:	4393      	bics	r3, r2
 800910a:	001a      	movs	r2, r3
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	4313      	orrs	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	689a      	ldr	r2, [r3, #8]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	615a      	str	r2, [r3, #20]
}
 8009130:	46c0      	nop			; (mov r8, r8)
 8009132:	46bd      	mov	sp, r7
 8009134:	b004      	add	sp, #16
 8009136:	bd80      	pop	{r7, pc}
 8009138:	40010800 	.word	0x40010800
 800913c:	40011400 	.word	0x40011400
 8009140:	fffffcff 	.word	0xfffffcff

08009144 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	2201      	movs	r2, #1
 800915c:	4393      	bics	r3, r2
 800915e:	001a      	movs	r2, r3
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	22f0      	movs	r2, #240	; 0xf0
 800916e:	4393      	bics	r3, r2
 8009170:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	011b      	lsls	r3, r3, #4
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	4313      	orrs	r3, r2
 800917a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	220a      	movs	r2, #10
 8009180:	4393      	bics	r3, r2
 8009182:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	4313      	orrs	r3, r2
 800918a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	621a      	str	r2, [r3, #32]
}
 8009198:	46c0      	nop			; (mov r8, r8)
 800919a:	46bd      	mov	sp, r7
 800919c:	b006      	add	sp, #24
 800919e:	bd80      	pop	{r7, pc}

080091a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6a1b      	ldr	r3, [r3, #32]
 80091b0:	2210      	movs	r2, #16
 80091b2:	4393      	bics	r3, r2
 80091b4:	001a      	movs	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6a1b      	ldr	r3, [r3, #32]
 80091c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	4a0d      	ldr	r2, [pc, #52]	; (8009200 <TIM_TI2_ConfigInputStage+0x60>)
 80091ca:	4013      	ands	r3, r2
 80091cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	031b      	lsls	r3, r3, #12
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	22a0      	movs	r2, #160	; 0xa0
 80091dc:	4393      	bics	r3, r2
 80091de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	011b      	lsls	r3, r3, #4
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	621a      	str	r2, [r3, #32]
}
 80091f6:	46c0      	nop			; (mov r8, r8)
 80091f8:	46bd      	mov	sp, r7
 80091fa:	b006      	add	sp, #24
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	46c0      	nop			; (mov r8, r8)
 8009200:	ffff0fff 	.word	0xffff0fff

08009204 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2270      	movs	r2, #112	; 0x70
 8009218:	4393      	bics	r3, r2
 800921a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	4313      	orrs	r3, r2
 8009222:	2207      	movs	r2, #7
 8009224:	4313      	orrs	r3, r2
 8009226:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	609a      	str	r2, [r3, #8]
}
 800922e:	46c0      	nop			; (mov r8, r8)
 8009230:	46bd      	mov	sp, r7
 8009232:	b004      	add	sp, #16
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	4a09      	ldr	r2, [pc, #36]	; (8009274 <TIM_ETR_SetConfig+0x3c>)
 8009250:	4013      	ands	r3, r2
 8009252:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	021a      	lsls	r2, r3, #8
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	431a      	orrs	r2, r3
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	4313      	orrs	r3, r2
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	4313      	orrs	r3, r2
 8009264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	609a      	str	r2, [r3, #8]
}
 800926c:	46c0      	nop			; (mov r8, r8)
 800926e:	46bd      	mov	sp, r7
 8009270:	b006      	add	sp, #24
 8009272:	bd80      	pop	{r7, pc}
 8009274:	ffff00ff 	.word	0xffff00ff

08009278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2238      	movs	r2, #56	; 0x38
 8009286:	5c9b      	ldrb	r3, [r3, r2]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d101      	bne.n	8009290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800928c:	2302      	movs	r3, #2
 800928e:	e032      	b.n	80092f6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2238      	movs	r2, #56	; 0x38
 8009294:	2101      	movs	r1, #1
 8009296:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2239      	movs	r2, #57	; 0x39
 800929c:	2102      	movs	r1, #2
 800929e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2270      	movs	r2, #112	; 0x70
 80092b4:	4393      	bics	r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	4313      	orrs	r3, r2
 80092c0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2280      	movs	r2, #128	; 0x80
 80092c6:	4393      	bics	r3, r2
 80092c8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2239      	movs	r2, #57	; 0x39
 80092e8:	2101      	movs	r1, #1
 80092ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2238      	movs	r2, #56	; 0x38
 80092f0:	2100      	movs	r1, #0
 80092f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	0018      	movs	r0, r3
 80092f8:	46bd      	mov	sp, r7
 80092fa:	b004      	add	sp, #16
 80092fc:	bd80      	pop	{r7, pc}
	...

08009300 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d101      	bne.n	8009312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	e044      	b.n	800939c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009316:	2b00      	cmp	r3, #0
 8009318:	d107      	bne.n	800932a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2270      	movs	r2, #112	; 0x70
 800931e:	2100      	movs	r1, #0
 8009320:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	0018      	movs	r0, r3
 8009326:	f7fd f84b 	bl	80063c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2224      	movs	r2, #36	; 0x24
 800932e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2101      	movs	r1, #1
 800933c:	438a      	bics	r2, r1
 800933e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	0018      	movs	r0, r3
 8009344:	f000 f8d8 	bl	80094f8 <UART_SetConfig>
 8009348:	0003      	movs	r3, r0
 800934a:	2b01      	cmp	r3, #1
 800934c:	d101      	bne.n	8009352 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e024      	b.n	800939c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009356:	2b00      	cmp	r3, #0
 8009358:	d003      	beq.n	8009362 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	0018      	movs	r0, r3
 800935e:	f000 fbe3 	bl	8009b28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	685a      	ldr	r2, [r3, #4]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	490d      	ldr	r1, [pc, #52]	; (80093a4 <HAL_UART_Init+0xa4>)
 800936e:	400a      	ands	r2, r1
 8009370:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	689a      	ldr	r2, [r3, #8]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	212a      	movs	r1, #42	; 0x2a
 800937e:	438a      	bics	r2, r1
 8009380:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2101      	movs	r1, #1
 800938e:	430a      	orrs	r2, r1
 8009390:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	0018      	movs	r0, r3
 8009396:	f000 fc7b 	bl	8009c90 <UART_CheckIdleState>
 800939a:	0003      	movs	r3, r0
}
 800939c:	0018      	movs	r0, r3
 800939e:	46bd      	mov	sp, r7
 80093a0:	b002      	add	sp, #8
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	ffffb7ff 	.word	0xffffb7ff

080093a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b08a      	sub	sp, #40	; 0x28
 80093ac:	af02      	add	r7, sp, #8
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	603b      	str	r3, [r7, #0]
 80093b4:	1dbb      	adds	r3, r7, #6
 80093b6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093bc:	2b20      	cmp	r3, #32
 80093be:	d000      	beq.n	80093c2 <HAL_UART_Transmit+0x1a>
 80093c0:	e094      	b.n	80094ec <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d003      	beq.n	80093d0 <HAL_UART_Transmit+0x28>
 80093c8:	1dbb      	adds	r3, r7, #6
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d101      	bne.n	80093d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e08c      	b.n	80094ee <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	2380      	movs	r3, #128	; 0x80
 80093da:	015b      	lsls	r3, r3, #5
 80093dc:	429a      	cmp	r2, r3
 80093de:	d109      	bne.n	80093f4 <HAL_UART_Transmit+0x4c>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d105      	bne.n	80093f4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	2201      	movs	r2, #1
 80093ec:	4013      	ands	r3, r2
 80093ee:	d001      	beq.n	80093f4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e07c      	b.n	80094ee <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2270      	movs	r2, #112	; 0x70
 80093f8:	5c9b      	ldrb	r3, [r3, r2]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d101      	bne.n	8009402 <HAL_UART_Transmit+0x5a>
 80093fe:	2302      	movs	r3, #2
 8009400:	e075      	b.n	80094ee <HAL_UART_Transmit+0x146>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2270      	movs	r2, #112	; 0x70
 8009406:	2101      	movs	r1, #1
 8009408:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2221      	movs	r2, #33	; 0x21
 8009414:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009416:	f7fd f963 	bl	80066e0 <HAL_GetTick>
 800941a:	0003      	movs	r3, r0
 800941c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	1dba      	adds	r2, r7, #6
 8009422:	2150      	movs	r1, #80	; 0x50
 8009424:	8812      	ldrh	r2, [r2, #0]
 8009426:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	1dba      	adds	r2, r7, #6
 800942c:	2152      	movs	r1, #82	; 0x52
 800942e:	8812      	ldrh	r2, [r2, #0]
 8009430:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	689a      	ldr	r2, [r3, #8]
 8009436:	2380      	movs	r3, #128	; 0x80
 8009438:	015b      	lsls	r3, r3, #5
 800943a:	429a      	cmp	r2, r3
 800943c:	d108      	bne.n	8009450 <HAL_UART_Transmit+0xa8>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d104      	bne.n	8009450 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8009446:	2300      	movs	r3, #0
 8009448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	61bb      	str	r3, [r7, #24]
 800944e:	e003      	b.n	8009458 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009454:	2300      	movs	r3, #0
 8009456:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009458:	e02c      	b.n	80094b4 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	0013      	movs	r3, r2
 8009464:	2200      	movs	r2, #0
 8009466:	2180      	movs	r1, #128	; 0x80
 8009468:	f000 fc58 	bl	8009d1c <UART_WaitOnFlagUntilTimeout>
 800946c:	1e03      	subs	r3, r0, #0
 800946e:	d001      	beq.n	8009474 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	e03c      	b.n	80094ee <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10b      	bne.n	8009492 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	001a      	movs	r2, r3
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	05d2      	lsls	r2, r2, #23
 8009486:	0dd2      	lsrs	r2, r2, #23
 8009488:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	3302      	adds	r3, #2
 800948e:	61bb      	str	r3, [r7, #24]
 8009490:	e007      	b.n	80094a2 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	781a      	ldrb	r2, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	3301      	adds	r3, #1
 80094a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2252      	movs	r2, #82	; 0x52
 80094a6:	5a9b      	ldrh	r3, [r3, r2]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	3b01      	subs	r3, #1
 80094ac:	b299      	uxth	r1, r3
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2252      	movs	r2, #82	; 0x52
 80094b2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2252      	movs	r2, #82	; 0x52
 80094b8:	5a9b      	ldrh	r3, [r3, r2]
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1cc      	bne.n	800945a <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	0013      	movs	r3, r2
 80094ca:	2200      	movs	r2, #0
 80094cc:	2140      	movs	r1, #64	; 0x40
 80094ce:	f000 fc25 	bl	8009d1c <UART_WaitOnFlagUntilTimeout>
 80094d2:	1e03      	subs	r3, r0, #0
 80094d4:	d001      	beq.n	80094da <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e009      	b.n	80094ee <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2220      	movs	r2, #32
 80094de:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2270      	movs	r2, #112	; 0x70
 80094e4:	2100      	movs	r1, #0
 80094e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	e000      	b.n	80094ee <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 80094ec:	2302      	movs	r3, #2
  }
}
 80094ee:	0018      	movs	r0, r3
 80094f0:	46bd      	mov	sp, r7
 80094f2:	b008      	add	sp, #32
 80094f4:	bd80      	pop	{r7, pc}
	...

080094f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094f8:	b5b0      	push	{r4, r5, r7, lr}
 80094fa:	b08e      	sub	sp, #56	; 0x38
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8009500:	231b      	movs	r3, #27
 8009502:	2218      	movs	r2, #24
 8009504:	4694      	mov	ip, r2
 8009506:	44bc      	add	ip, r7
 8009508:	4463      	add	r3, ip
 800950a:	2210      	movs	r2, #16
 800950c:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800950e:	2300      	movs	r3, #0
 8009510:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8009512:	2313      	movs	r3, #19
 8009514:	2218      	movs	r2, #24
 8009516:	4694      	mov	ip, r2
 8009518:	44bc      	add	ip, r7
 800951a:	4463      	add	r3, ip
 800951c:	2200      	movs	r2, #0
 800951e:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009520:	2300      	movs	r3, #0
 8009522:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	689a      	ldr	r2, [r3, #8]
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	431a      	orrs	r2, r3
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	431a      	orrs	r2, r3
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	69db      	ldr	r3, [r3, #28]
 8009538:	4313      	orrs	r3, r2
 800953a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4ac8      	ldr	r2, [pc, #800]	; (8009864 <UART_SetConfig+0x36c>)
 8009544:	4013      	ands	r3, r2
 8009546:	0019      	movs	r1, r3
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800954e:	430a      	orrs	r2, r1
 8009550:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	4ac3      	ldr	r2, [pc, #780]	; (8009868 <UART_SetConfig+0x370>)
 800955a:	4013      	ands	r3, r2
 800955c:	0019      	movs	r1, r3
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	68da      	ldr	r2, [r3, #12]
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4abd      	ldr	r2, [pc, #756]	; (800986c <UART_SetConfig+0x374>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d004      	beq.n	8009584 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009580:	4313      	orrs	r3, r2
 8009582:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	4ab9      	ldr	r2, [pc, #740]	; (8009870 <UART_SetConfig+0x378>)
 800958c:	4013      	ands	r3, r2
 800958e:	0019      	movs	r1, r3
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009596:	430a      	orrs	r2, r1
 8009598:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4ab5      	ldr	r2, [pc, #724]	; (8009874 <UART_SetConfig+0x37c>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d134      	bne.n	800960e <UART_SetConfig+0x116>
 80095a4:	4bb4      	ldr	r3, [pc, #720]	; (8009878 <UART_SetConfig+0x380>)
 80095a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095a8:	2203      	movs	r2, #3
 80095aa:	4013      	ands	r3, r2
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d015      	beq.n	80095dc <UART_SetConfig+0xe4>
 80095b0:	d304      	bcc.n	80095bc <UART_SetConfig+0xc4>
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d00a      	beq.n	80095cc <UART_SetConfig+0xd4>
 80095b6:	2b03      	cmp	r3, #3
 80095b8:	d018      	beq.n	80095ec <UART_SetConfig+0xf4>
 80095ba:	e01f      	b.n	80095fc <UART_SetConfig+0x104>
 80095bc:	231b      	movs	r3, #27
 80095be:	2218      	movs	r2, #24
 80095c0:	4694      	mov	ip, r2
 80095c2:	44bc      	add	ip, r7
 80095c4:	4463      	add	r3, ip
 80095c6:	2201      	movs	r2, #1
 80095c8:	701a      	strb	r2, [r3, #0]
 80095ca:	e0ab      	b.n	8009724 <UART_SetConfig+0x22c>
 80095cc:	231b      	movs	r3, #27
 80095ce:	2218      	movs	r2, #24
 80095d0:	4694      	mov	ip, r2
 80095d2:	44bc      	add	ip, r7
 80095d4:	4463      	add	r3, ip
 80095d6:	2202      	movs	r2, #2
 80095d8:	701a      	strb	r2, [r3, #0]
 80095da:	e0a3      	b.n	8009724 <UART_SetConfig+0x22c>
 80095dc:	231b      	movs	r3, #27
 80095de:	2218      	movs	r2, #24
 80095e0:	4694      	mov	ip, r2
 80095e2:	44bc      	add	ip, r7
 80095e4:	4463      	add	r3, ip
 80095e6:	2204      	movs	r2, #4
 80095e8:	701a      	strb	r2, [r3, #0]
 80095ea:	e09b      	b.n	8009724 <UART_SetConfig+0x22c>
 80095ec:	231b      	movs	r3, #27
 80095ee:	2218      	movs	r2, #24
 80095f0:	4694      	mov	ip, r2
 80095f2:	44bc      	add	ip, r7
 80095f4:	4463      	add	r3, ip
 80095f6:	2208      	movs	r2, #8
 80095f8:	701a      	strb	r2, [r3, #0]
 80095fa:	e093      	b.n	8009724 <UART_SetConfig+0x22c>
 80095fc:	231b      	movs	r3, #27
 80095fe:	2218      	movs	r2, #24
 8009600:	4694      	mov	ip, r2
 8009602:	44bc      	add	ip, r7
 8009604:	4463      	add	r3, ip
 8009606:	2210      	movs	r2, #16
 8009608:	701a      	strb	r2, [r3, #0]
 800960a:	46c0      	nop			; (mov r8, r8)
 800960c:	e08a      	b.n	8009724 <UART_SetConfig+0x22c>
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a9a      	ldr	r2, [pc, #616]	; (800987c <UART_SetConfig+0x384>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d137      	bne.n	8009688 <UART_SetConfig+0x190>
 8009618:	4b97      	ldr	r3, [pc, #604]	; (8009878 <UART_SetConfig+0x380>)
 800961a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800961c:	220c      	movs	r2, #12
 800961e:	4013      	ands	r3, r2
 8009620:	2b04      	cmp	r3, #4
 8009622:	d018      	beq.n	8009656 <UART_SetConfig+0x15e>
 8009624:	d802      	bhi.n	800962c <UART_SetConfig+0x134>
 8009626:	2b00      	cmp	r3, #0
 8009628:	d005      	beq.n	8009636 <UART_SetConfig+0x13e>
 800962a:	e024      	b.n	8009676 <UART_SetConfig+0x17e>
 800962c:	2b08      	cmp	r3, #8
 800962e:	d00a      	beq.n	8009646 <UART_SetConfig+0x14e>
 8009630:	2b0c      	cmp	r3, #12
 8009632:	d018      	beq.n	8009666 <UART_SetConfig+0x16e>
 8009634:	e01f      	b.n	8009676 <UART_SetConfig+0x17e>
 8009636:	231b      	movs	r3, #27
 8009638:	2218      	movs	r2, #24
 800963a:	4694      	mov	ip, r2
 800963c:	44bc      	add	ip, r7
 800963e:	4463      	add	r3, ip
 8009640:	2200      	movs	r2, #0
 8009642:	701a      	strb	r2, [r3, #0]
 8009644:	e06e      	b.n	8009724 <UART_SetConfig+0x22c>
 8009646:	231b      	movs	r3, #27
 8009648:	2218      	movs	r2, #24
 800964a:	4694      	mov	ip, r2
 800964c:	44bc      	add	ip, r7
 800964e:	4463      	add	r3, ip
 8009650:	2202      	movs	r2, #2
 8009652:	701a      	strb	r2, [r3, #0]
 8009654:	e066      	b.n	8009724 <UART_SetConfig+0x22c>
 8009656:	231b      	movs	r3, #27
 8009658:	2218      	movs	r2, #24
 800965a:	4694      	mov	ip, r2
 800965c:	44bc      	add	ip, r7
 800965e:	4463      	add	r3, ip
 8009660:	2204      	movs	r2, #4
 8009662:	701a      	strb	r2, [r3, #0]
 8009664:	e05e      	b.n	8009724 <UART_SetConfig+0x22c>
 8009666:	231b      	movs	r3, #27
 8009668:	2218      	movs	r2, #24
 800966a:	4694      	mov	ip, r2
 800966c:	44bc      	add	ip, r7
 800966e:	4463      	add	r3, ip
 8009670:	2208      	movs	r2, #8
 8009672:	701a      	strb	r2, [r3, #0]
 8009674:	e056      	b.n	8009724 <UART_SetConfig+0x22c>
 8009676:	231b      	movs	r3, #27
 8009678:	2218      	movs	r2, #24
 800967a:	4694      	mov	ip, r2
 800967c:	44bc      	add	ip, r7
 800967e:	4463      	add	r3, ip
 8009680:	2210      	movs	r2, #16
 8009682:	701a      	strb	r2, [r3, #0]
 8009684:	46c0      	nop			; (mov r8, r8)
 8009686:	e04d      	b.n	8009724 <UART_SetConfig+0x22c>
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a77      	ldr	r2, [pc, #476]	; (800986c <UART_SetConfig+0x374>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d141      	bne.n	8009716 <UART_SetConfig+0x21e>
 8009692:	4b79      	ldr	r3, [pc, #484]	; (8009878 <UART_SetConfig+0x380>)
 8009694:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009696:	23c0      	movs	r3, #192	; 0xc0
 8009698:	011b      	lsls	r3, r3, #4
 800969a:	4013      	ands	r3, r2
 800969c:	2280      	movs	r2, #128	; 0x80
 800969e:	00d2      	lsls	r2, r2, #3
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d01f      	beq.n	80096e4 <UART_SetConfig+0x1ec>
 80096a4:	2280      	movs	r2, #128	; 0x80
 80096a6:	00d2      	lsls	r2, r2, #3
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d802      	bhi.n	80096b2 <UART_SetConfig+0x1ba>
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d009      	beq.n	80096c4 <UART_SetConfig+0x1cc>
 80096b0:	e028      	b.n	8009704 <UART_SetConfig+0x20c>
 80096b2:	2280      	movs	r2, #128	; 0x80
 80096b4:	0112      	lsls	r2, r2, #4
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d00c      	beq.n	80096d4 <UART_SetConfig+0x1dc>
 80096ba:	22c0      	movs	r2, #192	; 0xc0
 80096bc:	0112      	lsls	r2, r2, #4
 80096be:	4293      	cmp	r3, r2
 80096c0:	d018      	beq.n	80096f4 <UART_SetConfig+0x1fc>
 80096c2:	e01f      	b.n	8009704 <UART_SetConfig+0x20c>
 80096c4:	231b      	movs	r3, #27
 80096c6:	2218      	movs	r2, #24
 80096c8:	4694      	mov	ip, r2
 80096ca:	44bc      	add	ip, r7
 80096cc:	4463      	add	r3, ip
 80096ce:	2200      	movs	r2, #0
 80096d0:	701a      	strb	r2, [r3, #0]
 80096d2:	e027      	b.n	8009724 <UART_SetConfig+0x22c>
 80096d4:	231b      	movs	r3, #27
 80096d6:	2218      	movs	r2, #24
 80096d8:	4694      	mov	ip, r2
 80096da:	44bc      	add	ip, r7
 80096dc:	4463      	add	r3, ip
 80096de:	2202      	movs	r2, #2
 80096e0:	701a      	strb	r2, [r3, #0]
 80096e2:	e01f      	b.n	8009724 <UART_SetConfig+0x22c>
 80096e4:	231b      	movs	r3, #27
 80096e6:	2218      	movs	r2, #24
 80096e8:	4694      	mov	ip, r2
 80096ea:	44bc      	add	ip, r7
 80096ec:	4463      	add	r3, ip
 80096ee:	2204      	movs	r2, #4
 80096f0:	701a      	strb	r2, [r3, #0]
 80096f2:	e017      	b.n	8009724 <UART_SetConfig+0x22c>
 80096f4:	231b      	movs	r3, #27
 80096f6:	2218      	movs	r2, #24
 80096f8:	4694      	mov	ip, r2
 80096fa:	44bc      	add	ip, r7
 80096fc:	4463      	add	r3, ip
 80096fe:	2208      	movs	r2, #8
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	e00f      	b.n	8009724 <UART_SetConfig+0x22c>
 8009704:	231b      	movs	r3, #27
 8009706:	2218      	movs	r2, #24
 8009708:	4694      	mov	ip, r2
 800970a:	44bc      	add	ip, r7
 800970c:	4463      	add	r3, ip
 800970e:	2210      	movs	r2, #16
 8009710:	701a      	strb	r2, [r3, #0]
 8009712:	46c0      	nop			; (mov r8, r8)
 8009714:	e006      	b.n	8009724 <UART_SetConfig+0x22c>
 8009716:	231b      	movs	r3, #27
 8009718:	2218      	movs	r2, #24
 800971a:	4694      	mov	ip, r2
 800971c:	44bc      	add	ip, r7
 800971e:	4463      	add	r3, ip
 8009720:	2210      	movs	r2, #16
 8009722:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a50      	ldr	r2, [pc, #320]	; (800986c <UART_SetConfig+0x374>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d000      	beq.n	8009730 <UART_SetConfig+0x238>
 800972e:	e083      	b.n	8009838 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009730:	231b      	movs	r3, #27
 8009732:	2218      	movs	r2, #24
 8009734:	4694      	mov	ip, r2
 8009736:	44bc      	add	ip, r7
 8009738:	4463      	add	r3, ip
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	2b02      	cmp	r3, #2
 800973e:	d00d      	beq.n	800975c <UART_SetConfig+0x264>
 8009740:	dc02      	bgt.n	8009748 <UART_SetConfig+0x250>
 8009742:	2b00      	cmp	r3, #0
 8009744:	d005      	beq.n	8009752 <UART_SetConfig+0x25a>
 8009746:	e01d      	b.n	8009784 <UART_SetConfig+0x28c>
 8009748:	2b04      	cmp	r3, #4
 800974a:	d012      	beq.n	8009772 <UART_SetConfig+0x27a>
 800974c:	2b08      	cmp	r3, #8
 800974e:	d015      	beq.n	800977c <UART_SetConfig+0x284>
 8009750:	e018      	b.n	8009784 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8009752:	f7ff f8c3 	bl	80088dc <HAL_RCC_GetPCLK1Freq>
 8009756:	0003      	movs	r3, r0
 8009758:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800975a:	e01b      	b.n	8009794 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800975c:	4b46      	ldr	r3, [pc, #280]	; (8009878 <UART_SetConfig+0x380>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2210      	movs	r2, #16
 8009762:	4013      	ands	r3, r2
 8009764:	d002      	beq.n	800976c <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8009766:	4b46      	ldr	r3, [pc, #280]	; (8009880 <UART_SetConfig+0x388>)
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800976a:	e013      	b.n	8009794 <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800976c:	4b45      	ldr	r3, [pc, #276]	; (8009884 <UART_SetConfig+0x38c>)
 800976e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009770:	e010      	b.n	8009794 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8009772:	f7ff f825 	bl	80087c0 <HAL_RCC_GetSysClockFreq>
 8009776:	0003      	movs	r3, r0
 8009778:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800977a:	e00b      	b.n	8009794 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800977c:	2380      	movs	r3, #128	; 0x80
 800977e:	021b      	lsls	r3, r3, #8
 8009780:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009782:	e007      	b.n	8009794 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009784:	2313      	movs	r3, #19
 8009786:	2218      	movs	r2, #24
 8009788:	4694      	mov	ip, r2
 800978a:	44bc      	add	ip, r7
 800978c:	4463      	add	r3, ip
 800978e:	2201      	movs	r2, #1
 8009790:	701a      	strb	r2, [r3, #0]
        break;
 8009792:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	2b00      	cmp	r3, #0
 8009798:	d100      	bne.n	800979c <UART_SetConfig+0x2a4>
 800979a:	e1a6      	b.n	8009aea <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	685a      	ldr	r2, [r3, #4]
 80097a0:	0013      	movs	r3, r2
 80097a2:	005b      	lsls	r3, r3, #1
 80097a4:	189b      	adds	r3, r3, r2
 80097a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d305      	bcc.n	80097b8 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d907      	bls.n	80097c8 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 80097b8:	2313      	movs	r3, #19
 80097ba:	2218      	movs	r2, #24
 80097bc:	4694      	mov	ip, r2
 80097be:	44bc      	add	ip, r7
 80097c0:	4463      	add	r3, ip
 80097c2:	2201      	movs	r2, #1
 80097c4:	701a      	strb	r2, [r3, #0]
 80097c6:	e190      	b.n	8009aea <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	613b      	str	r3, [r7, #16]
 80097cc:	2300      	movs	r3, #0
 80097ce:	617b      	str	r3, [r7, #20]
 80097d0:	6939      	ldr	r1, [r7, #16]
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	000b      	movs	r3, r1
 80097d6:	0e1b      	lsrs	r3, r3, #24
 80097d8:	0010      	movs	r0, r2
 80097da:	0205      	lsls	r5, r0, #8
 80097dc:	431d      	orrs	r5, r3
 80097de:	000b      	movs	r3, r1
 80097e0:	021c      	lsls	r4, r3, #8
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	085b      	lsrs	r3, r3, #1
 80097e8:	60bb      	str	r3, [r7, #8]
 80097ea:	2300      	movs	r3, #0
 80097ec:	60fb      	str	r3, [r7, #12]
 80097ee:	68b8      	ldr	r0, [r7, #8]
 80097f0:	68f9      	ldr	r1, [r7, #12]
 80097f2:	1900      	adds	r0, r0, r4
 80097f4:	4169      	adcs	r1, r5
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	603b      	str	r3, [r7, #0]
 80097fc:	2300      	movs	r3, #0
 80097fe:	607b      	str	r3, [r7, #4]
 8009800:	683a      	ldr	r2, [r7, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f7f6 fe3c 	bl	8000480 <__aeabi_uldivmod>
 8009808:	0003      	movs	r3, r0
 800980a:	000c      	movs	r4, r1
 800980c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800980e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009810:	4a1d      	ldr	r2, [pc, #116]	; (8009888 <UART_SetConfig+0x390>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d908      	bls.n	8009828 <UART_SetConfig+0x330>
 8009816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009818:	4a1c      	ldr	r2, [pc, #112]	; (800988c <UART_SetConfig+0x394>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d804      	bhi.n	8009828 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009824:	60da      	str	r2, [r3, #12]
 8009826:	e160      	b.n	8009aea <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 8009828:	2313      	movs	r3, #19
 800982a:	2218      	movs	r2, #24
 800982c:	4694      	mov	ip, r2
 800982e:	44bc      	add	ip, r7
 8009830:	4463      	add	r3, ip
 8009832:	2201      	movs	r2, #1
 8009834:	701a      	strb	r2, [r3, #0]
 8009836:	e158      	b.n	8009aea <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	69da      	ldr	r2, [r3, #28]
 800983c:	2380      	movs	r3, #128	; 0x80
 800983e:	021b      	lsls	r3, r3, #8
 8009840:	429a      	cmp	r2, r3
 8009842:	d000      	beq.n	8009846 <UART_SetConfig+0x34e>
 8009844:	e0c3      	b.n	80099ce <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 8009846:	231b      	movs	r3, #27
 8009848:	2218      	movs	r2, #24
 800984a:	4694      	mov	ip, r2
 800984c:	44bc      	add	ip, r7
 800984e:	4463      	add	r3, ip
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	2b08      	cmp	r3, #8
 8009854:	d900      	bls.n	8009858 <UART_SetConfig+0x360>
 8009856:	e086      	b.n	8009966 <UART_SetConfig+0x46e>
 8009858:	009a      	lsls	r2, r3, #2
 800985a:	4b0d      	ldr	r3, [pc, #52]	; (8009890 <UART_SetConfig+0x398>)
 800985c:	18d3      	adds	r3, r2, r3
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	469f      	mov	pc, r3
 8009862:	46c0      	nop			; (mov r8, r8)
 8009864:	efff69f3 	.word	0xefff69f3
 8009868:	ffffcfff 	.word	0xffffcfff
 800986c:	40004800 	.word	0x40004800
 8009870:	fffff4ff 	.word	0xfffff4ff
 8009874:	40013800 	.word	0x40013800
 8009878:	40021000 	.word	0x40021000
 800987c:	40004400 	.word	0x40004400
 8009880:	003d0900 	.word	0x003d0900
 8009884:	00f42400 	.word	0x00f42400
 8009888:	000002ff 	.word	0x000002ff
 800988c:	000fffff 	.word	0x000fffff
 8009890:	0800d3f8 	.word	0x0800d3f8
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009894:	f7ff f822 	bl	80088dc <HAL_RCC_GetPCLK1Freq>
 8009898:	0003      	movs	r3, r0
 800989a:	005a      	lsls	r2, r3, #1
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	085b      	lsrs	r3, r3, #1
 80098a2:	18d2      	adds	r2, r2, r3
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	0019      	movs	r1, r3
 80098aa:	0010      	movs	r0, r2
 80098ac:	f7f6 fc34 	bl	8000118 <__udivsi3>
 80098b0:	0003      	movs	r3, r0
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098b6:	e05e      	b.n	8009976 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80098b8:	f7ff f826 	bl	8008908 <HAL_RCC_GetPCLK2Freq>
 80098bc:	0003      	movs	r3, r0
 80098be:	005a      	lsls	r2, r3, #1
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	085b      	lsrs	r3, r3, #1
 80098c6:	18d2      	adds	r2, r2, r3
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	0019      	movs	r1, r3
 80098ce:	0010      	movs	r0, r2
 80098d0:	f7f6 fc22 	bl	8000118 <__udivsi3>
 80098d4:	0003      	movs	r3, r0
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098da:	e04c      	b.n	8009976 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098dc:	4b8b      	ldr	r3, [pc, #556]	; (8009b0c <UART_SetConfig+0x614>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2210      	movs	r2, #16
 80098e2:	4013      	ands	r3, r2
 80098e4:	d00e      	beq.n	8009904 <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	085b      	lsrs	r3, r3, #1
 80098ec:	4a88      	ldr	r2, [pc, #544]	; (8009b10 <UART_SetConfig+0x618>)
 80098ee:	189a      	adds	r2, r3, r2
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	0019      	movs	r1, r3
 80098f6:	0010      	movs	r0, r2
 80098f8:	f7f6 fc0e 	bl	8000118 <__udivsi3>
 80098fc:	0003      	movs	r3, r0
 80098fe:	b29b      	uxth	r3, r3
 8009900:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8009902:	e038      	b.n	8009976 <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	085b      	lsrs	r3, r3, #1
 800990a:	4a82      	ldr	r2, [pc, #520]	; (8009b14 <UART_SetConfig+0x61c>)
 800990c:	189a      	adds	r2, r3, r2
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	0019      	movs	r1, r3
 8009914:	0010      	movs	r0, r2
 8009916:	f7f6 fbff 	bl	8000118 <__udivsi3>
 800991a:	0003      	movs	r3, r0
 800991c:	b29b      	uxth	r3, r3
 800991e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009920:	e029      	b.n	8009976 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009922:	f7fe ff4d 	bl	80087c0 <HAL_RCC_GetSysClockFreq>
 8009926:	0003      	movs	r3, r0
 8009928:	005a      	lsls	r2, r3, #1
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	085b      	lsrs	r3, r3, #1
 8009930:	18d2      	adds	r2, r2, r3
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	0019      	movs	r1, r3
 8009938:	0010      	movs	r0, r2
 800993a:	f7f6 fbed 	bl	8000118 <__udivsi3>
 800993e:	0003      	movs	r3, r0
 8009940:	b29b      	uxth	r3, r3
 8009942:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009944:	e017      	b.n	8009976 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	085b      	lsrs	r3, r3, #1
 800994c:	2280      	movs	r2, #128	; 0x80
 800994e:	0252      	lsls	r2, r2, #9
 8009950:	189a      	adds	r2, r3, r2
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	0019      	movs	r1, r3
 8009958:	0010      	movs	r0, r2
 800995a:	f7f6 fbdd 	bl	8000118 <__udivsi3>
 800995e:	0003      	movs	r3, r0
 8009960:	b29b      	uxth	r3, r3
 8009962:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009964:	e007      	b.n	8009976 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009966:	2313      	movs	r3, #19
 8009968:	2218      	movs	r2, #24
 800996a:	4694      	mov	ip, r2
 800996c:	44bc      	add	ip, r7
 800996e:	4463      	add	r3, ip
 8009970:	2201      	movs	r2, #1
 8009972:	701a      	strb	r2, [r3, #0]
        break;
 8009974:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009978:	2b0f      	cmp	r3, #15
 800997a:	d920      	bls.n	80099be <UART_SetConfig+0x4c6>
 800997c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997e:	4a66      	ldr	r2, [pc, #408]	; (8009b18 <UART_SetConfig+0x620>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d81c      	bhi.n	80099be <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009986:	b29a      	uxth	r2, r3
 8009988:	200a      	movs	r0, #10
 800998a:	2418      	movs	r4, #24
 800998c:	193b      	adds	r3, r7, r4
 800998e:	181b      	adds	r3, r3, r0
 8009990:	210f      	movs	r1, #15
 8009992:	438a      	bics	r2, r1
 8009994:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009998:	085b      	lsrs	r3, r3, #1
 800999a:	b29b      	uxth	r3, r3
 800999c:	2207      	movs	r2, #7
 800999e:	4013      	ands	r3, r2
 80099a0:	b299      	uxth	r1, r3
 80099a2:	193b      	adds	r3, r7, r4
 80099a4:	181b      	adds	r3, r3, r0
 80099a6:	193a      	adds	r2, r7, r4
 80099a8:	1812      	adds	r2, r2, r0
 80099aa:	8812      	ldrh	r2, [r2, #0]
 80099ac:	430a      	orrs	r2, r1
 80099ae:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	193a      	adds	r2, r7, r4
 80099b6:	1812      	adds	r2, r2, r0
 80099b8:	8812      	ldrh	r2, [r2, #0]
 80099ba:	60da      	str	r2, [r3, #12]
 80099bc:	e095      	b.n	8009aea <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 80099be:	2313      	movs	r3, #19
 80099c0:	2218      	movs	r2, #24
 80099c2:	4694      	mov	ip, r2
 80099c4:	44bc      	add	ip, r7
 80099c6:	4463      	add	r3, ip
 80099c8:	2201      	movs	r2, #1
 80099ca:	701a      	strb	r2, [r3, #0]
 80099cc:	e08d      	b.n	8009aea <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 80099ce:	231b      	movs	r3, #27
 80099d0:	2218      	movs	r2, #24
 80099d2:	4694      	mov	ip, r2
 80099d4:	44bc      	add	ip, r7
 80099d6:	4463      	add	r3, ip
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2b08      	cmp	r3, #8
 80099dc:	d86a      	bhi.n	8009ab4 <UART_SetConfig+0x5bc>
 80099de:	009a      	lsls	r2, r3, #2
 80099e0:	4b4e      	ldr	r3, [pc, #312]	; (8009b1c <UART_SetConfig+0x624>)
 80099e2:	18d3      	adds	r3, r2, r3
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80099e8:	f7fe ff78 	bl	80088dc <HAL_RCC_GetPCLK1Freq>
 80099ec:	0002      	movs	r2, r0
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	085b      	lsrs	r3, r3, #1
 80099f4:	18d2      	adds	r2, r2, r3
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	0019      	movs	r1, r3
 80099fc:	0010      	movs	r0, r2
 80099fe:	f7f6 fb8b 	bl	8000118 <__udivsi3>
 8009a02:	0003      	movs	r3, r0
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a08:	e05c      	b.n	8009ac4 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009a0a:	f7fe ff7d 	bl	8008908 <HAL_RCC_GetPCLK2Freq>
 8009a0e:	0002      	movs	r2, r0
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	085b      	lsrs	r3, r3, #1
 8009a16:	18d2      	adds	r2, r2, r3
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	0019      	movs	r1, r3
 8009a1e:	0010      	movs	r0, r2
 8009a20:	f7f6 fb7a 	bl	8000118 <__udivsi3>
 8009a24:	0003      	movs	r3, r0
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a2a:	e04b      	b.n	8009ac4 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a2c:	4b37      	ldr	r3, [pc, #220]	; (8009b0c <UART_SetConfig+0x614>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2210      	movs	r2, #16
 8009a32:	4013      	ands	r3, r2
 8009a34:	d00e      	beq.n	8009a54 <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	085b      	lsrs	r3, r3, #1
 8009a3c:	4a38      	ldr	r2, [pc, #224]	; (8009b20 <UART_SetConfig+0x628>)
 8009a3e:	189a      	adds	r2, r3, r2
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	0019      	movs	r1, r3
 8009a46:	0010      	movs	r0, r2
 8009a48:	f7f6 fb66 	bl	8000118 <__udivsi3>
 8009a4c:	0003      	movs	r3, r0
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8009a52:	e037      	b.n	8009ac4 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	085b      	lsrs	r3, r3, #1
 8009a5a:	4a32      	ldr	r2, [pc, #200]	; (8009b24 <UART_SetConfig+0x62c>)
 8009a5c:	189a      	adds	r2, r3, r2
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	0019      	movs	r1, r3
 8009a64:	0010      	movs	r0, r2
 8009a66:	f7f6 fb57 	bl	8000118 <__udivsi3>
 8009a6a:	0003      	movs	r3, r0
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a70:	e028      	b.n	8009ac4 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009a72:	f7fe fea5 	bl	80087c0 <HAL_RCC_GetSysClockFreq>
 8009a76:	0002      	movs	r2, r0
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	085b      	lsrs	r3, r3, #1
 8009a7e:	18d2      	adds	r2, r2, r3
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	0019      	movs	r1, r3
 8009a86:	0010      	movs	r0, r2
 8009a88:	f7f6 fb46 	bl	8000118 <__udivsi3>
 8009a8c:	0003      	movs	r3, r0
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a92:	e017      	b.n	8009ac4 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	085b      	lsrs	r3, r3, #1
 8009a9a:	2280      	movs	r2, #128	; 0x80
 8009a9c:	0212      	lsls	r2, r2, #8
 8009a9e:	189a      	adds	r2, r3, r2
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	0019      	movs	r1, r3
 8009aa6:	0010      	movs	r0, r2
 8009aa8:	f7f6 fb36 	bl	8000118 <__udivsi3>
 8009aac:	0003      	movs	r3, r0
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ab2:	e007      	b.n	8009ac4 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009ab4:	2313      	movs	r3, #19
 8009ab6:	2218      	movs	r2, #24
 8009ab8:	4694      	mov	ip, r2
 8009aba:	44bc      	add	ip, r7
 8009abc:	4463      	add	r3, ip
 8009abe:	2201      	movs	r2, #1
 8009ac0:	701a      	strb	r2, [r3, #0]
        break;
 8009ac2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac6:	2b0f      	cmp	r3, #15
 8009ac8:	d908      	bls.n	8009adc <UART_SetConfig+0x5e4>
 8009aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009acc:	4a12      	ldr	r2, [pc, #72]	; (8009b18 <UART_SetConfig+0x620>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d804      	bhi.n	8009adc <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ad8:	60da      	str	r2, [r3, #12]
 8009ada:	e006      	b.n	8009aea <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8009adc:	2313      	movs	r3, #19
 8009ade:	2218      	movs	r2, #24
 8009ae0:	4694      	mov	ip, r2
 8009ae2:	44bc      	add	ip, r7
 8009ae4:	4463      	add	r3, ip
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	2200      	movs	r2, #0
 8009aee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	2200      	movs	r2, #0
 8009af4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009af6:	2313      	movs	r3, #19
 8009af8:	2218      	movs	r2, #24
 8009afa:	4694      	mov	ip, r2
 8009afc:	44bc      	add	ip, r7
 8009afe:	4463      	add	r3, ip
 8009b00:	781b      	ldrb	r3, [r3, #0]
}
 8009b02:	0018      	movs	r0, r3
 8009b04:	46bd      	mov	sp, r7
 8009b06:	b00e      	add	sp, #56	; 0x38
 8009b08:	bdb0      	pop	{r4, r5, r7, pc}
 8009b0a:	46c0      	nop			; (mov r8, r8)
 8009b0c:	40021000 	.word	0x40021000
 8009b10:	007a1200 	.word	0x007a1200
 8009b14:	01e84800 	.word	0x01e84800
 8009b18:	0000ffff 	.word	0x0000ffff
 8009b1c:	0800d41c 	.word	0x0800d41c
 8009b20:	003d0900 	.word	0x003d0900
 8009b24:	00f42400 	.word	0x00f42400

08009b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b34:	2201      	movs	r2, #1
 8009b36:	4013      	ands	r3, r2
 8009b38:	d00b      	beq.n	8009b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	4a4a      	ldr	r2, [pc, #296]	; (8009c6c <UART_AdvFeatureConfig+0x144>)
 8009b42:	4013      	ands	r3, r2
 8009b44:	0019      	movs	r1, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b56:	2202      	movs	r2, #2
 8009b58:	4013      	ands	r3, r2
 8009b5a:	d00b      	beq.n	8009b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	4a43      	ldr	r2, [pc, #268]	; (8009c70 <UART_AdvFeatureConfig+0x148>)
 8009b64:	4013      	ands	r3, r2
 8009b66:	0019      	movs	r1, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	430a      	orrs	r2, r1
 8009b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b78:	2204      	movs	r2, #4
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	d00b      	beq.n	8009b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	4a3b      	ldr	r2, [pc, #236]	; (8009c74 <UART_AdvFeatureConfig+0x14c>)
 8009b86:	4013      	ands	r3, r2
 8009b88:	0019      	movs	r1, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	430a      	orrs	r2, r1
 8009b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	2208      	movs	r2, #8
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	d00b      	beq.n	8009bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	4a34      	ldr	r2, [pc, #208]	; (8009c78 <UART_AdvFeatureConfig+0x150>)
 8009ba8:	4013      	ands	r3, r2
 8009baa:	0019      	movs	r1, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbc:	2210      	movs	r2, #16
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	d00b      	beq.n	8009bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	4a2c      	ldr	r2, [pc, #176]	; (8009c7c <UART_AdvFeatureConfig+0x154>)
 8009bca:	4013      	ands	r3, r2
 8009bcc:	0019      	movs	r1, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bde:	2220      	movs	r2, #32
 8009be0:	4013      	ands	r3, r2
 8009be2:	d00b      	beq.n	8009bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	4a25      	ldr	r2, [pc, #148]	; (8009c80 <UART_AdvFeatureConfig+0x158>)
 8009bec:	4013      	ands	r3, r2
 8009bee:	0019      	movs	r1, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c00:	2240      	movs	r2, #64	; 0x40
 8009c02:	4013      	ands	r3, r2
 8009c04:	d01d      	beq.n	8009c42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	4a1d      	ldr	r2, [pc, #116]	; (8009c84 <UART_AdvFeatureConfig+0x15c>)
 8009c0e:	4013      	ands	r3, r2
 8009c10:	0019      	movs	r1, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c22:	2380      	movs	r3, #128	; 0x80
 8009c24:	035b      	lsls	r3, r3, #13
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d10b      	bne.n	8009c42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	4a15      	ldr	r2, [pc, #84]	; (8009c88 <UART_AdvFeatureConfig+0x160>)
 8009c32:	4013      	ands	r3, r2
 8009c34:	0019      	movs	r1, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c46:	2280      	movs	r2, #128	; 0x80
 8009c48:	4013      	ands	r3, r2
 8009c4a:	d00b      	beq.n	8009c64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	4a0e      	ldr	r2, [pc, #56]	; (8009c8c <UART_AdvFeatureConfig+0x164>)
 8009c54:	4013      	ands	r3, r2
 8009c56:	0019      	movs	r1, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	430a      	orrs	r2, r1
 8009c62:	605a      	str	r2, [r3, #4]
  }
}
 8009c64:	46c0      	nop			; (mov r8, r8)
 8009c66:	46bd      	mov	sp, r7
 8009c68:	b002      	add	sp, #8
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	fffdffff 	.word	0xfffdffff
 8009c70:	fffeffff 	.word	0xfffeffff
 8009c74:	fffbffff 	.word	0xfffbffff
 8009c78:	ffff7fff 	.word	0xffff7fff
 8009c7c:	ffffefff 	.word	0xffffefff
 8009c80:	ffffdfff 	.word	0xffffdfff
 8009c84:	ffefffff 	.word	0xffefffff
 8009c88:	ff9fffff 	.word	0xff9fffff
 8009c8c:	fff7ffff 	.word	0xfff7ffff

08009c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af02      	add	r7, sp, #8
 8009c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009c9e:	f7fc fd1f 	bl	80066e0 <HAL_GetTick>
 8009ca2:	0003      	movs	r3, r0
 8009ca4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2208      	movs	r2, #8
 8009cae:	4013      	ands	r3, r2
 8009cb0:	2b08      	cmp	r3, #8
 8009cb2:	d10d      	bne.n	8009cd0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	2380      	movs	r3, #128	; 0x80
 8009cb8:	0399      	lsls	r1, r3, #14
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	4b16      	ldr	r3, [pc, #88]	; (8009d18 <UART_CheckIdleState+0x88>)
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	0013      	movs	r3, r2
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f000 f82a 	bl	8009d1c <UART_WaitOnFlagUntilTimeout>
 8009cc8:	1e03      	subs	r3, r0, #0
 8009cca:	d001      	beq.n	8009cd0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e01f      	b.n	8009d10 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2204      	movs	r2, #4
 8009cd8:	4013      	ands	r3, r2
 8009cda:	2b04      	cmp	r3, #4
 8009cdc:	d10d      	bne.n	8009cfa <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	2380      	movs	r3, #128	; 0x80
 8009ce2:	03d9      	lsls	r1, r3, #15
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <UART_CheckIdleState+0x88>)
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	0013      	movs	r3, r2
 8009cec:	2200      	movs	r2, #0
 8009cee:	f000 f815 	bl	8009d1c <UART_WaitOnFlagUntilTimeout>
 8009cf2:	1e03      	subs	r3, r0, #0
 8009cf4:	d001      	beq.n	8009cfa <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	e00a      	b.n	8009d10 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2220      	movs	r2, #32
 8009cfe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2220      	movs	r2, #32
 8009d04:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2270      	movs	r2, #112	; 0x70
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	0018      	movs	r0, r3
 8009d12:	46bd      	mov	sp, r7
 8009d14:	b004      	add	sp, #16
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	01ffffff 	.word	0x01ffffff

08009d1c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	603b      	str	r3, [r7, #0]
 8009d28:	1dfb      	adds	r3, r7, #7
 8009d2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d2c:	e029      	b.n	8009d82 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	3301      	adds	r3, #1
 8009d32:	d026      	beq.n	8009d82 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d34:	f7fc fcd4 	bl	80066e0 <HAL_GetTick>
 8009d38:	0002      	movs	r2, r0
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	69ba      	ldr	r2, [r7, #24]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d302      	bcc.n	8009d4a <UART_WaitOnFlagUntilTimeout+0x2e>
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d11b      	bne.n	8009d82 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4915      	ldr	r1, [pc, #84]	; (8009dac <UART_WaitOnFlagUntilTimeout+0x90>)
 8009d56:	400a      	ands	r2, r1
 8009d58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689a      	ldr	r2, [r3, #8]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2101      	movs	r1, #1
 8009d66:	438a      	bics	r2, r1
 8009d68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2220      	movs	r2, #32
 8009d6e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2220      	movs	r2, #32
 8009d74:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2270      	movs	r2, #112	; 0x70
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	e00f      	b.n	8009da2 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	1ad3      	subs	r3, r2, r3
 8009d90:	425a      	negs	r2, r3
 8009d92:	4153      	adcs	r3, r2
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	001a      	movs	r2, r3
 8009d98:	1dfb      	adds	r3, r7, #7
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d0c6      	beq.n	8009d2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	0018      	movs	r0, r3
 8009da4:	46bd      	mov	sp, r7
 8009da6:	b004      	add	sp, #16
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	46c0      	nop			; (mov r8, r8)
 8009dac:	fffffe5f 	.word	0xfffffe5f

08009db0 <__errno>:
 8009db0:	4b01      	ldr	r3, [pc, #4]	; (8009db8 <__errno+0x8>)
 8009db2:	6818      	ldr	r0, [r3, #0]
 8009db4:	4770      	bx	lr
 8009db6:	46c0      	nop			; (mov r8, r8)
 8009db8:	20000038 	.word	0x20000038

08009dbc <__libc_init_array>:
 8009dbc:	b570      	push	{r4, r5, r6, lr}
 8009dbe:	2600      	movs	r6, #0
 8009dc0:	4d0c      	ldr	r5, [pc, #48]	; (8009df4 <__libc_init_array+0x38>)
 8009dc2:	4c0d      	ldr	r4, [pc, #52]	; (8009df8 <__libc_init_array+0x3c>)
 8009dc4:	1b64      	subs	r4, r4, r5
 8009dc6:	10a4      	asrs	r4, r4, #2
 8009dc8:	42a6      	cmp	r6, r4
 8009dca:	d109      	bne.n	8009de0 <__libc_init_array+0x24>
 8009dcc:	2600      	movs	r6, #0
 8009dce:	f001 f95d 	bl	800b08c <_init>
 8009dd2:	4d0a      	ldr	r5, [pc, #40]	; (8009dfc <__libc_init_array+0x40>)
 8009dd4:	4c0a      	ldr	r4, [pc, #40]	; (8009e00 <__libc_init_array+0x44>)
 8009dd6:	1b64      	subs	r4, r4, r5
 8009dd8:	10a4      	asrs	r4, r4, #2
 8009dda:	42a6      	cmp	r6, r4
 8009ddc:	d105      	bne.n	8009dea <__libc_init_array+0x2e>
 8009dde:	bd70      	pop	{r4, r5, r6, pc}
 8009de0:	00b3      	lsls	r3, r6, #2
 8009de2:	58eb      	ldr	r3, [r5, r3]
 8009de4:	4798      	blx	r3
 8009de6:	3601      	adds	r6, #1
 8009de8:	e7ee      	b.n	8009dc8 <__libc_init_array+0xc>
 8009dea:	00b3      	lsls	r3, r6, #2
 8009dec:	58eb      	ldr	r3, [r5, r3]
 8009dee:	4798      	blx	r3
 8009df0:	3601      	adds	r6, #1
 8009df2:	e7f2      	b.n	8009dda <__libc_init_array+0x1e>
 8009df4:	0800d604 	.word	0x0800d604
 8009df8:	0800d604 	.word	0x0800d604
 8009dfc:	0800d604 	.word	0x0800d604
 8009e00:	0800d608 	.word	0x0800d608

08009e04 <memset>:
 8009e04:	0003      	movs	r3, r0
 8009e06:	1812      	adds	r2, r2, r0
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d100      	bne.n	8009e0e <memset+0xa>
 8009e0c:	4770      	bx	lr
 8009e0e:	7019      	strb	r1, [r3, #0]
 8009e10:	3301      	adds	r3, #1
 8009e12:	e7f9      	b.n	8009e08 <memset+0x4>

08009e14 <siprintf>:
 8009e14:	b40e      	push	{r1, r2, r3}
 8009e16:	b500      	push	{lr}
 8009e18:	490b      	ldr	r1, [pc, #44]	; (8009e48 <siprintf+0x34>)
 8009e1a:	b09c      	sub	sp, #112	; 0x70
 8009e1c:	ab1d      	add	r3, sp, #116	; 0x74
 8009e1e:	9002      	str	r0, [sp, #8]
 8009e20:	9006      	str	r0, [sp, #24]
 8009e22:	9107      	str	r1, [sp, #28]
 8009e24:	9104      	str	r1, [sp, #16]
 8009e26:	4809      	ldr	r0, [pc, #36]	; (8009e4c <siprintf+0x38>)
 8009e28:	4909      	ldr	r1, [pc, #36]	; (8009e50 <siprintf+0x3c>)
 8009e2a:	cb04      	ldmia	r3!, {r2}
 8009e2c:	9105      	str	r1, [sp, #20]
 8009e2e:	6800      	ldr	r0, [r0, #0]
 8009e30:	a902      	add	r1, sp, #8
 8009e32:	9301      	str	r3, [sp, #4]
 8009e34:	f000 f8ae 	bl	8009f94 <_svfiprintf_r>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	9a02      	ldr	r2, [sp, #8]
 8009e3c:	7013      	strb	r3, [r2, #0]
 8009e3e:	b01c      	add	sp, #112	; 0x70
 8009e40:	bc08      	pop	{r3}
 8009e42:	b003      	add	sp, #12
 8009e44:	4718      	bx	r3
 8009e46:	46c0      	nop			; (mov r8, r8)
 8009e48:	7fffffff 	.word	0x7fffffff
 8009e4c:	20000038 	.word	0x20000038
 8009e50:	ffff0208 	.word	0xffff0208

08009e54 <siscanf>:
 8009e54:	b40e      	push	{r1, r2, r3}
 8009e56:	2381      	movs	r3, #129	; 0x81
 8009e58:	b570      	push	{r4, r5, r6, lr}
 8009e5a:	b09d      	sub	sp, #116	; 0x74
 8009e5c:	ac02      	add	r4, sp, #8
 8009e5e:	ad21      	add	r5, sp, #132	; 0x84
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	cd40      	ldmia	r5!, {r6}
 8009e64:	81a3      	strh	r3, [r4, #12]
 8009e66:	9002      	str	r0, [sp, #8]
 8009e68:	9006      	str	r0, [sp, #24]
 8009e6a:	f7f6 f94d 	bl	8000108 <strlen>
 8009e6e:	4b0b      	ldr	r3, [pc, #44]	; (8009e9c <siscanf+0x48>)
 8009e70:	6060      	str	r0, [r4, #4]
 8009e72:	6263      	str	r3, [r4, #36]	; 0x24
 8009e74:	2300      	movs	r3, #0
 8009e76:	6160      	str	r0, [r4, #20]
 8009e78:	4809      	ldr	r0, [pc, #36]	; (8009ea0 <siscanf+0x4c>)
 8009e7a:	6363      	str	r3, [r4, #52]	; 0x34
 8009e7c:	64a3      	str	r3, [r4, #72]	; 0x48
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	81e3      	strh	r3, [r4, #14]
 8009e82:	0032      	movs	r2, r6
 8009e84:	002b      	movs	r3, r5
 8009e86:	0021      	movs	r1, r4
 8009e88:	6800      	ldr	r0, [r0, #0]
 8009e8a:	9501      	str	r5, [sp, #4]
 8009e8c:	f000 f9dc 	bl	800a248 <__ssvfiscanf_r>
 8009e90:	b01d      	add	sp, #116	; 0x74
 8009e92:	bc70      	pop	{r4, r5, r6}
 8009e94:	bc08      	pop	{r3}
 8009e96:	b003      	add	sp, #12
 8009e98:	4718      	bx	r3
 8009e9a:	46c0      	nop			; (mov r8, r8)
 8009e9c:	08009ea5 	.word	0x08009ea5
 8009ea0:	20000038 	.word	0x20000038

08009ea4 <__seofread>:
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	4770      	bx	lr

08009ea8 <strncpy>:
 8009ea8:	b530      	push	{r4, r5, lr}
 8009eaa:	0005      	movs	r5, r0
 8009eac:	2a00      	cmp	r2, #0
 8009eae:	d100      	bne.n	8009eb2 <strncpy+0xa>
 8009eb0:	bd30      	pop	{r4, r5, pc}
 8009eb2:	780c      	ldrb	r4, [r1, #0]
 8009eb4:	3a01      	subs	r2, #1
 8009eb6:	1c6b      	adds	r3, r5, #1
 8009eb8:	702c      	strb	r4, [r5, #0]
 8009eba:	3101      	adds	r1, #1
 8009ebc:	2c00      	cmp	r4, #0
 8009ebe:	d105      	bne.n	8009ecc <strncpy+0x24>
 8009ec0:	189a      	adds	r2, r3, r2
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d0f4      	beq.n	8009eb0 <strncpy+0x8>
 8009ec6:	701c      	strb	r4, [r3, #0]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	e7fa      	b.n	8009ec2 <strncpy+0x1a>
 8009ecc:	001d      	movs	r5, r3
 8009ece:	e7ed      	b.n	8009eac <strncpy+0x4>

08009ed0 <__ssputs_r>:
 8009ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ed2:	688e      	ldr	r6, [r1, #8]
 8009ed4:	b085      	sub	sp, #20
 8009ed6:	0007      	movs	r7, r0
 8009ed8:	000c      	movs	r4, r1
 8009eda:	9203      	str	r2, [sp, #12]
 8009edc:	9301      	str	r3, [sp, #4]
 8009ede:	429e      	cmp	r6, r3
 8009ee0:	d83c      	bhi.n	8009f5c <__ssputs_r+0x8c>
 8009ee2:	2390      	movs	r3, #144	; 0x90
 8009ee4:	898a      	ldrh	r2, [r1, #12]
 8009ee6:	00db      	lsls	r3, r3, #3
 8009ee8:	421a      	tst	r2, r3
 8009eea:	d034      	beq.n	8009f56 <__ssputs_r+0x86>
 8009eec:	2503      	movs	r5, #3
 8009eee:	6909      	ldr	r1, [r1, #16]
 8009ef0:	6823      	ldr	r3, [r4, #0]
 8009ef2:	1a5b      	subs	r3, r3, r1
 8009ef4:	9302      	str	r3, [sp, #8]
 8009ef6:	6963      	ldr	r3, [r4, #20]
 8009ef8:	9802      	ldr	r0, [sp, #8]
 8009efa:	435d      	muls	r5, r3
 8009efc:	0feb      	lsrs	r3, r5, #31
 8009efe:	195d      	adds	r5, r3, r5
 8009f00:	9b01      	ldr	r3, [sp, #4]
 8009f02:	106d      	asrs	r5, r5, #1
 8009f04:	3301      	adds	r3, #1
 8009f06:	181b      	adds	r3, r3, r0
 8009f08:	42ab      	cmp	r3, r5
 8009f0a:	d900      	bls.n	8009f0e <__ssputs_r+0x3e>
 8009f0c:	001d      	movs	r5, r3
 8009f0e:	0553      	lsls	r3, r2, #21
 8009f10:	d532      	bpl.n	8009f78 <__ssputs_r+0xa8>
 8009f12:	0029      	movs	r1, r5
 8009f14:	0038      	movs	r0, r7
 8009f16:	f001 f80d 	bl	800af34 <_malloc_r>
 8009f1a:	1e06      	subs	r6, r0, #0
 8009f1c:	d109      	bne.n	8009f32 <__ssputs_r+0x62>
 8009f1e:	230c      	movs	r3, #12
 8009f20:	603b      	str	r3, [r7, #0]
 8009f22:	2340      	movs	r3, #64	; 0x40
 8009f24:	2001      	movs	r0, #1
 8009f26:	89a2      	ldrh	r2, [r4, #12]
 8009f28:	4240      	negs	r0, r0
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	81a3      	strh	r3, [r4, #12]
 8009f2e:	b005      	add	sp, #20
 8009f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f32:	9a02      	ldr	r2, [sp, #8]
 8009f34:	6921      	ldr	r1, [r4, #16]
 8009f36:	f000 ff96 	bl	800ae66 <memcpy>
 8009f3a:	89a3      	ldrh	r3, [r4, #12]
 8009f3c:	4a14      	ldr	r2, [pc, #80]	; (8009f90 <__ssputs_r+0xc0>)
 8009f3e:	401a      	ands	r2, r3
 8009f40:	2380      	movs	r3, #128	; 0x80
 8009f42:	4313      	orrs	r3, r2
 8009f44:	81a3      	strh	r3, [r4, #12]
 8009f46:	9b02      	ldr	r3, [sp, #8]
 8009f48:	6126      	str	r6, [r4, #16]
 8009f4a:	18f6      	adds	r6, r6, r3
 8009f4c:	6026      	str	r6, [r4, #0]
 8009f4e:	6165      	str	r5, [r4, #20]
 8009f50:	9e01      	ldr	r6, [sp, #4]
 8009f52:	1aed      	subs	r5, r5, r3
 8009f54:	60a5      	str	r5, [r4, #8]
 8009f56:	9b01      	ldr	r3, [sp, #4]
 8009f58:	429e      	cmp	r6, r3
 8009f5a:	d900      	bls.n	8009f5e <__ssputs_r+0x8e>
 8009f5c:	9e01      	ldr	r6, [sp, #4]
 8009f5e:	0032      	movs	r2, r6
 8009f60:	9903      	ldr	r1, [sp, #12]
 8009f62:	6820      	ldr	r0, [r4, #0]
 8009f64:	f000 ff88 	bl	800ae78 <memmove>
 8009f68:	68a3      	ldr	r3, [r4, #8]
 8009f6a:	2000      	movs	r0, #0
 8009f6c:	1b9b      	subs	r3, r3, r6
 8009f6e:	60a3      	str	r3, [r4, #8]
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	199e      	adds	r6, r3, r6
 8009f74:	6026      	str	r6, [r4, #0]
 8009f76:	e7da      	b.n	8009f2e <__ssputs_r+0x5e>
 8009f78:	002a      	movs	r2, r5
 8009f7a:	0038      	movs	r0, r7
 8009f7c:	f001 f838 	bl	800aff0 <_realloc_r>
 8009f80:	1e06      	subs	r6, r0, #0
 8009f82:	d1e0      	bne.n	8009f46 <__ssputs_r+0x76>
 8009f84:	6921      	ldr	r1, [r4, #16]
 8009f86:	0038      	movs	r0, r7
 8009f88:	f000 ff8a 	bl	800aea0 <_free_r>
 8009f8c:	e7c7      	b.n	8009f1e <__ssputs_r+0x4e>
 8009f8e:	46c0      	nop			; (mov r8, r8)
 8009f90:	fffffb7f 	.word	0xfffffb7f

08009f94 <_svfiprintf_r>:
 8009f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f96:	b0a1      	sub	sp, #132	; 0x84
 8009f98:	9003      	str	r0, [sp, #12]
 8009f9a:	001d      	movs	r5, r3
 8009f9c:	898b      	ldrh	r3, [r1, #12]
 8009f9e:	000f      	movs	r7, r1
 8009fa0:	0016      	movs	r6, r2
 8009fa2:	061b      	lsls	r3, r3, #24
 8009fa4:	d511      	bpl.n	8009fca <_svfiprintf_r+0x36>
 8009fa6:	690b      	ldr	r3, [r1, #16]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10e      	bne.n	8009fca <_svfiprintf_r+0x36>
 8009fac:	2140      	movs	r1, #64	; 0x40
 8009fae:	f000 ffc1 	bl	800af34 <_malloc_r>
 8009fb2:	6038      	str	r0, [r7, #0]
 8009fb4:	6138      	str	r0, [r7, #16]
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d105      	bne.n	8009fc6 <_svfiprintf_r+0x32>
 8009fba:	230c      	movs	r3, #12
 8009fbc:	9a03      	ldr	r2, [sp, #12]
 8009fbe:	3801      	subs	r0, #1
 8009fc0:	6013      	str	r3, [r2, #0]
 8009fc2:	b021      	add	sp, #132	; 0x84
 8009fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fc6:	2340      	movs	r3, #64	; 0x40
 8009fc8:	617b      	str	r3, [r7, #20]
 8009fca:	2300      	movs	r3, #0
 8009fcc:	ac08      	add	r4, sp, #32
 8009fce:	6163      	str	r3, [r4, #20]
 8009fd0:	3320      	adds	r3, #32
 8009fd2:	7663      	strb	r3, [r4, #25]
 8009fd4:	3310      	adds	r3, #16
 8009fd6:	76a3      	strb	r3, [r4, #26]
 8009fd8:	9507      	str	r5, [sp, #28]
 8009fda:	0035      	movs	r5, r6
 8009fdc:	782b      	ldrb	r3, [r5, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <_svfiprintf_r+0x52>
 8009fe2:	2b25      	cmp	r3, #37	; 0x25
 8009fe4:	d146      	bne.n	800a074 <_svfiprintf_r+0xe0>
 8009fe6:	1bab      	subs	r3, r5, r6
 8009fe8:	9305      	str	r3, [sp, #20]
 8009fea:	d00c      	beq.n	800a006 <_svfiprintf_r+0x72>
 8009fec:	0032      	movs	r2, r6
 8009fee:	0039      	movs	r1, r7
 8009ff0:	9803      	ldr	r0, [sp, #12]
 8009ff2:	f7ff ff6d 	bl	8009ed0 <__ssputs_r>
 8009ff6:	1c43      	adds	r3, r0, #1
 8009ff8:	d100      	bne.n	8009ffc <_svfiprintf_r+0x68>
 8009ffa:	e0ae      	b.n	800a15a <_svfiprintf_r+0x1c6>
 8009ffc:	6962      	ldr	r2, [r4, #20]
 8009ffe:	9b05      	ldr	r3, [sp, #20]
 800a000:	4694      	mov	ip, r2
 800a002:	4463      	add	r3, ip
 800a004:	6163      	str	r3, [r4, #20]
 800a006:	782b      	ldrb	r3, [r5, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d100      	bne.n	800a00e <_svfiprintf_r+0x7a>
 800a00c:	e0a5      	b.n	800a15a <_svfiprintf_r+0x1c6>
 800a00e:	2201      	movs	r2, #1
 800a010:	2300      	movs	r3, #0
 800a012:	4252      	negs	r2, r2
 800a014:	6062      	str	r2, [r4, #4]
 800a016:	a904      	add	r1, sp, #16
 800a018:	3254      	adds	r2, #84	; 0x54
 800a01a:	1852      	adds	r2, r2, r1
 800a01c:	1c6e      	adds	r6, r5, #1
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	60e3      	str	r3, [r4, #12]
 800a022:	60a3      	str	r3, [r4, #8]
 800a024:	7013      	strb	r3, [r2, #0]
 800a026:	65a3      	str	r3, [r4, #88]	; 0x58
 800a028:	7831      	ldrb	r1, [r6, #0]
 800a02a:	2205      	movs	r2, #5
 800a02c:	4853      	ldr	r0, [pc, #332]	; (800a17c <_svfiprintf_r+0x1e8>)
 800a02e:	f000 ff0f 	bl	800ae50 <memchr>
 800a032:	1c75      	adds	r5, r6, #1
 800a034:	2800      	cmp	r0, #0
 800a036:	d11f      	bne.n	800a078 <_svfiprintf_r+0xe4>
 800a038:	6822      	ldr	r2, [r4, #0]
 800a03a:	06d3      	lsls	r3, r2, #27
 800a03c:	d504      	bpl.n	800a048 <_svfiprintf_r+0xb4>
 800a03e:	2353      	movs	r3, #83	; 0x53
 800a040:	a904      	add	r1, sp, #16
 800a042:	185b      	adds	r3, r3, r1
 800a044:	2120      	movs	r1, #32
 800a046:	7019      	strb	r1, [r3, #0]
 800a048:	0713      	lsls	r3, r2, #28
 800a04a:	d504      	bpl.n	800a056 <_svfiprintf_r+0xc2>
 800a04c:	2353      	movs	r3, #83	; 0x53
 800a04e:	a904      	add	r1, sp, #16
 800a050:	185b      	adds	r3, r3, r1
 800a052:	212b      	movs	r1, #43	; 0x2b
 800a054:	7019      	strb	r1, [r3, #0]
 800a056:	7833      	ldrb	r3, [r6, #0]
 800a058:	2b2a      	cmp	r3, #42	; 0x2a
 800a05a:	d016      	beq.n	800a08a <_svfiprintf_r+0xf6>
 800a05c:	0035      	movs	r5, r6
 800a05e:	2100      	movs	r1, #0
 800a060:	200a      	movs	r0, #10
 800a062:	68e3      	ldr	r3, [r4, #12]
 800a064:	782a      	ldrb	r2, [r5, #0]
 800a066:	1c6e      	adds	r6, r5, #1
 800a068:	3a30      	subs	r2, #48	; 0x30
 800a06a:	2a09      	cmp	r2, #9
 800a06c:	d94e      	bls.n	800a10c <_svfiprintf_r+0x178>
 800a06e:	2900      	cmp	r1, #0
 800a070:	d018      	beq.n	800a0a4 <_svfiprintf_r+0x110>
 800a072:	e010      	b.n	800a096 <_svfiprintf_r+0x102>
 800a074:	3501      	adds	r5, #1
 800a076:	e7b1      	b.n	8009fdc <_svfiprintf_r+0x48>
 800a078:	4b40      	ldr	r3, [pc, #256]	; (800a17c <_svfiprintf_r+0x1e8>)
 800a07a:	6822      	ldr	r2, [r4, #0]
 800a07c:	1ac0      	subs	r0, r0, r3
 800a07e:	2301      	movs	r3, #1
 800a080:	4083      	lsls	r3, r0
 800a082:	4313      	orrs	r3, r2
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	002e      	movs	r6, r5
 800a088:	e7ce      	b.n	800a028 <_svfiprintf_r+0x94>
 800a08a:	9b07      	ldr	r3, [sp, #28]
 800a08c:	1d19      	adds	r1, r3, #4
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	9107      	str	r1, [sp, #28]
 800a092:	2b00      	cmp	r3, #0
 800a094:	db01      	blt.n	800a09a <_svfiprintf_r+0x106>
 800a096:	930b      	str	r3, [sp, #44]	; 0x2c
 800a098:	e004      	b.n	800a0a4 <_svfiprintf_r+0x110>
 800a09a:	425b      	negs	r3, r3
 800a09c:	60e3      	str	r3, [r4, #12]
 800a09e:	2302      	movs	r3, #2
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	6023      	str	r3, [r4, #0]
 800a0a4:	782b      	ldrb	r3, [r5, #0]
 800a0a6:	2b2e      	cmp	r3, #46	; 0x2e
 800a0a8:	d10a      	bne.n	800a0c0 <_svfiprintf_r+0x12c>
 800a0aa:	786b      	ldrb	r3, [r5, #1]
 800a0ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ae:	d135      	bne.n	800a11c <_svfiprintf_r+0x188>
 800a0b0:	9b07      	ldr	r3, [sp, #28]
 800a0b2:	3502      	adds	r5, #2
 800a0b4:	1d1a      	adds	r2, r3, #4
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	9207      	str	r2, [sp, #28]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	db2b      	blt.n	800a116 <_svfiprintf_r+0x182>
 800a0be:	9309      	str	r3, [sp, #36]	; 0x24
 800a0c0:	4e2f      	ldr	r6, [pc, #188]	; (800a180 <_svfiprintf_r+0x1ec>)
 800a0c2:	7829      	ldrb	r1, [r5, #0]
 800a0c4:	2203      	movs	r2, #3
 800a0c6:	0030      	movs	r0, r6
 800a0c8:	f000 fec2 	bl	800ae50 <memchr>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d006      	beq.n	800a0de <_svfiprintf_r+0x14a>
 800a0d0:	2340      	movs	r3, #64	; 0x40
 800a0d2:	1b80      	subs	r0, r0, r6
 800a0d4:	4083      	lsls	r3, r0
 800a0d6:	6822      	ldr	r2, [r4, #0]
 800a0d8:	3501      	adds	r5, #1
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	6023      	str	r3, [r4, #0]
 800a0de:	7829      	ldrb	r1, [r5, #0]
 800a0e0:	2206      	movs	r2, #6
 800a0e2:	4828      	ldr	r0, [pc, #160]	; (800a184 <_svfiprintf_r+0x1f0>)
 800a0e4:	1c6e      	adds	r6, r5, #1
 800a0e6:	7621      	strb	r1, [r4, #24]
 800a0e8:	f000 feb2 	bl	800ae50 <memchr>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d03c      	beq.n	800a16a <_svfiprintf_r+0x1d6>
 800a0f0:	4b25      	ldr	r3, [pc, #148]	; (800a188 <_svfiprintf_r+0x1f4>)
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d125      	bne.n	800a142 <_svfiprintf_r+0x1ae>
 800a0f6:	2207      	movs	r2, #7
 800a0f8:	9b07      	ldr	r3, [sp, #28]
 800a0fa:	3307      	adds	r3, #7
 800a0fc:	4393      	bics	r3, r2
 800a0fe:	3308      	adds	r3, #8
 800a100:	9307      	str	r3, [sp, #28]
 800a102:	6963      	ldr	r3, [r4, #20]
 800a104:	9a04      	ldr	r2, [sp, #16]
 800a106:	189b      	adds	r3, r3, r2
 800a108:	6163      	str	r3, [r4, #20]
 800a10a:	e766      	b.n	8009fda <_svfiprintf_r+0x46>
 800a10c:	4343      	muls	r3, r0
 800a10e:	2101      	movs	r1, #1
 800a110:	189b      	adds	r3, r3, r2
 800a112:	0035      	movs	r5, r6
 800a114:	e7a6      	b.n	800a064 <_svfiprintf_r+0xd0>
 800a116:	2301      	movs	r3, #1
 800a118:	425b      	negs	r3, r3
 800a11a:	e7d0      	b.n	800a0be <_svfiprintf_r+0x12a>
 800a11c:	2300      	movs	r3, #0
 800a11e:	200a      	movs	r0, #10
 800a120:	001a      	movs	r2, r3
 800a122:	3501      	adds	r5, #1
 800a124:	6063      	str	r3, [r4, #4]
 800a126:	7829      	ldrb	r1, [r5, #0]
 800a128:	1c6e      	adds	r6, r5, #1
 800a12a:	3930      	subs	r1, #48	; 0x30
 800a12c:	2909      	cmp	r1, #9
 800a12e:	d903      	bls.n	800a138 <_svfiprintf_r+0x1a4>
 800a130:	2b00      	cmp	r3, #0
 800a132:	d0c5      	beq.n	800a0c0 <_svfiprintf_r+0x12c>
 800a134:	9209      	str	r2, [sp, #36]	; 0x24
 800a136:	e7c3      	b.n	800a0c0 <_svfiprintf_r+0x12c>
 800a138:	4342      	muls	r2, r0
 800a13a:	2301      	movs	r3, #1
 800a13c:	1852      	adds	r2, r2, r1
 800a13e:	0035      	movs	r5, r6
 800a140:	e7f1      	b.n	800a126 <_svfiprintf_r+0x192>
 800a142:	ab07      	add	r3, sp, #28
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	003a      	movs	r2, r7
 800a148:	4b10      	ldr	r3, [pc, #64]	; (800a18c <_svfiprintf_r+0x1f8>)
 800a14a:	0021      	movs	r1, r4
 800a14c:	9803      	ldr	r0, [sp, #12]
 800a14e:	e000      	b.n	800a152 <_svfiprintf_r+0x1be>
 800a150:	bf00      	nop
 800a152:	9004      	str	r0, [sp, #16]
 800a154:	9b04      	ldr	r3, [sp, #16]
 800a156:	3301      	adds	r3, #1
 800a158:	d1d3      	bne.n	800a102 <_svfiprintf_r+0x16e>
 800a15a:	89bb      	ldrh	r3, [r7, #12]
 800a15c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a15e:	065b      	lsls	r3, r3, #25
 800a160:	d400      	bmi.n	800a164 <_svfiprintf_r+0x1d0>
 800a162:	e72e      	b.n	8009fc2 <_svfiprintf_r+0x2e>
 800a164:	2001      	movs	r0, #1
 800a166:	4240      	negs	r0, r0
 800a168:	e72b      	b.n	8009fc2 <_svfiprintf_r+0x2e>
 800a16a:	ab07      	add	r3, sp, #28
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	003a      	movs	r2, r7
 800a170:	4b06      	ldr	r3, [pc, #24]	; (800a18c <_svfiprintf_r+0x1f8>)
 800a172:	0021      	movs	r1, r4
 800a174:	9803      	ldr	r0, [sp, #12]
 800a176:	f000 fa43 	bl	800a600 <_printf_i>
 800a17a:	e7ea      	b.n	800a152 <_svfiprintf_r+0x1be>
 800a17c:	0800d440 	.word	0x0800d440
 800a180:	0800d446 	.word	0x0800d446
 800a184:	0800d44a 	.word	0x0800d44a
 800a188:	00000000 	.word	0x00000000
 800a18c:	08009ed1 	.word	0x08009ed1

0800a190 <_sungetc_r>:
 800a190:	b570      	push	{r4, r5, r6, lr}
 800a192:	0014      	movs	r4, r2
 800a194:	1c4b      	adds	r3, r1, #1
 800a196:	d103      	bne.n	800a1a0 <_sungetc_r+0x10>
 800a198:	2501      	movs	r5, #1
 800a19a:	426d      	negs	r5, r5
 800a19c:	0028      	movs	r0, r5
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	8993      	ldrh	r3, [r2, #12]
 800a1a2:	2220      	movs	r2, #32
 800a1a4:	4393      	bics	r3, r2
 800a1a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a1a8:	81a3      	strh	r3, [r4, #12]
 800a1aa:	b2ce      	uxtb	r6, r1
 800a1ac:	b2cd      	uxtb	r5, r1
 800a1ae:	6863      	ldr	r3, [r4, #4]
 800a1b0:	2a00      	cmp	r2, #0
 800a1b2:	d010      	beq.n	800a1d6 <_sungetc_r+0x46>
 800a1b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	dd07      	ble.n	800a1ca <_sungetc_r+0x3a>
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	6023      	str	r3, [r4, #0]
 800a1c0:	701e      	strb	r6, [r3, #0]
 800a1c2:	6863      	ldr	r3, [r4, #4]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	6063      	str	r3, [r4, #4]
 800a1c8:	e7e8      	b.n	800a19c <_sungetc_r+0xc>
 800a1ca:	0021      	movs	r1, r4
 800a1cc:	f000 fdde 	bl	800ad8c <__submore>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d0f2      	beq.n	800a1ba <_sungetc_r+0x2a>
 800a1d4:	e7e0      	b.n	800a198 <_sungetc_r+0x8>
 800a1d6:	6921      	ldr	r1, [r4, #16]
 800a1d8:	6822      	ldr	r2, [r4, #0]
 800a1da:	2900      	cmp	r1, #0
 800a1dc:	d007      	beq.n	800a1ee <_sungetc_r+0x5e>
 800a1de:	4291      	cmp	r1, r2
 800a1e0:	d205      	bcs.n	800a1ee <_sungetc_r+0x5e>
 800a1e2:	1e51      	subs	r1, r2, #1
 800a1e4:	7808      	ldrb	r0, [r1, #0]
 800a1e6:	42a8      	cmp	r0, r5
 800a1e8:	d101      	bne.n	800a1ee <_sungetc_r+0x5e>
 800a1ea:	6021      	str	r1, [r4, #0]
 800a1ec:	e7ea      	b.n	800a1c4 <_sungetc_r+0x34>
 800a1ee:	6423      	str	r3, [r4, #64]	; 0x40
 800a1f0:	0023      	movs	r3, r4
 800a1f2:	3344      	adds	r3, #68	; 0x44
 800a1f4:	6363      	str	r3, [r4, #52]	; 0x34
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a1fa:	0023      	movs	r3, r4
 800a1fc:	3346      	adds	r3, #70	; 0x46
 800a1fe:	63e2      	str	r2, [r4, #60]	; 0x3c
 800a200:	701e      	strb	r6, [r3, #0]
 800a202:	6023      	str	r3, [r4, #0]
 800a204:	2301      	movs	r3, #1
 800a206:	e7de      	b.n	800a1c6 <_sungetc_r+0x36>

0800a208 <__ssrefill_r>:
 800a208:	b510      	push	{r4, lr}
 800a20a:	000c      	movs	r4, r1
 800a20c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a20e:	2900      	cmp	r1, #0
 800a210:	d00e      	beq.n	800a230 <__ssrefill_r+0x28>
 800a212:	0023      	movs	r3, r4
 800a214:	3344      	adds	r3, #68	; 0x44
 800a216:	4299      	cmp	r1, r3
 800a218:	d001      	beq.n	800a21e <__ssrefill_r+0x16>
 800a21a:	f000 fe41 	bl	800aea0 <_free_r>
 800a21e:	2000      	movs	r0, #0
 800a220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a222:	6360      	str	r0, [r4, #52]	; 0x34
 800a224:	6063      	str	r3, [r4, #4]
 800a226:	4283      	cmp	r3, r0
 800a228:	d002      	beq.n	800a230 <__ssrefill_r+0x28>
 800a22a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	bd10      	pop	{r4, pc}
 800a230:	6923      	ldr	r3, [r4, #16]
 800a232:	2001      	movs	r0, #1
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	2300      	movs	r3, #0
 800a238:	89a2      	ldrh	r2, [r4, #12]
 800a23a:	6063      	str	r3, [r4, #4]
 800a23c:	3320      	adds	r3, #32
 800a23e:	4313      	orrs	r3, r2
 800a240:	81a3      	strh	r3, [r4, #12]
 800a242:	4240      	negs	r0, r0
 800a244:	e7f3      	b.n	800a22e <__ssrefill_r+0x26>
	...

0800a248 <__ssvfiscanf_r>:
 800a248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a24a:	0017      	movs	r7, r2
 800a24c:	2200      	movs	r2, #0
 800a24e:	4cb0      	ldr	r4, [pc, #704]	; (800a510 <__ssvfiscanf_r+0x2c8>)
 800a250:	25c0      	movs	r5, #192	; 0xc0
 800a252:	44a5      	add	sp, r4
 800a254:	9248      	str	r2, [sp, #288]	; 0x120
 800a256:	9249      	str	r2, [sp, #292]	; 0x124
 800a258:	aa05      	add	r2, sp, #20
 800a25a:	924a      	str	r2, [sp, #296]	; 0x128
 800a25c:	22be      	movs	r2, #190	; 0xbe
 800a25e:	000c      	movs	r4, r1
 800a260:	49ac      	ldr	r1, [pc, #688]	; (800a514 <__ssvfiscanf_r+0x2cc>)
 800a262:	9000      	str	r0, [sp, #0]
 800a264:	0052      	lsls	r2, r2, #1
 800a266:	a845      	add	r0, sp, #276	; 0x114
 800a268:	5081      	str	r1, [r0, r2]
 800a26a:	49ab      	ldr	r1, [pc, #684]	; (800a518 <__ssvfiscanf_r+0x2d0>)
 800a26c:	006d      	lsls	r5, r5, #1
 800a26e:	5141      	str	r1, [r0, r5]
 800a270:	9304      	str	r3, [sp, #16]
 800a272:	783b      	ldrb	r3, [r7, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d100      	bne.n	800a27a <__ssvfiscanf_r+0x32>
 800a278:	e148      	b.n	800a50c <__ssvfiscanf_r+0x2c4>
 800a27a:	f000 fdc9 	bl	800ae10 <__locale_ctype_ptr>
 800a27e:	2208      	movs	r2, #8
 800a280:	783b      	ldrb	r3, [r7, #0]
 800a282:	1c7e      	adds	r6, r7, #1
 800a284:	18c0      	adds	r0, r0, r3
 800a286:	9301      	str	r3, [sp, #4]
 800a288:	7843      	ldrb	r3, [r0, #1]
 800a28a:	4013      	ands	r3, r2
 800a28c:	d020      	beq.n	800a2d0 <__ssvfiscanf_r+0x88>
 800a28e:	6863      	ldr	r3, [r4, #4]
 800a290:	2b00      	cmp	r3, #0
 800a292:	dd14      	ble.n	800a2be <__ssvfiscanf_r+0x76>
 800a294:	f000 fdbc 	bl	800ae10 <__locale_ctype_ptr>
 800a298:	2108      	movs	r1, #8
 800a29a:	6823      	ldr	r3, [r4, #0]
 800a29c:	781a      	ldrb	r2, [r3, #0]
 800a29e:	1880      	adds	r0, r0, r2
 800a2a0:	7842      	ldrb	r2, [r0, #1]
 800a2a2:	420a      	tst	r2, r1
 800a2a4:	d101      	bne.n	800a2aa <__ssvfiscanf_r+0x62>
 800a2a6:	0037      	movs	r7, r6
 800a2a8:	e7e3      	b.n	800a272 <__ssvfiscanf_r+0x2a>
 800a2aa:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	9201      	str	r2, [sp, #4]
 800a2b0:	3201      	adds	r2, #1
 800a2b2:	9249      	str	r2, [sp, #292]	; 0x124
 800a2b4:	6862      	ldr	r2, [r4, #4]
 800a2b6:	6023      	str	r3, [r4, #0]
 800a2b8:	3a01      	subs	r2, #1
 800a2ba:	6062      	str	r2, [r4, #4]
 800a2bc:	e7e7      	b.n	800a28e <__ssvfiscanf_r+0x46>
 800a2be:	ab45      	add	r3, sp, #276	; 0x114
 800a2c0:	595b      	ldr	r3, [r3, r5]
 800a2c2:	0021      	movs	r1, r4
 800a2c4:	9800      	ldr	r0, [sp, #0]
 800a2c6:	9301      	str	r3, [sp, #4]
 800a2c8:	4798      	blx	r3
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d0e2      	beq.n	800a294 <__ssvfiscanf_r+0x4c>
 800a2ce:	e7ea      	b.n	800a2a6 <__ssvfiscanf_r+0x5e>
 800a2d0:	9a01      	ldr	r2, [sp, #4]
 800a2d2:	2a25      	cmp	r2, #37	; 0x25
 800a2d4:	d16d      	bne.n	800a3b2 <__ssvfiscanf_r+0x16a>
 800a2d6:	9347      	str	r3, [sp, #284]	; 0x11c
 800a2d8:	9345      	str	r3, [sp, #276]	; 0x114
 800a2da:	787b      	ldrb	r3, [r7, #1]
 800a2dc:	2b2a      	cmp	r3, #42	; 0x2a
 800a2de:	d102      	bne.n	800a2e6 <__ssvfiscanf_r+0x9e>
 800a2e0:	3b1a      	subs	r3, #26
 800a2e2:	9345      	str	r3, [sp, #276]	; 0x114
 800a2e4:	1cbe      	adds	r6, r7, #2
 800a2e6:	0037      	movs	r7, r6
 800a2e8:	220a      	movs	r2, #10
 800a2ea:	7839      	ldrb	r1, [r7, #0]
 800a2ec:	1c7b      	adds	r3, r7, #1
 800a2ee:	9302      	str	r3, [sp, #8]
 800a2f0:	000b      	movs	r3, r1
 800a2f2:	3b30      	subs	r3, #48	; 0x30
 800a2f4:	2b09      	cmp	r3, #9
 800a2f6:	d924      	bls.n	800a342 <__ssvfiscanf_r+0xfa>
 800a2f8:	4e88      	ldr	r6, [pc, #544]	; (800a51c <__ssvfiscanf_r+0x2d4>)
 800a2fa:	2203      	movs	r2, #3
 800a2fc:	0030      	movs	r0, r6
 800a2fe:	f000 fda7 	bl	800ae50 <memchr>
 800a302:	2800      	cmp	r0, #0
 800a304:	d007      	beq.n	800a316 <__ssvfiscanf_r+0xce>
 800a306:	2301      	movs	r3, #1
 800a308:	1b80      	subs	r0, r0, r6
 800a30a:	4083      	lsls	r3, r0
 800a30c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a30e:	9f02      	ldr	r7, [sp, #8]
 800a310:	4313      	orrs	r3, r2
 800a312:	9203      	str	r2, [sp, #12]
 800a314:	9345      	str	r3, [sp, #276]	; 0x114
 800a316:	783b      	ldrb	r3, [r7, #0]
 800a318:	1c7e      	adds	r6, r7, #1
 800a31a:	2b67      	cmp	r3, #103	; 0x67
 800a31c:	d835      	bhi.n	800a38a <__ssvfiscanf_r+0x142>
 800a31e:	2b65      	cmp	r3, #101	; 0x65
 800a320:	d300      	bcc.n	800a324 <__ssvfiscanf_r+0xdc>
 800a322:	e0b8      	b.n	800a496 <__ssvfiscanf_r+0x24e>
 800a324:	2b47      	cmp	r3, #71	; 0x47
 800a326:	d814      	bhi.n	800a352 <__ssvfiscanf_r+0x10a>
 800a328:	2b45      	cmp	r3, #69	; 0x45
 800a32a:	d300      	bcc.n	800a32e <__ssvfiscanf_r+0xe6>
 800a32c:	e0b3      	b.n	800a496 <__ssvfiscanf_r+0x24e>
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d100      	bne.n	800a334 <__ssvfiscanf_r+0xec>
 800a332:	e0e8      	b.n	800a506 <__ssvfiscanf_r+0x2be>
 800a334:	2b25      	cmp	r3, #37	; 0x25
 800a336:	d03c      	beq.n	800a3b2 <__ssvfiscanf_r+0x16a>
 800a338:	2303      	movs	r3, #3
 800a33a:	934b      	str	r3, [sp, #300]	; 0x12c
 800a33c:	3307      	adds	r3, #7
 800a33e:	9346      	str	r3, [sp, #280]	; 0x118
 800a340:	e066      	b.n	800a410 <__ssvfiscanf_r+0x1c8>
 800a342:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a344:	9f02      	ldr	r7, [sp, #8]
 800a346:	9303      	str	r3, [sp, #12]
 800a348:	4353      	muls	r3, r2
 800a34a:	3b30      	subs	r3, #48	; 0x30
 800a34c:	1859      	adds	r1, r3, r1
 800a34e:	9147      	str	r1, [sp, #284]	; 0x11c
 800a350:	e7cb      	b.n	800a2ea <__ssvfiscanf_r+0xa2>
 800a352:	2b5b      	cmp	r3, #91	; 0x5b
 800a354:	d100      	bne.n	800a358 <__ssvfiscanf_r+0x110>
 800a356:	e07a      	b.n	800a44e <__ssvfiscanf_r+0x206>
 800a358:	d810      	bhi.n	800a37c <__ssvfiscanf_r+0x134>
 800a35a:	2b58      	cmp	r3, #88	; 0x58
 800a35c:	d1ec      	bne.n	800a338 <__ssvfiscanf_r+0xf0>
 800a35e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a360:	9201      	str	r2, [sp, #4]
 800a362:	2280      	movs	r2, #128	; 0x80
 800a364:	9901      	ldr	r1, [sp, #4]
 800a366:	0092      	lsls	r2, r2, #2
 800a368:	430a      	orrs	r2, r1
 800a36a:	9245      	str	r2, [sp, #276]	; 0x114
 800a36c:	2210      	movs	r2, #16
 800a36e:	9246      	str	r2, [sp, #280]	; 0x118
 800a370:	226e      	movs	r2, #110	; 0x6e
 800a372:	429a      	cmp	r2, r3
 800a374:	419b      	sbcs	r3, r3
 800a376:	425b      	negs	r3, r3
 800a378:	3303      	adds	r3, #3
 800a37a:	e048      	b.n	800a40e <__ssvfiscanf_r+0x1c6>
 800a37c:	2b63      	cmp	r3, #99	; 0x63
 800a37e:	d100      	bne.n	800a382 <__ssvfiscanf_r+0x13a>
 800a380:	e072      	b.n	800a468 <__ssvfiscanf_r+0x220>
 800a382:	2b64      	cmp	r3, #100	; 0x64
 800a384:	d1d8      	bne.n	800a338 <__ssvfiscanf_r+0xf0>
 800a386:	220a      	movs	r2, #10
 800a388:	e7f1      	b.n	800a36e <__ssvfiscanf_r+0x126>
 800a38a:	2b70      	cmp	r3, #112	; 0x70
 800a38c:	d035      	beq.n	800a3fa <__ssvfiscanf_r+0x1b2>
 800a38e:	d808      	bhi.n	800a3a2 <__ssvfiscanf_r+0x15a>
 800a390:	2b6e      	cmp	r3, #110	; 0x6e
 800a392:	d100      	bne.n	800a396 <__ssvfiscanf_r+0x14e>
 800a394:	e070      	b.n	800a478 <__ssvfiscanf_r+0x230>
 800a396:	d837      	bhi.n	800a408 <__ssvfiscanf_r+0x1c0>
 800a398:	2b69      	cmp	r3, #105	; 0x69
 800a39a:	d1cd      	bne.n	800a338 <__ssvfiscanf_r+0xf0>
 800a39c:	2300      	movs	r3, #0
 800a39e:	9346      	str	r3, [sp, #280]	; 0x118
 800a3a0:	e7ea      	b.n	800a378 <__ssvfiscanf_r+0x130>
 800a3a2:	2b75      	cmp	r3, #117	; 0x75
 800a3a4:	d0ef      	beq.n	800a386 <__ssvfiscanf_r+0x13e>
 800a3a6:	2b78      	cmp	r3, #120	; 0x78
 800a3a8:	d0d9      	beq.n	800a35e <__ssvfiscanf_r+0x116>
 800a3aa:	2b73      	cmp	r3, #115	; 0x73
 800a3ac:	d1c4      	bne.n	800a338 <__ssvfiscanf_r+0xf0>
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	e02d      	b.n	800a40e <__ssvfiscanf_r+0x1c6>
 800a3b2:	6863      	ldr	r3, [r4, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dd0f      	ble.n	800a3d8 <__ssvfiscanf_r+0x190>
 800a3b8:	6823      	ldr	r3, [r4, #0]
 800a3ba:	9901      	ldr	r1, [sp, #4]
 800a3bc:	781a      	ldrb	r2, [r3, #0]
 800a3be:	428a      	cmp	r2, r1
 800a3c0:	d000      	beq.n	800a3c4 <__ssvfiscanf_r+0x17c>
 800a3c2:	e0a3      	b.n	800a50c <__ssvfiscanf_r+0x2c4>
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	6862      	ldr	r2, [r4, #4]
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800a3cc:	3a01      	subs	r2, #1
 800a3ce:	9301      	str	r3, [sp, #4]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	6062      	str	r2, [r4, #4]
 800a3d4:	9349      	str	r3, [sp, #292]	; 0x124
 800a3d6:	e766      	b.n	800a2a6 <__ssvfiscanf_r+0x5e>
 800a3d8:	ab45      	add	r3, sp, #276	; 0x114
 800a3da:	595b      	ldr	r3, [r3, r5]
 800a3dc:	0021      	movs	r1, r4
 800a3de:	9800      	ldr	r0, [sp, #0]
 800a3e0:	9302      	str	r3, [sp, #8]
 800a3e2:	4798      	blx	r3
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d0e7      	beq.n	800a3b8 <__ssvfiscanf_r+0x170>
 800a3e8:	9848      	ldr	r0, [sp, #288]	; 0x120
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d000      	beq.n	800a3f0 <__ssvfiscanf_r+0x1a8>
 800a3ee:	e086      	b.n	800a4fe <__ssvfiscanf_r+0x2b6>
 800a3f0:	3801      	subs	r0, #1
 800a3f2:	23a7      	movs	r3, #167	; 0xa7
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	449d      	add	sp, r3
 800a3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a3fc:	9201      	str	r2, [sp, #4]
 800a3fe:	2220      	movs	r2, #32
 800a400:	9901      	ldr	r1, [sp, #4]
 800a402:	430a      	orrs	r2, r1
 800a404:	9245      	str	r2, [sp, #276]	; 0x114
 800a406:	e7aa      	b.n	800a35e <__ssvfiscanf_r+0x116>
 800a408:	2308      	movs	r3, #8
 800a40a:	9346      	str	r3, [sp, #280]	; 0x118
 800a40c:	3b04      	subs	r3, #4
 800a40e:	934b      	str	r3, [sp, #300]	; 0x12c
 800a410:	6863      	ldr	r3, [r4, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	dd41      	ble.n	800a49a <__ssvfiscanf_r+0x252>
 800a416:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a418:	9301      	str	r3, [sp, #4]
 800a41a:	065b      	lsls	r3, r3, #25
 800a41c:	d408      	bmi.n	800a430 <__ssvfiscanf_r+0x1e8>
 800a41e:	f000 fcf7 	bl	800ae10 <__locale_ctype_ptr>
 800a422:	2108      	movs	r1, #8
 800a424:	6823      	ldr	r3, [r4, #0]
 800a426:	781a      	ldrb	r2, [r3, #0]
 800a428:	1880      	adds	r0, r0, r2
 800a42a:	7842      	ldrb	r2, [r0, #1]
 800a42c:	420a      	tst	r2, r1
 800a42e:	d13d      	bne.n	800a4ac <__ssvfiscanf_r+0x264>
 800a430:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800a432:	2b02      	cmp	r3, #2
 800a434:	dc4f      	bgt.n	800a4d6 <__ssvfiscanf_r+0x28e>
 800a436:	ab04      	add	r3, sp, #16
 800a438:	0022      	movs	r2, r4
 800a43a:	a945      	add	r1, sp, #276	; 0x114
 800a43c:	9800      	ldr	r0, [sp, #0]
 800a43e:	f000 f9e7 	bl	800a810 <_scanf_chars>
 800a442:	2801      	cmp	r0, #1
 800a444:	d062      	beq.n	800a50c <__ssvfiscanf_r+0x2c4>
 800a446:	2802      	cmp	r0, #2
 800a448:	d000      	beq.n	800a44c <__ssvfiscanf_r+0x204>
 800a44a:	e72c      	b.n	800a2a6 <__ssvfiscanf_r+0x5e>
 800a44c:	e7cc      	b.n	800a3e8 <__ssvfiscanf_r+0x1a0>
 800a44e:	0031      	movs	r1, r6
 800a450:	a805      	add	r0, sp, #20
 800a452:	f000 fb45 	bl	800aae0 <__sccl>
 800a456:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a458:	0006      	movs	r6, r0
 800a45a:	9301      	str	r3, [sp, #4]
 800a45c:	2340      	movs	r3, #64	; 0x40
 800a45e:	9a01      	ldr	r2, [sp, #4]
 800a460:	4313      	orrs	r3, r2
 800a462:	9345      	str	r3, [sp, #276]	; 0x114
 800a464:	2301      	movs	r3, #1
 800a466:	e7d2      	b.n	800a40e <__ssvfiscanf_r+0x1c6>
 800a468:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a46a:	9301      	str	r3, [sp, #4]
 800a46c:	2340      	movs	r3, #64	; 0x40
 800a46e:	9a01      	ldr	r2, [sp, #4]
 800a470:	4313      	orrs	r3, r2
 800a472:	9345      	str	r3, [sp, #276]	; 0x114
 800a474:	2300      	movs	r3, #0
 800a476:	e7ca      	b.n	800a40e <__ssvfiscanf_r+0x1c6>
 800a478:	9845      	ldr	r0, [sp, #276]	; 0x114
 800a47a:	06c3      	lsls	r3, r0, #27
 800a47c:	d500      	bpl.n	800a480 <__ssvfiscanf_r+0x238>
 800a47e:	e712      	b.n	800a2a6 <__ssvfiscanf_r+0x5e>
 800a480:	9b04      	ldr	r3, [sp, #16]
 800a482:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800a484:	1d19      	adds	r1, r3, #4
 800a486:	9104      	str	r1, [sp, #16]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	07c7      	lsls	r7, r0, #31
 800a48c:	d501      	bpl.n	800a492 <__ssvfiscanf_r+0x24a>
 800a48e:	801a      	strh	r2, [r3, #0]
 800a490:	e709      	b.n	800a2a6 <__ssvfiscanf_r+0x5e>
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	e707      	b.n	800a2a6 <__ssvfiscanf_r+0x5e>
 800a496:	2305      	movs	r3, #5
 800a498:	e7b9      	b.n	800a40e <__ssvfiscanf_r+0x1c6>
 800a49a:	ab45      	add	r3, sp, #276	; 0x114
 800a49c:	595b      	ldr	r3, [r3, r5]
 800a49e:	0021      	movs	r1, r4
 800a4a0:	9800      	ldr	r0, [sp, #0]
 800a4a2:	9301      	str	r3, [sp, #4]
 800a4a4:	4798      	blx	r3
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d0b5      	beq.n	800a416 <__ssvfiscanf_r+0x1ce>
 800a4aa:	e79d      	b.n	800a3e8 <__ssvfiscanf_r+0x1a0>
 800a4ac:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800a4ae:	9201      	str	r2, [sp, #4]
 800a4b0:	3201      	adds	r2, #1
 800a4b2:	9249      	str	r2, [sp, #292]	; 0x124
 800a4b4:	6862      	ldr	r2, [r4, #4]
 800a4b6:	3a01      	subs	r2, #1
 800a4b8:	6062      	str	r2, [r4, #4]
 800a4ba:	2a00      	cmp	r2, #0
 800a4bc:	dd02      	ble.n	800a4c4 <__ssvfiscanf_r+0x27c>
 800a4be:	3301      	adds	r3, #1
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	e7ac      	b.n	800a41e <__ssvfiscanf_r+0x1d6>
 800a4c4:	ab45      	add	r3, sp, #276	; 0x114
 800a4c6:	595b      	ldr	r3, [r3, r5]
 800a4c8:	0021      	movs	r1, r4
 800a4ca:	9800      	ldr	r0, [sp, #0]
 800a4cc:	9301      	str	r3, [sp, #4]
 800a4ce:	4798      	blx	r3
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d0a4      	beq.n	800a41e <__ssvfiscanf_r+0x1d6>
 800a4d4:	e788      	b.n	800a3e8 <__ssvfiscanf_r+0x1a0>
 800a4d6:	2b04      	cmp	r3, #4
 800a4d8:	dc06      	bgt.n	800a4e8 <__ssvfiscanf_r+0x2a0>
 800a4da:	ab04      	add	r3, sp, #16
 800a4dc:	0022      	movs	r2, r4
 800a4de:	a945      	add	r1, sp, #276	; 0x114
 800a4e0:	9800      	ldr	r0, [sp, #0]
 800a4e2:	f000 f9fb 	bl	800a8dc <_scanf_i>
 800a4e6:	e7ac      	b.n	800a442 <__ssvfiscanf_r+0x1fa>
 800a4e8:	4b0d      	ldr	r3, [pc, #52]	; (800a520 <__ssvfiscanf_r+0x2d8>)
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d100      	bne.n	800a4f0 <__ssvfiscanf_r+0x2a8>
 800a4ee:	e6da      	b.n	800a2a6 <__ssvfiscanf_r+0x5e>
 800a4f0:	ab04      	add	r3, sp, #16
 800a4f2:	0022      	movs	r2, r4
 800a4f4:	a945      	add	r1, sp, #276	; 0x114
 800a4f6:	9800      	ldr	r0, [sp, #0]
 800a4f8:	e000      	b.n	800a4fc <__ssvfiscanf_r+0x2b4>
 800a4fa:	bf00      	nop
 800a4fc:	e7a1      	b.n	800a442 <__ssvfiscanf_r+0x1fa>
 800a4fe:	89a3      	ldrh	r3, [r4, #12]
 800a500:	065b      	lsls	r3, r3, #25
 800a502:	d400      	bmi.n	800a506 <__ssvfiscanf_r+0x2be>
 800a504:	e775      	b.n	800a3f2 <__ssvfiscanf_r+0x1aa>
 800a506:	2001      	movs	r0, #1
 800a508:	4240      	negs	r0, r0
 800a50a:	e772      	b.n	800a3f2 <__ssvfiscanf_r+0x1aa>
 800a50c:	9848      	ldr	r0, [sp, #288]	; 0x120
 800a50e:	e770      	b.n	800a3f2 <__ssvfiscanf_r+0x1aa>
 800a510:	fffffd64 	.word	0xfffffd64
 800a514:	0800a191 	.word	0x0800a191
 800a518:	0800a209 	.word	0x0800a209
 800a51c:	0800d446 	.word	0x0800d446
 800a520:	00000000 	.word	0x00000000

0800a524 <_printf_common>:
 800a524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a526:	0015      	movs	r5, r2
 800a528:	9301      	str	r3, [sp, #4]
 800a52a:	688a      	ldr	r2, [r1, #8]
 800a52c:	690b      	ldr	r3, [r1, #16]
 800a52e:	9000      	str	r0, [sp, #0]
 800a530:	000c      	movs	r4, r1
 800a532:	4293      	cmp	r3, r2
 800a534:	da00      	bge.n	800a538 <_printf_common+0x14>
 800a536:	0013      	movs	r3, r2
 800a538:	0022      	movs	r2, r4
 800a53a:	602b      	str	r3, [r5, #0]
 800a53c:	3243      	adds	r2, #67	; 0x43
 800a53e:	7812      	ldrb	r2, [r2, #0]
 800a540:	2a00      	cmp	r2, #0
 800a542:	d001      	beq.n	800a548 <_printf_common+0x24>
 800a544:	3301      	adds	r3, #1
 800a546:	602b      	str	r3, [r5, #0]
 800a548:	6823      	ldr	r3, [r4, #0]
 800a54a:	069b      	lsls	r3, r3, #26
 800a54c:	d502      	bpl.n	800a554 <_printf_common+0x30>
 800a54e:	682b      	ldr	r3, [r5, #0]
 800a550:	3302      	adds	r3, #2
 800a552:	602b      	str	r3, [r5, #0]
 800a554:	2706      	movs	r7, #6
 800a556:	6823      	ldr	r3, [r4, #0]
 800a558:	401f      	ands	r7, r3
 800a55a:	d027      	beq.n	800a5ac <_printf_common+0x88>
 800a55c:	0023      	movs	r3, r4
 800a55e:	3343      	adds	r3, #67	; 0x43
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	1e5a      	subs	r2, r3, #1
 800a564:	4193      	sbcs	r3, r2
 800a566:	6822      	ldr	r2, [r4, #0]
 800a568:	0692      	lsls	r2, r2, #26
 800a56a:	d430      	bmi.n	800a5ce <_printf_common+0xaa>
 800a56c:	0022      	movs	r2, r4
 800a56e:	9901      	ldr	r1, [sp, #4]
 800a570:	3243      	adds	r2, #67	; 0x43
 800a572:	9800      	ldr	r0, [sp, #0]
 800a574:	9e08      	ldr	r6, [sp, #32]
 800a576:	47b0      	blx	r6
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	d025      	beq.n	800a5c8 <_printf_common+0xa4>
 800a57c:	2306      	movs	r3, #6
 800a57e:	6820      	ldr	r0, [r4, #0]
 800a580:	682a      	ldr	r2, [r5, #0]
 800a582:	68e1      	ldr	r1, [r4, #12]
 800a584:	4003      	ands	r3, r0
 800a586:	2500      	movs	r5, #0
 800a588:	2b04      	cmp	r3, #4
 800a58a:	d103      	bne.n	800a594 <_printf_common+0x70>
 800a58c:	1a8d      	subs	r5, r1, r2
 800a58e:	43eb      	mvns	r3, r5
 800a590:	17db      	asrs	r3, r3, #31
 800a592:	401d      	ands	r5, r3
 800a594:	68a3      	ldr	r3, [r4, #8]
 800a596:	6922      	ldr	r2, [r4, #16]
 800a598:	4293      	cmp	r3, r2
 800a59a:	dd01      	ble.n	800a5a0 <_printf_common+0x7c>
 800a59c:	1a9b      	subs	r3, r3, r2
 800a59e:	18ed      	adds	r5, r5, r3
 800a5a0:	2700      	movs	r7, #0
 800a5a2:	42bd      	cmp	r5, r7
 800a5a4:	d120      	bne.n	800a5e8 <_printf_common+0xc4>
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	e010      	b.n	800a5cc <_printf_common+0xa8>
 800a5aa:	3701      	adds	r7, #1
 800a5ac:	68e3      	ldr	r3, [r4, #12]
 800a5ae:	682a      	ldr	r2, [r5, #0]
 800a5b0:	1a9b      	subs	r3, r3, r2
 800a5b2:	42bb      	cmp	r3, r7
 800a5b4:	ddd2      	ble.n	800a55c <_printf_common+0x38>
 800a5b6:	0022      	movs	r2, r4
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	3219      	adds	r2, #25
 800a5bc:	9901      	ldr	r1, [sp, #4]
 800a5be:	9800      	ldr	r0, [sp, #0]
 800a5c0:	9e08      	ldr	r6, [sp, #32]
 800a5c2:	47b0      	blx	r6
 800a5c4:	1c43      	adds	r3, r0, #1
 800a5c6:	d1f0      	bne.n	800a5aa <_printf_common+0x86>
 800a5c8:	2001      	movs	r0, #1
 800a5ca:	4240      	negs	r0, r0
 800a5cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5ce:	2030      	movs	r0, #48	; 0x30
 800a5d0:	18e1      	adds	r1, r4, r3
 800a5d2:	3143      	adds	r1, #67	; 0x43
 800a5d4:	7008      	strb	r0, [r1, #0]
 800a5d6:	0021      	movs	r1, r4
 800a5d8:	1c5a      	adds	r2, r3, #1
 800a5da:	3145      	adds	r1, #69	; 0x45
 800a5dc:	7809      	ldrb	r1, [r1, #0]
 800a5de:	18a2      	adds	r2, r4, r2
 800a5e0:	3243      	adds	r2, #67	; 0x43
 800a5e2:	3302      	adds	r3, #2
 800a5e4:	7011      	strb	r1, [r2, #0]
 800a5e6:	e7c1      	b.n	800a56c <_printf_common+0x48>
 800a5e8:	0022      	movs	r2, r4
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	321a      	adds	r2, #26
 800a5ee:	9901      	ldr	r1, [sp, #4]
 800a5f0:	9800      	ldr	r0, [sp, #0]
 800a5f2:	9e08      	ldr	r6, [sp, #32]
 800a5f4:	47b0      	blx	r6
 800a5f6:	1c43      	adds	r3, r0, #1
 800a5f8:	d0e6      	beq.n	800a5c8 <_printf_common+0xa4>
 800a5fa:	3701      	adds	r7, #1
 800a5fc:	e7d1      	b.n	800a5a2 <_printf_common+0x7e>
	...

0800a600 <_printf_i>:
 800a600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a602:	b089      	sub	sp, #36	; 0x24
 800a604:	9204      	str	r2, [sp, #16]
 800a606:	000a      	movs	r2, r1
 800a608:	3243      	adds	r2, #67	; 0x43
 800a60a:	9305      	str	r3, [sp, #20]
 800a60c:	9003      	str	r0, [sp, #12]
 800a60e:	9202      	str	r2, [sp, #8]
 800a610:	7e0a      	ldrb	r2, [r1, #24]
 800a612:	000c      	movs	r4, r1
 800a614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a616:	2a6e      	cmp	r2, #110	; 0x6e
 800a618:	d100      	bne.n	800a61c <_printf_i+0x1c>
 800a61a:	e086      	b.n	800a72a <_printf_i+0x12a>
 800a61c:	d81f      	bhi.n	800a65e <_printf_i+0x5e>
 800a61e:	2a63      	cmp	r2, #99	; 0x63
 800a620:	d033      	beq.n	800a68a <_printf_i+0x8a>
 800a622:	d808      	bhi.n	800a636 <_printf_i+0x36>
 800a624:	2a00      	cmp	r2, #0
 800a626:	d100      	bne.n	800a62a <_printf_i+0x2a>
 800a628:	e08c      	b.n	800a744 <_printf_i+0x144>
 800a62a:	2a58      	cmp	r2, #88	; 0x58
 800a62c:	d04d      	beq.n	800a6ca <_printf_i+0xca>
 800a62e:	0025      	movs	r5, r4
 800a630:	3542      	adds	r5, #66	; 0x42
 800a632:	702a      	strb	r2, [r5, #0]
 800a634:	e030      	b.n	800a698 <_printf_i+0x98>
 800a636:	2a64      	cmp	r2, #100	; 0x64
 800a638:	d001      	beq.n	800a63e <_printf_i+0x3e>
 800a63a:	2a69      	cmp	r2, #105	; 0x69
 800a63c:	d1f7      	bne.n	800a62e <_printf_i+0x2e>
 800a63e:	6819      	ldr	r1, [r3, #0]
 800a640:	6825      	ldr	r5, [r4, #0]
 800a642:	1d0a      	adds	r2, r1, #4
 800a644:	0628      	lsls	r0, r5, #24
 800a646:	d529      	bpl.n	800a69c <_printf_i+0x9c>
 800a648:	6808      	ldr	r0, [r1, #0]
 800a64a:	601a      	str	r2, [r3, #0]
 800a64c:	2800      	cmp	r0, #0
 800a64e:	da03      	bge.n	800a658 <_printf_i+0x58>
 800a650:	232d      	movs	r3, #45	; 0x2d
 800a652:	9a02      	ldr	r2, [sp, #8]
 800a654:	4240      	negs	r0, r0
 800a656:	7013      	strb	r3, [r2, #0]
 800a658:	4e6b      	ldr	r6, [pc, #428]	; (800a808 <_printf_i+0x208>)
 800a65a:	270a      	movs	r7, #10
 800a65c:	e04f      	b.n	800a6fe <_printf_i+0xfe>
 800a65e:	2a73      	cmp	r2, #115	; 0x73
 800a660:	d074      	beq.n	800a74c <_printf_i+0x14c>
 800a662:	d808      	bhi.n	800a676 <_printf_i+0x76>
 800a664:	2a6f      	cmp	r2, #111	; 0x6f
 800a666:	d01f      	beq.n	800a6a8 <_printf_i+0xa8>
 800a668:	2a70      	cmp	r2, #112	; 0x70
 800a66a:	d1e0      	bne.n	800a62e <_printf_i+0x2e>
 800a66c:	2220      	movs	r2, #32
 800a66e:	6809      	ldr	r1, [r1, #0]
 800a670:	430a      	orrs	r2, r1
 800a672:	6022      	str	r2, [r4, #0]
 800a674:	e003      	b.n	800a67e <_printf_i+0x7e>
 800a676:	2a75      	cmp	r2, #117	; 0x75
 800a678:	d016      	beq.n	800a6a8 <_printf_i+0xa8>
 800a67a:	2a78      	cmp	r2, #120	; 0x78
 800a67c:	d1d7      	bne.n	800a62e <_printf_i+0x2e>
 800a67e:	0022      	movs	r2, r4
 800a680:	2178      	movs	r1, #120	; 0x78
 800a682:	3245      	adds	r2, #69	; 0x45
 800a684:	7011      	strb	r1, [r2, #0]
 800a686:	4e61      	ldr	r6, [pc, #388]	; (800a80c <_printf_i+0x20c>)
 800a688:	e022      	b.n	800a6d0 <_printf_i+0xd0>
 800a68a:	0025      	movs	r5, r4
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	3542      	adds	r5, #66	; 0x42
 800a690:	1d11      	adds	r1, r2, #4
 800a692:	6019      	str	r1, [r3, #0]
 800a694:	6813      	ldr	r3, [r2, #0]
 800a696:	702b      	strb	r3, [r5, #0]
 800a698:	2301      	movs	r3, #1
 800a69a:	e065      	b.n	800a768 <_printf_i+0x168>
 800a69c:	6808      	ldr	r0, [r1, #0]
 800a69e:	601a      	str	r2, [r3, #0]
 800a6a0:	0669      	lsls	r1, r5, #25
 800a6a2:	d5d3      	bpl.n	800a64c <_printf_i+0x4c>
 800a6a4:	b200      	sxth	r0, r0
 800a6a6:	e7d1      	b.n	800a64c <_printf_i+0x4c>
 800a6a8:	6819      	ldr	r1, [r3, #0]
 800a6aa:	6825      	ldr	r5, [r4, #0]
 800a6ac:	1d08      	adds	r0, r1, #4
 800a6ae:	6018      	str	r0, [r3, #0]
 800a6b0:	6808      	ldr	r0, [r1, #0]
 800a6b2:	062e      	lsls	r6, r5, #24
 800a6b4:	d505      	bpl.n	800a6c2 <_printf_i+0xc2>
 800a6b6:	4e54      	ldr	r6, [pc, #336]	; (800a808 <_printf_i+0x208>)
 800a6b8:	2708      	movs	r7, #8
 800a6ba:	2a6f      	cmp	r2, #111	; 0x6f
 800a6bc:	d01b      	beq.n	800a6f6 <_printf_i+0xf6>
 800a6be:	270a      	movs	r7, #10
 800a6c0:	e019      	b.n	800a6f6 <_printf_i+0xf6>
 800a6c2:	066d      	lsls	r5, r5, #25
 800a6c4:	d5f7      	bpl.n	800a6b6 <_printf_i+0xb6>
 800a6c6:	b280      	uxth	r0, r0
 800a6c8:	e7f5      	b.n	800a6b6 <_printf_i+0xb6>
 800a6ca:	3145      	adds	r1, #69	; 0x45
 800a6cc:	4e4e      	ldr	r6, [pc, #312]	; (800a808 <_printf_i+0x208>)
 800a6ce:	700a      	strb	r2, [r1, #0]
 800a6d0:	6818      	ldr	r0, [r3, #0]
 800a6d2:	6822      	ldr	r2, [r4, #0]
 800a6d4:	1d01      	adds	r1, r0, #4
 800a6d6:	6800      	ldr	r0, [r0, #0]
 800a6d8:	6019      	str	r1, [r3, #0]
 800a6da:	0615      	lsls	r5, r2, #24
 800a6dc:	d521      	bpl.n	800a722 <_printf_i+0x122>
 800a6de:	07d3      	lsls	r3, r2, #31
 800a6e0:	d502      	bpl.n	800a6e8 <_printf_i+0xe8>
 800a6e2:	2320      	movs	r3, #32
 800a6e4:	431a      	orrs	r2, r3
 800a6e6:	6022      	str	r2, [r4, #0]
 800a6e8:	2710      	movs	r7, #16
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	d103      	bne.n	800a6f6 <_printf_i+0xf6>
 800a6ee:	2320      	movs	r3, #32
 800a6f0:	6822      	ldr	r2, [r4, #0]
 800a6f2:	439a      	bics	r2, r3
 800a6f4:	6022      	str	r2, [r4, #0]
 800a6f6:	0023      	movs	r3, r4
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	3343      	adds	r3, #67	; 0x43
 800a6fc:	701a      	strb	r2, [r3, #0]
 800a6fe:	6863      	ldr	r3, [r4, #4]
 800a700:	60a3      	str	r3, [r4, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	db58      	blt.n	800a7b8 <_printf_i+0x1b8>
 800a706:	2204      	movs	r2, #4
 800a708:	6821      	ldr	r1, [r4, #0]
 800a70a:	4391      	bics	r1, r2
 800a70c:	6021      	str	r1, [r4, #0]
 800a70e:	2800      	cmp	r0, #0
 800a710:	d154      	bne.n	800a7bc <_printf_i+0x1bc>
 800a712:	9d02      	ldr	r5, [sp, #8]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d05a      	beq.n	800a7ce <_printf_i+0x1ce>
 800a718:	0025      	movs	r5, r4
 800a71a:	7833      	ldrb	r3, [r6, #0]
 800a71c:	3542      	adds	r5, #66	; 0x42
 800a71e:	702b      	strb	r3, [r5, #0]
 800a720:	e055      	b.n	800a7ce <_printf_i+0x1ce>
 800a722:	0655      	lsls	r5, r2, #25
 800a724:	d5db      	bpl.n	800a6de <_printf_i+0xde>
 800a726:	b280      	uxth	r0, r0
 800a728:	e7d9      	b.n	800a6de <_printf_i+0xde>
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	680d      	ldr	r5, [r1, #0]
 800a72e:	1d10      	adds	r0, r2, #4
 800a730:	6949      	ldr	r1, [r1, #20]
 800a732:	6018      	str	r0, [r3, #0]
 800a734:	6813      	ldr	r3, [r2, #0]
 800a736:	062e      	lsls	r6, r5, #24
 800a738:	d501      	bpl.n	800a73e <_printf_i+0x13e>
 800a73a:	6019      	str	r1, [r3, #0]
 800a73c:	e002      	b.n	800a744 <_printf_i+0x144>
 800a73e:	066d      	lsls	r5, r5, #25
 800a740:	d5fb      	bpl.n	800a73a <_printf_i+0x13a>
 800a742:	8019      	strh	r1, [r3, #0]
 800a744:	2300      	movs	r3, #0
 800a746:	9d02      	ldr	r5, [sp, #8]
 800a748:	6123      	str	r3, [r4, #16]
 800a74a:	e04f      	b.n	800a7ec <_printf_i+0x1ec>
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	1d11      	adds	r1, r2, #4
 800a750:	6019      	str	r1, [r3, #0]
 800a752:	6815      	ldr	r5, [r2, #0]
 800a754:	2100      	movs	r1, #0
 800a756:	6862      	ldr	r2, [r4, #4]
 800a758:	0028      	movs	r0, r5
 800a75a:	f000 fb79 	bl	800ae50 <memchr>
 800a75e:	2800      	cmp	r0, #0
 800a760:	d001      	beq.n	800a766 <_printf_i+0x166>
 800a762:	1b40      	subs	r0, r0, r5
 800a764:	6060      	str	r0, [r4, #4]
 800a766:	6863      	ldr	r3, [r4, #4]
 800a768:	6123      	str	r3, [r4, #16]
 800a76a:	2300      	movs	r3, #0
 800a76c:	9a02      	ldr	r2, [sp, #8]
 800a76e:	7013      	strb	r3, [r2, #0]
 800a770:	e03c      	b.n	800a7ec <_printf_i+0x1ec>
 800a772:	6923      	ldr	r3, [r4, #16]
 800a774:	002a      	movs	r2, r5
 800a776:	9904      	ldr	r1, [sp, #16]
 800a778:	9803      	ldr	r0, [sp, #12]
 800a77a:	9d05      	ldr	r5, [sp, #20]
 800a77c:	47a8      	blx	r5
 800a77e:	1c43      	adds	r3, r0, #1
 800a780:	d03e      	beq.n	800a800 <_printf_i+0x200>
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	079b      	lsls	r3, r3, #30
 800a786:	d415      	bmi.n	800a7b4 <_printf_i+0x1b4>
 800a788:	9b07      	ldr	r3, [sp, #28]
 800a78a:	68e0      	ldr	r0, [r4, #12]
 800a78c:	4298      	cmp	r0, r3
 800a78e:	da39      	bge.n	800a804 <_printf_i+0x204>
 800a790:	0018      	movs	r0, r3
 800a792:	e037      	b.n	800a804 <_printf_i+0x204>
 800a794:	0022      	movs	r2, r4
 800a796:	2301      	movs	r3, #1
 800a798:	3219      	adds	r2, #25
 800a79a:	9904      	ldr	r1, [sp, #16]
 800a79c:	9803      	ldr	r0, [sp, #12]
 800a79e:	9e05      	ldr	r6, [sp, #20]
 800a7a0:	47b0      	blx	r6
 800a7a2:	1c43      	adds	r3, r0, #1
 800a7a4:	d02c      	beq.n	800a800 <_printf_i+0x200>
 800a7a6:	3501      	adds	r5, #1
 800a7a8:	68e3      	ldr	r3, [r4, #12]
 800a7aa:	9a07      	ldr	r2, [sp, #28]
 800a7ac:	1a9b      	subs	r3, r3, r2
 800a7ae:	42ab      	cmp	r3, r5
 800a7b0:	dcf0      	bgt.n	800a794 <_printf_i+0x194>
 800a7b2:	e7e9      	b.n	800a788 <_printf_i+0x188>
 800a7b4:	2500      	movs	r5, #0
 800a7b6:	e7f7      	b.n	800a7a8 <_printf_i+0x1a8>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d0ad      	beq.n	800a718 <_printf_i+0x118>
 800a7bc:	9d02      	ldr	r5, [sp, #8]
 800a7be:	0039      	movs	r1, r7
 800a7c0:	f7f5 fd30 	bl	8000224 <__aeabi_uidivmod>
 800a7c4:	5c73      	ldrb	r3, [r6, r1]
 800a7c6:	3d01      	subs	r5, #1
 800a7c8:	702b      	strb	r3, [r5, #0]
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d1f7      	bne.n	800a7be <_printf_i+0x1be>
 800a7ce:	2f08      	cmp	r7, #8
 800a7d0:	d109      	bne.n	800a7e6 <_printf_i+0x1e6>
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	07db      	lsls	r3, r3, #31
 800a7d6:	d506      	bpl.n	800a7e6 <_printf_i+0x1e6>
 800a7d8:	6863      	ldr	r3, [r4, #4]
 800a7da:	6922      	ldr	r2, [r4, #16]
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	dc02      	bgt.n	800a7e6 <_printf_i+0x1e6>
 800a7e0:	2330      	movs	r3, #48	; 0x30
 800a7e2:	3d01      	subs	r5, #1
 800a7e4:	702b      	strb	r3, [r5, #0]
 800a7e6:	9b02      	ldr	r3, [sp, #8]
 800a7e8:	1b5b      	subs	r3, r3, r5
 800a7ea:	6123      	str	r3, [r4, #16]
 800a7ec:	9b05      	ldr	r3, [sp, #20]
 800a7ee:	aa07      	add	r2, sp, #28
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	0021      	movs	r1, r4
 800a7f4:	9b04      	ldr	r3, [sp, #16]
 800a7f6:	9803      	ldr	r0, [sp, #12]
 800a7f8:	f7ff fe94 	bl	800a524 <_printf_common>
 800a7fc:	1c43      	adds	r3, r0, #1
 800a7fe:	d1b8      	bne.n	800a772 <_printf_i+0x172>
 800a800:	2001      	movs	r0, #1
 800a802:	4240      	negs	r0, r0
 800a804:	b009      	add	sp, #36	; 0x24
 800a806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a808:	0800d451 	.word	0x0800d451
 800a80c:	0800d462 	.word	0x0800d462

0800a810 <_scanf_chars>:
 800a810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a812:	0015      	movs	r5, r2
 800a814:	688a      	ldr	r2, [r1, #8]
 800a816:	9001      	str	r0, [sp, #4]
 800a818:	000c      	movs	r4, r1
 800a81a:	2a00      	cmp	r2, #0
 800a81c:	d104      	bne.n	800a828 <_scanf_chars+0x18>
 800a81e:	698a      	ldr	r2, [r1, #24]
 800a820:	2a00      	cmp	r2, #0
 800a822:	d117      	bne.n	800a854 <_scanf_chars+0x44>
 800a824:	3201      	adds	r2, #1
 800a826:	60a2      	str	r2, [r4, #8]
 800a828:	6822      	ldr	r2, [r4, #0]
 800a82a:	06d2      	lsls	r2, r2, #27
 800a82c:	d403      	bmi.n	800a836 <_scanf_chars+0x26>
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	1d11      	adds	r1, r2, #4
 800a832:	6019      	str	r1, [r3, #0]
 800a834:	6817      	ldr	r7, [r2, #0]
 800a836:	2600      	movs	r6, #0
 800a838:	69a3      	ldr	r3, [r4, #24]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d01f      	beq.n	800a87e <_scanf_chars+0x6e>
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d10b      	bne.n	800a85a <_scanf_chars+0x4a>
 800a842:	682b      	ldr	r3, [r5, #0]
 800a844:	6962      	ldr	r2, [r4, #20]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	5cd3      	ldrb	r3, [r2, r3]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d117      	bne.n	800a87e <_scanf_chars+0x6e>
 800a84e:	2e00      	cmp	r6, #0
 800a850:	d133      	bne.n	800a8ba <_scanf_chars+0xaa>
 800a852:	e009      	b.n	800a868 <_scanf_chars+0x58>
 800a854:	2201      	movs	r2, #1
 800a856:	4252      	negs	r2, r2
 800a858:	e7e5      	b.n	800a826 <_scanf_chars+0x16>
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d006      	beq.n	800a86c <_scanf_chars+0x5c>
 800a85e:	2e00      	cmp	r6, #0
 800a860:	d12b      	bne.n	800a8ba <_scanf_chars+0xaa>
 800a862:	69a3      	ldr	r3, [r4, #24]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d128      	bne.n	800a8ba <_scanf_chars+0xaa>
 800a868:	2001      	movs	r0, #1
 800a86a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a86c:	f000 fad0 	bl	800ae10 <__locale_ctype_ptr>
 800a870:	2208      	movs	r2, #8
 800a872:	682b      	ldr	r3, [r5, #0]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	18c0      	adds	r0, r0, r3
 800a878:	7843      	ldrb	r3, [r0, #1]
 800a87a:	4213      	tst	r3, r2
 800a87c:	d1ef      	bne.n	800a85e <_scanf_chars+0x4e>
 800a87e:	2210      	movs	r2, #16
 800a880:	6823      	ldr	r3, [r4, #0]
 800a882:	3601      	adds	r6, #1
 800a884:	4213      	tst	r3, r2
 800a886:	d103      	bne.n	800a890 <_scanf_chars+0x80>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	703b      	strb	r3, [r7, #0]
 800a88e:	3701      	adds	r7, #1
 800a890:	682a      	ldr	r2, [r5, #0]
 800a892:	686b      	ldr	r3, [r5, #4]
 800a894:	3201      	adds	r2, #1
 800a896:	602a      	str	r2, [r5, #0]
 800a898:	68a2      	ldr	r2, [r4, #8]
 800a89a:	3b01      	subs	r3, #1
 800a89c:	3a01      	subs	r2, #1
 800a89e:	606b      	str	r3, [r5, #4]
 800a8a0:	60a2      	str	r2, [r4, #8]
 800a8a2:	2a00      	cmp	r2, #0
 800a8a4:	d009      	beq.n	800a8ba <_scanf_chars+0xaa>
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	dcc6      	bgt.n	800a838 <_scanf_chars+0x28>
 800a8aa:	23c0      	movs	r3, #192	; 0xc0
 800a8ac:	005b      	lsls	r3, r3, #1
 800a8ae:	58e3      	ldr	r3, [r4, r3]
 800a8b0:	0029      	movs	r1, r5
 800a8b2:	9801      	ldr	r0, [sp, #4]
 800a8b4:	4798      	blx	r3
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d0be      	beq.n	800a838 <_scanf_chars+0x28>
 800a8ba:	2310      	movs	r3, #16
 800a8bc:	6822      	ldr	r2, [r4, #0]
 800a8be:	4013      	ands	r3, r2
 800a8c0:	d106      	bne.n	800a8d0 <_scanf_chars+0xc0>
 800a8c2:	68e2      	ldr	r2, [r4, #12]
 800a8c4:	3201      	adds	r2, #1
 800a8c6:	60e2      	str	r2, [r4, #12]
 800a8c8:	69a2      	ldr	r2, [r4, #24]
 800a8ca:	2a00      	cmp	r2, #0
 800a8cc:	d000      	beq.n	800a8d0 <_scanf_chars+0xc0>
 800a8ce:	703b      	strb	r3, [r7, #0]
 800a8d0:	6923      	ldr	r3, [r4, #16]
 800a8d2:	2000      	movs	r0, #0
 800a8d4:	199e      	adds	r6, r3, r6
 800a8d6:	6126      	str	r6, [r4, #16]
 800a8d8:	e7c7      	b.n	800a86a <_scanf_chars+0x5a>
	...

0800a8dc <_scanf_i>:
 800a8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8de:	000c      	movs	r4, r1
 800a8e0:	b08b      	sub	sp, #44	; 0x2c
 800a8e2:	9302      	str	r3, [sp, #8]
 800a8e4:	4b78      	ldr	r3, [pc, #480]	; (800aac8 <_scanf_i+0x1ec>)
 800a8e6:	9004      	str	r0, [sp, #16]
 800a8e8:	0016      	movs	r6, r2
 800a8ea:	aa07      	add	r2, sp, #28
 800a8ec:	cb23      	ldmia	r3!, {r0, r1, r5}
 800a8ee:	c223      	stmia	r2!, {r0, r1, r5}
 800a8f0:	4b76      	ldr	r3, [pc, #472]	; (800aacc <_scanf_i+0x1f0>)
 800a8f2:	9305      	str	r3, [sp, #20]
 800a8f4:	69a3      	ldr	r3, [r4, #24]
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	d101      	bne.n	800a8fe <_scanf_i+0x22>
 800a8fa:	4b75      	ldr	r3, [pc, #468]	; (800aad0 <_scanf_i+0x1f4>)
 800a8fc:	9305      	str	r3, [sp, #20]
 800a8fe:	22ae      	movs	r2, #174	; 0xae
 800a900:	2000      	movs	r0, #0
 800a902:	68a3      	ldr	r3, [r4, #8]
 800a904:	0052      	lsls	r2, r2, #1
 800a906:	1e59      	subs	r1, r3, #1
 800a908:	9003      	str	r0, [sp, #12]
 800a90a:	4291      	cmp	r1, r2
 800a90c:	d905      	bls.n	800a91a <_scanf_i+0x3e>
 800a90e:	3b5e      	subs	r3, #94	; 0x5e
 800a910:	3bff      	subs	r3, #255	; 0xff
 800a912:	9303      	str	r3, [sp, #12]
 800a914:	235e      	movs	r3, #94	; 0x5e
 800a916:	33ff      	adds	r3, #255	; 0xff
 800a918:	60a3      	str	r3, [r4, #8]
 800a91a:	0023      	movs	r3, r4
 800a91c:	331c      	adds	r3, #28
 800a91e:	9301      	str	r3, [sp, #4]
 800a920:	23d0      	movs	r3, #208	; 0xd0
 800a922:	2700      	movs	r7, #0
 800a924:	6822      	ldr	r2, [r4, #0]
 800a926:	011b      	lsls	r3, r3, #4
 800a928:	4313      	orrs	r3, r2
 800a92a:	6023      	str	r3, [r4, #0]
 800a92c:	9b01      	ldr	r3, [sp, #4]
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	6833      	ldr	r3, [r6, #0]
 800a932:	a807      	add	r0, sp, #28
 800a934:	7819      	ldrb	r1, [r3, #0]
 800a936:	00bb      	lsls	r3, r7, #2
 800a938:	2202      	movs	r2, #2
 800a93a:	5818      	ldr	r0, [r3, r0]
 800a93c:	f000 fa88 	bl	800ae50 <memchr>
 800a940:	2800      	cmp	r0, #0
 800a942:	d02b      	beq.n	800a99c <_scanf_i+0xc0>
 800a944:	2f01      	cmp	r7, #1
 800a946:	d162      	bne.n	800aa0e <_scanf_i+0x132>
 800a948:	6863      	ldr	r3, [r4, #4]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d106      	bne.n	800a95c <_scanf_i+0x80>
 800a94e:	3308      	adds	r3, #8
 800a950:	6822      	ldr	r2, [r4, #0]
 800a952:	6063      	str	r3, [r4, #4]
 800a954:	33f9      	adds	r3, #249	; 0xf9
 800a956:	33ff      	adds	r3, #255	; 0xff
 800a958:	4313      	orrs	r3, r2
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	4b5d      	ldr	r3, [pc, #372]	; (800aad4 <_scanf_i+0x1f8>)
 800a95e:	6822      	ldr	r2, [r4, #0]
 800a960:	4013      	ands	r3, r2
 800a962:	6023      	str	r3, [r4, #0]
 800a964:	68a3      	ldr	r3, [r4, #8]
 800a966:	1e5a      	subs	r2, r3, #1
 800a968:	60a2      	str	r2, [r4, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d016      	beq.n	800a99c <_scanf_i+0xc0>
 800a96e:	6833      	ldr	r3, [r6, #0]
 800a970:	1c5a      	adds	r2, r3, #1
 800a972:	6032      	str	r2, [r6, #0]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	9a00      	ldr	r2, [sp, #0]
 800a978:	7013      	strb	r3, [r2, #0]
 800a97a:	6873      	ldr	r3, [r6, #4]
 800a97c:	1c55      	adds	r5, r2, #1
 800a97e:	3b01      	subs	r3, #1
 800a980:	6073      	str	r3, [r6, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	dc09      	bgt.n	800a99a <_scanf_i+0xbe>
 800a986:	23c0      	movs	r3, #192	; 0xc0
 800a988:	005b      	lsls	r3, r3, #1
 800a98a:	58e3      	ldr	r3, [r4, r3]
 800a98c:	0031      	movs	r1, r6
 800a98e:	9804      	ldr	r0, [sp, #16]
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	4798      	blx	r3
 800a994:	2800      	cmp	r0, #0
 800a996:	d000      	beq.n	800a99a <_scanf_i+0xbe>
 800a998:	e080      	b.n	800aa9c <_scanf_i+0x1c0>
 800a99a:	9500      	str	r5, [sp, #0]
 800a99c:	3701      	adds	r7, #1
 800a99e:	2f03      	cmp	r7, #3
 800a9a0:	d1c6      	bne.n	800a930 <_scanf_i+0x54>
 800a9a2:	6863      	ldr	r3, [r4, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d101      	bne.n	800a9ac <_scanf_i+0xd0>
 800a9a8:	330a      	adds	r3, #10
 800a9aa:	6063      	str	r3, [r4, #4]
 800a9ac:	2110      	movs	r1, #16
 800a9ae:	2700      	movs	r7, #0
 800a9b0:	6863      	ldr	r3, [r4, #4]
 800a9b2:	6960      	ldr	r0, [r4, #20]
 800a9b4:	1ac9      	subs	r1, r1, r3
 800a9b6:	4b48      	ldr	r3, [pc, #288]	; (800aad8 <_scanf_i+0x1fc>)
 800a9b8:	18c9      	adds	r1, r1, r3
 800a9ba:	f000 f891 	bl	800aae0 <__sccl>
 800a9be:	9d00      	ldr	r5, [sp, #0]
 800a9c0:	68a3      	ldr	r3, [r4, #8]
 800a9c2:	6822      	ldr	r2, [r4, #0]
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d041      	beq.n	800aa4e <_scanf_i+0x172>
 800a9ca:	6831      	ldr	r1, [r6, #0]
 800a9cc:	6963      	ldr	r3, [r4, #20]
 800a9ce:	7808      	ldrb	r0, [r1, #0]
 800a9d0:	5c1b      	ldrb	r3, [r3, r0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d03b      	beq.n	800aa4e <_scanf_i+0x172>
 800a9d6:	2830      	cmp	r0, #48	; 0x30
 800a9d8:	d129      	bne.n	800aa2e <_scanf_i+0x152>
 800a9da:	2380      	movs	r3, #128	; 0x80
 800a9dc:	011b      	lsls	r3, r3, #4
 800a9de:	421a      	tst	r2, r3
 800a9e0:	d025      	beq.n	800aa2e <_scanf_i+0x152>
 800a9e2:	9b03      	ldr	r3, [sp, #12]
 800a9e4:	3701      	adds	r7, #1
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d005      	beq.n	800a9f6 <_scanf_i+0x11a>
 800a9ea:	001a      	movs	r2, r3
 800a9ec:	9b00      	ldr	r3, [sp, #0]
 800a9ee:	3a01      	subs	r2, #1
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	9203      	str	r2, [sp, #12]
 800a9f4:	60a3      	str	r3, [r4, #8]
 800a9f6:	6873      	ldr	r3, [r6, #4]
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	6073      	str	r3, [r6, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	dd1d      	ble.n	800aa3c <_scanf_i+0x160>
 800aa00:	6833      	ldr	r3, [r6, #0]
 800aa02:	3301      	adds	r3, #1
 800aa04:	6033      	str	r3, [r6, #0]
 800aa06:	68a3      	ldr	r3, [r4, #8]
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	60a3      	str	r3, [r4, #8]
 800aa0c:	e7d8      	b.n	800a9c0 <_scanf_i+0xe4>
 800aa0e:	2f02      	cmp	r7, #2
 800aa10:	d1a8      	bne.n	800a964 <_scanf_i+0x88>
 800aa12:	21c0      	movs	r1, #192	; 0xc0
 800aa14:	2380      	movs	r3, #128	; 0x80
 800aa16:	6822      	ldr	r2, [r4, #0]
 800aa18:	00c9      	lsls	r1, r1, #3
 800aa1a:	4011      	ands	r1, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4299      	cmp	r1, r3
 800aa20:	d1bf      	bne.n	800a9a2 <_scanf_i+0xc6>
 800aa22:	3bf1      	subs	r3, #241	; 0xf1
 800aa24:	3bff      	subs	r3, #255	; 0xff
 800aa26:	6063      	str	r3, [r4, #4]
 800aa28:	33f0      	adds	r3, #240	; 0xf0
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	e799      	b.n	800a962 <_scanf_i+0x86>
 800aa2e:	4b2b      	ldr	r3, [pc, #172]	; (800aadc <_scanf_i+0x200>)
 800aa30:	4013      	ands	r3, r2
 800aa32:	6023      	str	r3, [r4, #0]
 800aa34:	780b      	ldrb	r3, [r1, #0]
 800aa36:	702b      	strb	r3, [r5, #0]
 800aa38:	3501      	adds	r5, #1
 800aa3a:	e7dc      	b.n	800a9f6 <_scanf_i+0x11a>
 800aa3c:	23c0      	movs	r3, #192	; 0xc0
 800aa3e:	005b      	lsls	r3, r3, #1
 800aa40:	58e3      	ldr	r3, [r4, r3]
 800aa42:	0031      	movs	r1, r6
 800aa44:	9804      	ldr	r0, [sp, #16]
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	4798      	blx	r3
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d0db      	beq.n	800aa06 <_scanf_i+0x12a>
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	05db      	lsls	r3, r3, #23
 800aa52:	d50e      	bpl.n	800aa72 <_scanf_i+0x196>
 800aa54:	9b01      	ldr	r3, [sp, #4]
 800aa56:	429d      	cmp	r5, r3
 800aa58:	d907      	bls.n	800aa6a <_scanf_i+0x18e>
 800aa5a:	23be      	movs	r3, #190	; 0xbe
 800aa5c:	3d01      	subs	r5, #1
 800aa5e:	005b      	lsls	r3, r3, #1
 800aa60:	7829      	ldrb	r1, [r5, #0]
 800aa62:	58e3      	ldr	r3, [r4, r3]
 800aa64:	0032      	movs	r2, r6
 800aa66:	9804      	ldr	r0, [sp, #16]
 800aa68:	4798      	blx	r3
 800aa6a:	9b01      	ldr	r3, [sp, #4]
 800aa6c:	2001      	movs	r0, #1
 800aa6e:	429d      	cmp	r5, r3
 800aa70:	d027      	beq.n	800aac2 <_scanf_i+0x1e6>
 800aa72:	2210      	movs	r2, #16
 800aa74:	6823      	ldr	r3, [r4, #0]
 800aa76:	401a      	ands	r2, r3
 800aa78:	d11c      	bne.n	800aab4 <_scanf_i+0x1d8>
 800aa7a:	702a      	strb	r2, [r5, #0]
 800aa7c:	6863      	ldr	r3, [r4, #4]
 800aa7e:	9901      	ldr	r1, [sp, #4]
 800aa80:	9804      	ldr	r0, [sp, #16]
 800aa82:	9e05      	ldr	r6, [sp, #20]
 800aa84:	47b0      	blx	r6
 800aa86:	9b02      	ldr	r3, [sp, #8]
 800aa88:	6821      	ldr	r1, [r4, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	068a      	lsls	r2, r1, #26
 800aa8e:	d507      	bpl.n	800aaa0 <_scanf_i+0x1c4>
 800aa90:	1d1a      	adds	r2, r3, #4
 800aa92:	9902      	ldr	r1, [sp, #8]
 800aa94:	600a      	str	r2, [r1, #0]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6018      	str	r0, [r3, #0]
 800aa9a:	e008      	b.n	800aaae <_scanf_i+0x1d2>
 800aa9c:	2700      	movs	r7, #0
 800aa9e:	e7d6      	b.n	800aa4e <_scanf_i+0x172>
 800aaa0:	1d1a      	adds	r2, r3, #4
 800aaa2:	07ce      	lsls	r6, r1, #31
 800aaa4:	d5f5      	bpl.n	800aa92 <_scanf_i+0x1b6>
 800aaa6:	9902      	ldr	r1, [sp, #8]
 800aaa8:	600a      	str	r2, [r1, #0]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	8018      	strh	r0, [r3, #0]
 800aaae:	68e3      	ldr	r3, [r4, #12]
 800aab0:	3301      	adds	r3, #1
 800aab2:	60e3      	str	r3, [r4, #12]
 800aab4:	2000      	movs	r0, #0
 800aab6:	9b01      	ldr	r3, [sp, #4]
 800aab8:	1aed      	subs	r5, r5, r3
 800aaba:	6923      	ldr	r3, [r4, #16]
 800aabc:	19ef      	adds	r7, r5, r7
 800aabe:	19df      	adds	r7, r3, r7
 800aac0:	6127      	str	r7, [r4, #16]
 800aac2:	b00b      	add	sp, #44	; 0x2c
 800aac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aac6:	46c0      	nop			; (mov r8, r8)
 800aac8:	0800b2a0 	.word	0x0800b2a0
 800aacc:	0800ad6d 	.word	0x0800ad6d
 800aad0:	0800ac45 	.word	0x0800ac45
 800aad4:	fffffaff 	.word	0xfffffaff
 800aad8:	0800d473 	.word	0x0800d473
 800aadc:	fffff6ff 	.word	0xfffff6ff

0800aae0 <__sccl>:
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	780b      	ldrb	r3, [r1, #0]
 800aae4:	0005      	movs	r5, r0
 800aae6:	2b5e      	cmp	r3, #94	; 0x5e
 800aae8:	d018      	beq.n	800ab1c <__sccl+0x3c>
 800aaea:	1c4a      	adds	r2, r1, #1
 800aaec:	2100      	movs	r1, #0
 800aaee:	0028      	movs	r0, r5
 800aaf0:	1c6c      	adds	r4, r5, #1
 800aaf2:	34ff      	adds	r4, #255	; 0xff
 800aaf4:	7001      	strb	r1, [r0, #0]
 800aaf6:	3001      	adds	r0, #1
 800aaf8:	42a0      	cmp	r0, r4
 800aafa:	d1fb      	bne.n	800aaf4 <__sccl+0x14>
 800aafc:	1e50      	subs	r0, r2, #1
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00b      	beq.n	800ab1a <__sccl+0x3a>
 800ab02:	2001      	movs	r0, #1
 800ab04:	4041      	eors	r1, r0
 800ab06:	54e9      	strb	r1, [r5, r3]
 800ab08:	7814      	ldrb	r4, [r2, #0]
 800ab0a:	1c50      	adds	r0, r2, #1
 800ab0c:	2c2d      	cmp	r4, #45	; 0x2d
 800ab0e:	d00c      	beq.n	800ab2a <__sccl+0x4a>
 800ab10:	2c5d      	cmp	r4, #93	; 0x5d
 800ab12:	d002      	beq.n	800ab1a <__sccl+0x3a>
 800ab14:	2c00      	cmp	r4, #0
 800ab16:	d105      	bne.n	800ab24 <__sccl+0x44>
 800ab18:	0010      	movs	r0, r2
 800ab1a:	bd70      	pop	{r4, r5, r6, pc}
 800ab1c:	1c8a      	adds	r2, r1, #2
 800ab1e:	784b      	ldrb	r3, [r1, #1]
 800ab20:	2101      	movs	r1, #1
 800ab22:	e7e4      	b.n	800aaee <__sccl+0xe>
 800ab24:	0023      	movs	r3, r4
 800ab26:	0002      	movs	r2, r0
 800ab28:	e7ed      	b.n	800ab06 <__sccl+0x26>
 800ab2a:	7856      	ldrb	r6, [r2, #1]
 800ab2c:	2e5d      	cmp	r6, #93	; 0x5d
 800ab2e:	d0f9      	beq.n	800ab24 <__sccl+0x44>
 800ab30:	42b3      	cmp	r3, r6
 800ab32:	dcf7      	bgt.n	800ab24 <__sccl+0x44>
 800ab34:	3202      	adds	r2, #2
 800ab36:	3301      	adds	r3, #1
 800ab38:	54e9      	strb	r1, [r5, r3]
 800ab3a:	429e      	cmp	r6, r3
 800ab3c:	dcfb      	bgt.n	800ab36 <__sccl+0x56>
 800ab3e:	e7e3      	b.n	800ab08 <__sccl+0x28>

0800ab40 <_strtol_l.isra.0>:
 800ab40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab42:	001f      	movs	r7, r3
 800ab44:	000e      	movs	r6, r1
 800ab46:	b087      	sub	sp, #28
 800ab48:	9005      	str	r0, [sp, #20]
 800ab4a:	9101      	str	r1, [sp, #4]
 800ab4c:	9202      	str	r2, [sp, #8]
 800ab4e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ab50:	7834      	ldrb	r4, [r6, #0]
 800ab52:	f000 f959 	bl	800ae08 <__locale_ctype_ptr_l>
 800ab56:	2208      	movs	r2, #8
 800ab58:	1900      	adds	r0, r0, r4
 800ab5a:	7843      	ldrb	r3, [r0, #1]
 800ab5c:	1c75      	adds	r5, r6, #1
 800ab5e:	4013      	ands	r3, r2
 800ab60:	d136      	bne.n	800abd0 <_strtol_l.isra.0+0x90>
 800ab62:	2c2d      	cmp	r4, #45	; 0x2d
 800ab64:	d136      	bne.n	800abd4 <_strtol_l.isra.0+0x94>
 800ab66:	1cb5      	adds	r5, r6, #2
 800ab68:	7874      	ldrb	r4, [r6, #1]
 800ab6a:	2601      	movs	r6, #1
 800ab6c:	2f00      	cmp	r7, #0
 800ab6e:	d062      	beq.n	800ac36 <_strtol_l.isra.0+0xf6>
 800ab70:	2f10      	cmp	r7, #16
 800ab72:	d109      	bne.n	800ab88 <_strtol_l.isra.0+0x48>
 800ab74:	2c30      	cmp	r4, #48	; 0x30
 800ab76:	d107      	bne.n	800ab88 <_strtol_l.isra.0+0x48>
 800ab78:	2220      	movs	r2, #32
 800ab7a:	782b      	ldrb	r3, [r5, #0]
 800ab7c:	4393      	bics	r3, r2
 800ab7e:	2b58      	cmp	r3, #88	; 0x58
 800ab80:	d154      	bne.n	800ac2c <_strtol_l.isra.0+0xec>
 800ab82:	2710      	movs	r7, #16
 800ab84:	786c      	ldrb	r4, [r5, #1]
 800ab86:	3502      	adds	r5, #2
 800ab88:	4b2d      	ldr	r3, [pc, #180]	; (800ac40 <_strtol_l.isra.0+0x100>)
 800ab8a:	0039      	movs	r1, r7
 800ab8c:	18f3      	adds	r3, r6, r3
 800ab8e:	0018      	movs	r0, r3
 800ab90:	9303      	str	r3, [sp, #12]
 800ab92:	f7f5 fb47 	bl	8000224 <__aeabi_uidivmod>
 800ab96:	9104      	str	r1, [sp, #16]
 800ab98:	2101      	movs	r1, #1
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	4249      	negs	r1, r1
 800ab9e:	0002      	movs	r2, r0
 800aba0:	468c      	mov	ip, r1
 800aba2:	0018      	movs	r0, r3
 800aba4:	0021      	movs	r1, r4
 800aba6:	3930      	subs	r1, #48	; 0x30
 800aba8:	2909      	cmp	r1, #9
 800abaa:	d81a      	bhi.n	800abe2 <_strtol_l.isra.0+0xa2>
 800abac:	000c      	movs	r4, r1
 800abae:	42a7      	cmp	r7, r4
 800abb0:	dd23      	ble.n	800abfa <_strtol_l.isra.0+0xba>
 800abb2:	1c59      	adds	r1, r3, #1
 800abb4:	d009      	beq.n	800abca <_strtol_l.isra.0+0x8a>
 800abb6:	4663      	mov	r3, ip
 800abb8:	4282      	cmp	r2, r0
 800abba:	d306      	bcc.n	800abca <_strtol_l.isra.0+0x8a>
 800abbc:	d102      	bne.n	800abc4 <_strtol_l.isra.0+0x84>
 800abbe:	9904      	ldr	r1, [sp, #16]
 800abc0:	42a1      	cmp	r1, r4
 800abc2:	db02      	blt.n	800abca <_strtol_l.isra.0+0x8a>
 800abc4:	2301      	movs	r3, #1
 800abc6:	4378      	muls	r0, r7
 800abc8:	1820      	adds	r0, r4, r0
 800abca:	782c      	ldrb	r4, [r5, #0]
 800abcc:	3501      	adds	r5, #1
 800abce:	e7e9      	b.n	800aba4 <_strtol_l.isra.0+0x64>
 800abd0:	002e      	movs	r6, r5
 800abd2:	e7bc      	b.n	800ab4e <_strtol_l.isra.0+0xe>
 800abd4:	2c2b      	cmp	r4, #43	; 0x2b
 800abd6:	d001      	beq.n	800abdc <_strtol_l.isra.0+0x9c>
 800abd8:	001e      	movs	r6, r3
 800abda:	e7c7      	b.n	800ab6c <_strtol_l.isra.0+0x2c>
 800abdc:	1cb5      	adds	r5, r6, #2
 800abde:	7874      	ldrb	r4, [r6, #1]
 800abe0:	e7fa      	b.n	800abd8 <_strtol_l.isra.0+0x98>
 800abe2:	0021      	movs	r1, r4
 800abe4:	3941      	subs	r1, #65	; 0x41
 800abe6:	2919      	cmp	r1, #25
 800abe8:	d801      	bhi.n	800abee <_strtol_l.isra.0+0xae>
 800abea:	3c37      	subs	r4, #55	; 0x37
 800abec:	e7df      	b.n	800abae <_strtol_l.isra.0+0x6e>
 800abee:	0021      	movs	r1, r4
 800abf0:	3961      	subs	r1, #97	; 0x61
 800abf2:	2919      	cmp	r1, #25
 800abf4:	d801      	bhi.n	800abfa <_strtol_l.isra.0+0xba>
 800abf6:	3c57      	subs	r4, #87	; 0x57
 800abf8:	e7d9      	b.n	800abae <_strtol_l.isra.0+0x6e>
 800abfa:	1c5a      	adds	r2, r3, #1
 800abfc:	d108      	bne.n	800ac10 <_strtol_l.isra.0+0xd0>
 800abfe:	9a05      	ldr	r2, [sp, #20]
 800ac00:	3323      	adds	r3, #35	; 0x23
 800ac02:	6013      	str	r3, [r2, #0]
 800ac04:	9b02      	ldr	r3, [sp, #8]
 800ac06:	9803      	ldr	r0, [sp, #12]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d109      	bne.n	800ac20 <_strtol_l.isra.0+0xe0>
 800ac0c:	b007      	add	sp, #28
 800ac0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac10:	2e00      	cmp	r6, #0
 800ac12:	d000      	beq.n	800ac16 <_strtol_l.isra.0+0xd6>
 800ac14:	4240      	negs	r0, r0
 800ac16:	9a02      	ldr	r2, [sp, #8]
 800ac18:	2a00      	cmp	r2, #0
 800ac1a:	d0f7      	beq.n	800ac0c <_strtol_l.isra.0+0xcc>
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d001      	beq.n	800ac24 <_strtol_l.isra.0+0xe4>
 800ac20:	1e6b      	subs	r3, r5, #1
 800ac22:	9301      	str	r3, [sp, #4]
 800ac24:	9b02      	ldr	r3, [sp, #8]
 800ac26:	9a01      	ldr	r2, [sp, #4]
 800ac28:	601a      	str	r2, [r3, #0]
 800ac2a:	e7ef      	b.n	800ac0c <_strtol_l.isra.0+0xcc>
 800ac2c:	2430      	movs	r4, #48	; 0x30
 800ac2e:	2f00      	cmp	r7, #0
 800ac30:	d1aa      	bne.n	800ab88 <_strtol_l.isra.0+0x48>
 800ac32:	2708      	movs	r7, #8
 800ac34:	e7a8      	b.n	800ab88 <_strtol_l.isra.0+0x48>
 800ac36:	2c30      	cmp	r4, #48	; 0x30
 800ac38:	d09e      	beq.n	800ab78 <_strtol_l.isra.0+0x38>
 800ac3a:	270a      	movs	r7, #10
 800ac3c:	e7a4      	b.n	800ab88 <_strtol_l.isra.0+0x48>
 800ac3e:	46c0      	nop			; (mov r8, r8)
 800ac40:	7fffffff 	.word	0x7fffffff

0800ac44 <_strtol_r>:
 800ac44:	b513      	push	{r0, r1, r4, lr}
 800ac46:	4c05      	ldr	r4, [pc, #20]	; (800ac5c <_strtol_r+0x18>)
 800ac48:	6824      	ldr	r4, [r4, #0]
 800ac4a:	6a24      	ldr	r4, [r4, #32]
 800ac4c:	2c00      	cmp	r4, #0
 800ac4e:	d100      	bne.n	800ac52 <_strtol_r+0xe>
 800ac50:	4c03      	ldr	r4, [pc, #12]	; (800ac60 <_strtol_r+0x1c>)
 800ac52:	9400      	str	r4, [sp, #0]
 800ac54:	f7ff ff74 	bl	800ab40 <_strtol_l.isra.0>
 800ac58:	bd16      	pop	{r1, r2, r4, pc}
 800ac5a:	46c0      	nop			; (mov r8, r8)
 800ac5c:	20000038 	.word	0x20000038
 800ac60:	2000009c 	.word	0x2000009c

0800ac64 <_strtoul_l.isra.0>:
 800ac64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac66:	001f      	movs	r7, r3
 800ac68:	000e      	movs	r6, r1
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	9003      	str	r0, [sp, #12]
 800ac6e:	9101      	str	r1, [sp, #4]
 800ac70:	9202      	str	r2, [sp, #8]
 800ac72:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac74:	7834      	ldrb	r4, [r6, #0]
 800ac76:	f000 f8c7 	bl	800ae08 <__locale_ctype_ptr_l>
 800ac7a:	2208      	movs	r2, #8
 800ac7c:	1900      	adds	r0, r0, r4
 800ac7e:	7843      	ldrb	r3, [r0, #1]
 800ac80:	1c75      	adds	r5, r6, #1
 800ac82:	4013      	ands	r3, r2
 800ac84:	d138      	bne.n	800acf8 <_strtoul_l.isra.0+0x94>
 800ac86:	2c2d      	cmp	r4, #45	; 0x2d
 800ac88:	d138      	bne.n	800acfc <_strtoul_l.isra.0+0x98>
 800ac8a:	7874      	ldrb	r4, [r6, #1]
 800ac8c:	1cb5      	adds	r5, r6, #2
 800ac8e:	3301      	adds	r3, #1
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	2f00      	cmp	r7, #0
 800ac94:	d065      	beq.n	800ad62 <_strtoul_l.isra.0+0xfe>
 800ac96:	2f10      	cmp	r7, #16
 800ac98:	d109      	bne.n	800acae <_strtoul_l.isra.0+0x4a>
 800ac9a:	2c30      	cmp	r4, #48	; 0x30
 800ac9c:	d107      	bne.n	800acae <_strtoul_l.isra.0+0x4a>
 800ac9e:	2220      	movs	r2, #32
 800aca0:	782b      	ldrb	r3, [r5, #0]
 800aca2:	4393      	bics	r3, r2
 800aca4:	2b58      	cmp	r3, #88	; 0x58
 800aca6:	d157      	bne.n	800ad58 <_strtoul_l.isra.0+0xf4>
 800aca8:	2710      	movs	r7, #16
 800acaa:	786c      	ldrb	r4, [r5, #1]
 800acac:	3502      	adds	r5, #2
 800acae:	2001      	movs	r0, #1
 800acb0:	0039      	movs	r1, r7
 800acb2:	4240      	negs	r0, r0
 800acb4:	f7f5 fa30 	bl	8000118 <__udivsi3>
 800acb8:	0006      	movs	r6, r0
 800acba:	2001      	movs	r0, #1
 800acbc:	0039      	movs	r1, r7
 800acbe:	4240      	negs	r0, r0
 800acc0:	f7f5 fab0 	bl	8000224 <__aeabi_uidivmod>
 800acc4:	2300      	movs	r3, #0
 800acc6:	2201      	movs	r2, #1
 800acc8:	468c      	mov	ip, r1
 800acca:	0018      	movs	r0, r3
 800accc:	4252      	negs	r2, r2
 800acce:	0021      	movs	r1, r4
 800acd0:	3930      	subs	r1, #48	; 0x30
 800acd2:	2909      	cmp	r1, #9
 800acd4:	d817      	bhi.n	800ad06 <_strtoul_l.isra.0+0xa2>
 800acd6:	000c      	movs	r4, r1
 800acd8:	42a7      	cmp	r7, r4
 800acda:	dd22      	ble.n	800ad22 <_strtoul_l.isra.0+0xbe>
 800acdc:	2b00      	cmp	r3, #0
 800acde:	db1e      	blt.n	800ad1e <_strtoul_l.isra.0+0xba>
 800ace0:	0013      	movs	r3, r2
 800ace2:	4286      	cmp	r6, r0
 800ace4:	d305      	bcc.n	800acf2 <_strtoul_l.isra.0+0x8e>
 800ace6:	d101      	bne.n	800acec <_strtoul_l.isra.0+0x88>
 800ace8:	45a4      	cmp	ip, r4
 800acea:	db02      	blt.n	800acf2 <_strtoul_l.isra.0+0x8e>
 800acec:	2301      	movs	r3, #1
 800acee:	4378      	muls	r0, r7
 800acf0:	1820      	adds	r0, r4, r0
 800acf2:	782c      	ldrb	r4, [r5, #0]
 800acf4:	3501      	adds	r5, #1
 800acf6:	e7ea      	b.n	800acce <_strtoul_l.isra.0+0x6a>
 800acf8:	002e      	movs	r6, r5
 800acfa:	e7ba      	b.n	800ac72 <_strtoul_l.isra.0+0xe>
 800acfc:	2c2b      	cmp	r4, #43	; 0x2b
 800acfe:	d1c7      	bne.n	800ac90 <_strtoul_l.isra.0+0x2c>
 800ad00:	1cb5      	adds	r5, r6, #2
 800ad02:	7874      	ldrb	r4, [r6, #1]
 800ad04:	e7c4      	b.n	800ac90 <_strtoul_l.isra.0+0x2c>
 800ad06:	0021      	movs	r1, r4
 800ad08:	3941      	subs	r1, #65	; 0x41
 800ad0a:	2919      	cmp	r1, #25
 800ad0c:	d801      	bhi.n	800ad12 <_strtoul_l.isra.0+0xae>
 800ad0e:	3c37      	subs	r4, #55	; 0x37
 800ad10:	e7e2      	b.n	800acd8 <_strtoul_l.isra.0+0x74>
 800ad12:	0021      	movs	r1, r4
 800ad14:	3961      	subs	r1, #97	; 0x61
 800ad16:	2919      	cmp	r1, #25
 800ad18:	d803      	bhi.n	800ad22 <_strtoul_l.isra.0+0xbe>
 800ad1a:	3c57      	subs	r4, #87	; 0x57
 800ad1c:	e7dc      	b.n	800acd8 <_strtoul_l.isra.0+0x74>
 800ad1e:	0013      	movs	r3, r2
 800ad20:	e7e7      	b.n	800acf2 <_strtoul_l.isra.0+0x8e>
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	da09      	bge.n	800ad3a <_strtoul_l.isra.0+0xd6>
 800ad26:	2322      	movs	r3, #34	; 0x22
 800ad28:	2001      	movs	r0, #1
 800ad2a:	9a03      	ldr	r2, [sp, #12]
 800ad2c:	4240      	negs	r0, r0
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	9b02      	ldr	r3, [sp, #8]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10a      	bne.n	800ad4c <_strtoul_l.isra.0+0xe8>
 800ad36:	b005      	add	sp, #20
 800ad38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad3a:	9a00      	ldr	r2, [sp, #0]
 800ad3c:	2a00      	cmp	r2, #0
 800ad3e:	d000      	beq.n	800ad42 <_strtoul_l.isra.0+0xde>
 800ad40:	4240      	negs	r0, r0
 800ad42:	9a02      	ldr	r2, [sp, #8]
 800ad44:	2a00      	cmp	r2, #0
 800ad46:	d0f6      	beq.n	800ad36 <_strtoul_l.isra.0+0xd2>
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d001      	beq.n	800ad50 <_strtoul_l.isra.0+0xec>
 800ad4c:	1e6b      	subs	r3, r5, #1
 800ad4e:	9301      	str	r3, [sp, #4]
 800ad50:	9b02      	ldr	r3, [sp, #8]
 800ad52:	9a01      	ldr	r2, [sp, #4]
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	e7ee      	b.n	800ad36 <_strtoul_l.isra.0+0xd2>
 800ad58:	2430      	movs	r4, #48	; 0x30
 800ad5a:	2f00      	cmp	r7, #0
 800ad5c:	d1a7      	bne.n	800acae <_strtoul_l.isra.0+0x4a>
 800ad5e:	2708      	movs	r7, #8
 800ad60:	e7a5      	b.n	800acae <_strtoul_l.isra.0+0x4a>
 800ad62:	2c30      	cmp	r4, #48	; 0x30
 800ad64:	d09b      	beq.n	800ac9e <_strtoul_l.isra.0+0x3a>
 800ad66:	270a      	movs	r7, #10
 800ad68:	e7a1      	b.n	800acae <_strtoul_l.isra.0+0x4a>
	...

0800ad6c <_strtoul_r>:
 800ad6c:	b513      	push	{r0, r1, r4, lr}
 800ad6e:	4c05      	ldr	r4, [pc, #20]	; (800ad84 <_strtoul_r+0x18>)
 800ad70:	6824      	ldr	r4, [r4, #0]
 800ad72:	6a24      	ldr	r4, [r4, #32]
 800ad74:	2c00      	cmp	r4, #0
 800ad76:	d100      	bne.n	800ad7a <_strtoul_r+0xe>
 800ad78:	4c03      	ldr	r4, [pc, #12]	; (800ad88 <_strtoul_r+0x1c>)
 800ad7a:	9400      	str	r4, [sp, #0]
 800ad7c:	f7ff ff72 	bl	800ac64 <_strtoul_l.isra.0>
 800ad80:	bd16      	pop	{r1, r2, r4, pc}
 800ad82:	46c0      	nop			; (mov r8, r8)
 800ad84:	20000038 	.word	0x20000038
 800ad88:	2000009c 	.word	0x2000009c

0800ad8c <__submore>:
 800ad8c:	000b      	movs	r3, r1
 800ad8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad90:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800ad92:	3344      	adds	r3, #68	; 0x44
 800ad94:	000c      	movs	r4, r1
 800ad96:	429d      	cmp	r5, r3
 800ad98:	d11c      	bne.n	800add4 <__submore+0x48>
 800ad9a:	2680      	movs	r6, #128	; 0x80
 800ad9c:	00f6      	lsls	r6, r6, #3
 800ad9e:	0031      	movs	r1, r6
 800ada0:	f000 f8c8 	bl	800af34 <_malloc_r>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d102      	bne.n	800adae <__submore+0x22>
 800ada8:	2001      	movs	r0, #1
 800adaa:	4240      	negs	r0, r0
 800adac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800adae:	0023      	movs	r3, r4
 800adb0:	6360      	str	r0, [r4, #52]	; 0x34
 800adb2:	63a6      	str	r6, [r4, #56]	; 0x38
 800adb4:	3346      	adds	r3, #70	; 0x46
 800adb6:	781a      	ldrb	r2, [r3, #0]
 800adb8:	4b10      	ldr	r3, [pc, #64]	; (800adfc <__submore+0x70>)
 800adba:	54c2      	strb	r2, [r0, r3]
 800adbc:	0023      	movs	r3, r4
 800adbe:	3345      	adds	r3, #69	; 0x45
 800adc0:	781a      	ldrb	r2, [r3, #0]
 800adc2:	4b0f      	ldr	r3, [pc, #60]	; (800ae00 <__submore+0x74>)
 800adc4:	54c2      	strb	r2, [r0, r3]
 800adc6:	782a      	ldrb	r2, [r5, #0]
 800adc8:	4b0e      	ldr	r3, [pc, #56]	; (800ae04 <__submore+0x78>)
 800adca:	54c2      	strb	r2, [r0, r3]
 800adcc:	18c0      	adds	r0, r0, r3
 800adce:	6020      	str	r0, [r4, #0]
 800add0:	2000      	movs	r0, #0
 800add2:	e7eb      	b.n	800adac <__submore+0x20>
 800add4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800add6:	0029      	movs	r1, r5
 800add8:	0073      	lsls	r3, r6, #1
 800adda:	001a      	movs	r2, r3
 800addc:	9301      	str	r3, [sp, #4]
 800adde:	f000 f907 	bl	800aff0 <_realloc_r>
 800ade2:	1e05      	subs	r5, r0, #0
 800ade4:	d0e0      	beq.n	800ada8 <__submore+0x1c>
 800ade6:	1987      	adds	r7, r0, r6
 800ade8:	0001      	movs	r1, r0
 800adea:	0032      	movs	r2, r6
 800adec:	0038      	movs	r0, r7
 800adee:	f000 f83a 	bl	800ae66 <memcpy>
 800adf2:	9b01      	ldr	r3, [sp, #4]
 800adf4:	6027      	str	r7, [r4, #0]
 800adf6:	6365      	str	r5, [r4, #52]	; 0x34
 800adf8:	63a3      	str	r3, [r4, #56]	; 0x38
 800adfa:	e7e9      	b.n	800add0 <__submore+0x44>
 800adfc:	000003ff 	.word	0x000003ff
 800ae00:	000003fe 	.word	0x000003fe
 800ae04:	000003fd 	.word	0x000003fd

0800ae08 <__locale_ctype_ptr_l>:
 800ae08:	30ec      	adds	r0, #236	; 0xec
 800ae0a:	6800      	ldr	r0, [r0, #0]
 800ae0c:	4770      	bx	lr
	...

0800ae10 <__locale_ctype_ptr>:
 800ae10:	4b04      	ldr	r3, [pc, #16]	; (800ae24 <__locale_ctype_ptr+0x14>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d100      	bne.n	800ae1c <__locale_ctype_ptr+0xc>
 800ae1a:	4b03      	ldr	r3, [pc, #12]	; (800ae28 <__locale_ctype_ptr+0x18>)
 800ae1c:	33ec      	adds	r3, #236	; 0xec
 800ae1e:	6818      	ldr	r0, [r3, #0]
 800ae20:	4770      	bx	lr
 800ae22:	46c0      	nop			; (mov r8, r8)
 800ae24:	20000038 	.word	0x20000038
 800ae28:	2000009c 	.word	0x2000009c

0800ae2c <__ascii_mbtowc>:
 800ae2c:	b082      	sub	sp, #8
 800ae2e:	2900      	cmp	r1, #0
 800ae30:	d100      	bne.n	800ae34 <__ascii_mbtowc+0x8>
 800ae32:	a901      	add	r1, sp, #4
 800ae34:	1e10      	subs	r0, r2, #0
 800ae36:	d006      	beq.n	800ae46 <__ascii_mbtowc+0x1a>
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d006      	beq.n	800ae4a <__ascii_mbtowc+0x1e>
 800ae3c:	7813      	ldrb	r3, [r2, #0]
 800ae3e:	600b      	str	r3, [r1, #0]
 800ae40:	7810      	ldrb	r0, [r2, #0]
 800ae42:	1e43      	subs	r3, r0, #1
 800ae44:	4198      	sbcs	r0, r3
 800ae46:	b002      	add	sp, #8
 800ae48:	4770      	bx	lr
 800ae4a:	2002      	movs	r0, #2
 800ae4c:	4240      	negs	r0, r0
 800ae4e:	e7fa      	b.n	800ae46 <__ascii_mbtowc+0x1a>

0800ae50 <memchr>:
 800ae50:	b2c9      	uxtb	r1, r1
 800ae52:	1882      	adds	r2, r0, r2
 800ae54:	4290      	cmp	r0, r2
 800ae56:	d101      	bne.n	800ae5c <memchr+0xc>
 800ae58:	2000      	movs	r0, #0
 800ae5a:	4770      	bx	lr
 800ae5c:	7803      	ldrb	r3, [r0, #0]
 800ae5e:	428b      	cmp	r3, r1
 800ae60:	d0fb      	beq.n	800ae5a <memchr+0xa>
 800ae62:	3001      	adds	r0, #1
 800ae64:	e7f6      	b.n	800ae54 <memchr+0x4>

0800ae66 <memcpy>:
 800ae66:	2300      	movs	r3, #0
 800ae68:	b510      	push	{r4, lr}
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d100      	bne.n	800ae70 <memcpy+0xa>
 800ae6e:	bd10      	pop	{r4, pc}
 800ae70:	5ccc      	ldrb	r4, [r1, r3]
 800ae72:	54c4      	strb	r4, [r0, r3]
 800ae74:	3301      	adds	r3, #1
 800ae76:	e7f8      	b.n	800ae6a <memcpy+0x4>

0800ae78 <memmove>:
 800ae78:	b510      	push	{r4, lr}
 800ae7a:	4288      	cmp	r0, r1
 800ae7c:	d902      	bls.n	800ae84 <memmove+0xc>
 800ae7e:	188b      	adds	r3, r1, r2
 800ae80:	4298      	cmp	r0, r3
 800ae82:	d303      	bcc.n	800ae8c <memmove+0x14>
 800ae84:	2300      	movs	r3, #0
 800ae86:	e007      	b.n	800ae98 <memmove+0x20>
 800ae88:	5c8b      	ldrb	r3, [r1, r2]
 800ae8a:	5483      	strb	r3, [r0, r2]
 800ae8c:	3a01      	subs	r2, #1
 800ae8e:	d2fb      	bcs.n	800ae88 <memmove+0x10>
 800ae90:	bd10      	pop	{r4, pc}
 800ae92:	5ccc      	ldrb	r4, [r1, r3]
 800ae94:	54c4      	strb	r4, [r0, r3]
 800ae96:	3301      	adds	r3, #1
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d1fa      	bne.n	800ae92 <memmove+0x1a>
 800ae9c:	e7f8      	b.n	800ae90 <memmove+0x18>
	...

0800aea0 <_free_r>:
 800aea0:	b570      	push	{r4, r5, r6, lr}
 800aea2:	0005      	movs	r5, r0
 800aea4:	2900      	cmp	r1, #0
 800aea6:	d010      	beq.n	800aeca <_free_r+0x2a>
 800aea8:	1f0c      	subs	r4, r1, #4
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	da00      	bge.n	800aeb2 <_free_r+0x12>
 800aeb0:	18e4      	adds	r4, r4, r3
 800aeb2:	0028      	movs	r0, r5
 800aeb4:	f000 f8e0 	bl	800b078 <__malloc_lock>
 800aeb8:	4a1d      	ldr	r2, [pc, #116]	; (800af30 <_free_r+0x90>)
 800aeba:	6813      	ldr	r3, [r2, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d105      	bne.n	800aecc <_free_r+0x2c>
 800aec0:	6063      	str	r3, [r4, #4]
 800aec2:	6014      	str	r4, [r2, #0]
 800aec4:	0028      	movs	r0, r5
 800aec6:	f000 f8d8 	bl	800b07a <__malloc_unlock>
 800aeca:	bd70      	pop	{r4, r5, r6, pc}
 800aecc:	42a3      	cmp	r3, r4
 800aece:	d909      	bls.n	800aee4 <_free_r+0x44>
 800aed0:	6821      	ldr	r1, [r4, #0]
 800aed2:	1860      	adds	r0, r4, r1
 800aed4:	4283      	cmp	r3, r0
 800aed6:	d1f3      	bne.n	800aec0 <_free_r+0x20>
 800aed8:	6818      	ldr	r0, [r3, #0]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	1841      	adds	r1, r0, r1
 800aede:	6021      	str	r1, [r4, #0]
 800aee0:	e7ee      	b.n	800aec0 <_free_r+0x20>
 800aee2:	0013      	movs	r3, r2
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	2a00      	cmp	r2, #0
 800aee8:	d001      	beq.n	800aeee <_free_r+0x4e>
 800aeea:	42a2      	cmp	r2, r4
 800aeec:	d9f9      	bls.n	800aee2 <_free_r+0x42>
 800aeee:	6819      	ldr	r1, [r3, #0]
 800aef0:	1858      	adds	r0, r3, r1
 800aef2:	42a0      	cmp	r0, r4
 800aef4:	d10b      	bne.n	800af0e <_free_r+0x6e>
 800aef6:	6820      	ldr	r0, [r4, #0]
 800aef8:	1809      	adds	r1, r1, r0
 800aefa:	1858      	adds	r0, r3, r1
 800aefc:	6019      	str	r1, [r3, #0]
 800aefe:	4282      	cmp	r2, r0
 800af00:	d1e0      	bne.n	800aec4 <_free_r+0x24>
 800af02:	6810      	ldr	r0, [r2, #0]
 800af04:	6852      	ldr	r2, [r2, #4]
 800af06:	1841      	adds	r1, r0, r1
 800af08:	6019      	str	r1, [r3, #0]
 800af0a:	605a      	str	r2, [r3, #4]
 800af0c:	e7da      	b.n	800aec4 <_free_r+0x24>
 800af0e:	42a0      	cmp	r0, r4
 800af10:	d902      	bls.n	800af18 <_free_r+0x78>
 800af12:	230c      	movs	r3, #12
 800af14:	602b      	str	r3, [r5, #0]
 800af16:	e7d5      	b.n	800aec4 <_free_r+0x24>
 800af18:	6821      	ldr	r1, [r4, #0]
 800af1a:	1860      	adds	r0, r4, r1
 800af1c:	4282      	cmp	r2, r0
 800af1e:	d103      	bne.n	800af28 <_free_r+0x88>
 800af20:	6810      	ldr	r0, [r2, #0]
 800af22:	6852      	ldr	r2, [r2, #4]
 800af24:	1841      	adds	r1, r0, r1
 800af26:	6021      	str	r1, [r4, #0]
 800af28:	6062      	str	r2, [r4, #4]
 800af2a:	605c      	str	r4, [r3, #4]
 800af2c:	e7ca      	b.n	800aec4 <_free_r+0x24>
 800af2e:	46c0      	nop			; (mov r8, r8)
 800af30:	20000778 	.word	0x20000778

0800af34 <_malloc_r>:
 800af34:	2303      	movs	r3, #3
 800af36:	b570      	push	{r4, r5, r6, lr}
 800af38:	1ccd      	adds	r5, r1, #3
 800af3a:	439d      	bics	r5, r3
 800af3c:	3508      	adds	r5, #8
 800af3e:	0006      	movs	r6, r0
 800af40:	2d0c      	cmp	r5, #12
 800af42:	d21e      	bcs.n	800af82 <_malloc_r+0x4e>
 800af44:	250c      	movs	r5, #12
 800af46:	42a9      	cmp	r1, r5
 800af48:	d81d      	bhi.n	800af86 <_malloc_r+0x52>
 800af4a:	0030      	movs	r0, r6
 800af4c:	f000 f894 	bl	800b078 <__malloc_lock>
 800af50:	4a25      	ldr	r2, [pc, #148]	; (800afe8 <_malloc_r+0xb4>)
 800af52:	6814      	ldr	r4, [r2, #0]
 800af54:	0021      	movs	r1, r4
 800af56:	2900      	cmp	r1, #0
 800af58:	d119      	bne.n	800af8e <_malloc_r+0x5a>
 800af5a:	4c24      	ldr	r4, [pc, #144]	; (800afec <_malloc_r+0xb8>)
 800af5c:	6823      	ldr	r3, [r4, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d103      	bne.n	800af6a <_malloc_r+0x36>
 800af62:	0030      	movs	r0, r6
 800af64:	f000 f86a 	bl	800b03c <_sbrk_r>
 800af68:	6020      	str	r0, [r4, #0]
 800af6a:	0029      	movs	r1, r5
 800af6c:	0030      	movs	r0, r6
 800af6e:	f000 f865 	bl	800b03c <_sbrk_r>
 800af72:	1c43      	adds	r3, r0, #1
 800af74:	d12b      	bne.n	800afce <_malloc_r+0x9a>
 800af76:	230c      	movs	r3, #12
 800af78:	0030      	movs	r0, r6
 800af7a:	6033      	str	r3, [r6, #0]
 800af7c:	f000 f87d 	bl	800b07a <__malloc_unlock>
 800af80:	e003      	b.n	800af8a <_malloc_r+0x56>
 800af82:	2d00      	cmp	r5, #0
 800af84:	dadf      	bge.n	800af46 <_malloc_r+0x12>
 800af86:	230c      	movs	r3, #12
 800af88:	6033      	str	r3, [r6, #0]
 800af8a:	2000      	movs	r0, #0
 800af8c:	bd70      	pop	{r4, r5, r6, pc}
 800af8e:	680b      	ldr	r3, [r1, #0]
 800af90:	1b5b      	subs	r3, r3, r5
 800af92:	d419      	bmi.n	800afc8 <_malloc_r+0x94>
 800af94:	2b0b      	cmp	r3, #11
 800af96:	d903      	bls.n	800afa0 <_malloc_r+0x6c>
 800af98:	600b      	str	r3, [r1, #0]
 800af9a:	18cc      	adds	r4, r1, r3
 800af9c:	6025      	str	r5, [r4, #0]
 800af9e:	e003      	b.n	800afa8 <_malloc_r+0x74>
 800afa0:	684b      	ldr	r3, [r1, #4]
 800afa2:	428c      	cmp	r4, r1
 800afa4:	d10d      	bne.n	800afc2 <_malloc_r+0x8e>
 800afa6:	6013      	str	r3, [r2, #0]
 800afa8:	0030      	movs	r0, r6
 800afaa:	f000 f866 	bl	800b07a <__malloc_unlock>
 800afae:	0020      	movs	r0, r4
 800afb0:	2207      	movs	r2, #7
 800afb2:	300b      	adds	r0, #11
 800afb4:	1d23      	adds	r3, r4, #4
 800afb6:	4390      	bics	r0, r2
 800afb8:	1ac3      	subs	r3, r0, r3
 800afba:	d0e7      	beq.n	800af8c <_malloc_r+0x58>
 800afbc:	425a      	negs	r2, r3
 800afbe:	50e2      	str	r2, [r4, r3]
 800afc0:	e7e4      	b.n	800af8c <_malloc_r+0x58>
 800afc2:	6063      	str	r3, [r4, #4]
 800afc4:	000c      	movs	r4, r1
 800afc6:	e7ef      	b.n	800afa8 <_malloc_r+0x74>
 800afc8:	000c      	movs	r4, r1
 800afca:	6849      	ldr	r1, [r1, #4]
 800afcc:	e7c3      	b.n	800af56 <_malloc_r+0x22>
 800afce:	2303      	movs	r3, #3
 800afd0:	1cc4      	adds	r4, r0, #3
 800afd2:	439c      	bics	r4, r3
 800afd4:	42a0      	cmp	r0, r4
 800afd6:	d0e1      	beq.n	800af9c <_malloc_r+0x68>
 800afd8:	1a21      	subs	r1, r4, r0
 800afda:	0030      	movs	r0, r6
 800afdc:	f000 f82e 	bl	800b03c <_sbrk_r>
 800afe0:	1c43      	adds	r3, r0, #1
 800afe2:	d1db      	bne.n	800af9c <_malloc_r+0x68>
 800afe4:	e7c7      	b.n	800af76 <_malloc_r+0x42>
 800afe6:	46c0      	nop			; (mov r8, r8)
 800afe8:	20000778 	.word	0x20000778
 800afec:	2000077c 	.word	0x2000077c

0800aff0 <_realloc_r>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	0007      	movs	r7, r0
 800aff4:	000d      	movs	r5, r1
 800aff6:	0016      	movs	r6, r2
 800aff8:	2900      	cmp	r1, #0
 800affa:	d105      	bne.n	800b008 <_realloc_r+0x18>
 800affc:	0011      	movs	r1, r2
 800affe:	f7ff ff99 	bl	800af34 <_malloc_r>
 800b002:	0004      	movs	r4, r0
 800b004:	0020      	movs	r0, r4
 800b006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b008:	2a00      	cmp	r2, #0
 800b00a:	d103      	bne.n	800b014 <_realloc_r+0x24>
 800b00c:	f7ff ff48 	bl	800aea0 <_free_r>
 800b010:	0034      	movs	r4, r6
 800b012:	e7f7      	b.n	800b004 <_realloc_r+0x14>
 800b014:	f000 f832 	bl	800b07c <_malloc_usable_size_r>
 800b018:	002c      	movs	r4, r5
 800b01a:	42b0      	cmp	r0, r6
 800b01c:	d2f2      	bcs.n	800b004 <_realloc_r+0x14>
 800b01e:	0031      	movs	r1, r6
 800b020:	0038      	movs	r0, r7
 800b022:	f7ff ff87 	bl	800af34 <_malloc_r>
 800b026:	1e04      	subs	r4, r0, #0
 800b028:	d0ec      	beq.n	800b004 <_realloc_r+0x14>
 800b02a:	0029      	movs	r1, r5
 800b02c:	0032      	movs	r2, r6
 800b02e:	f7ff ff1a 	bl	800ae66 <memcpy>
 800b032:	0029      	movs	r1, r5
 800b034:	0038      	movs	r0, r7
 800b036:	f7ff ff33 	bl	800aea0 <_free_r>
 800b03a:	e7e3      	b.n	800b004 <_realloc_r+0x14>

0800b03c <_sbrk_r>:
 800b03c:	2300      	movs	r3, #0
 800b03e:	b570      	push	{r4, r5, r6, lr}
 800b040:	4c06      	ldr	r4, [pc, #24]	; (800b05c <_sbrk_r+0x20>)
 800b042:	0005      	movs	r5, r0
 800b044:	0008      	movs	r0, r1
 800b046:	6023      	str	r3, [r4, #0]
 800b048:	f7fb f8bc 	bl	80061c4 <_sbrk>
 800b04c:	1c43      	adds	r3, r0, #1
 800b04e:	d103      	bne.n	800b058 <_sbrk_r+0x1c>
 800b050:	6823      	ldr	r3, [r4, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d000      	beq.n	800b058 <_sbrk_r+0x1c>
 800b056:	602b      	str	r3, [r5, #0]
 800b058:	bd70      	pop	{r4, r5, r6, pc}
 800b05a:	46c0      	nop			; (mov r8, r8)
 800b05c:	20000990 	.word	0x20000990

0800b060 <__ascii_wctomb>:
 800b060:	1e0b      	subs	r3, r1, #0
 800b062:	d004      	beq.n	800b06e <__ascii_wctomb+0xe>
 800b064:	2aff      	cmp	r2, #255	; 0xff
 800b066:	d904      	bls.n	800b072 <__ascii_wctomb+0x12>
 800b068:	238a      	movs	r3, #138	; 0x8a
 800b06a:	6003      	str	r3, [r0, #0]
 800b06c:	3b8b      	subs	r3, #139	; 0x8b
 800b06e:	0018      	movs	r0, r3
 800b070:	4770      	bx	lr
 800b072:	700a      	strb	r2, [r1, #0]
 800b074:	2301      	movs	r3, #1
 800b076:	e7fa      	b.n	800b06e <__ascii_wctomb+0xe>

0800b078 <__malloc_lock>:
 800b078:	4770      	bx	lr

0800b07a <__malloc_unlock>:
 800b07a:	4770      	bx	lr

0800b07c <_malloc_usable_size_r>:
 800b07c:	1f0b      	subs	r3, r1, #4
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	1f18      	subs	r0, r3, #4
 800b082:	2b00      	cmp	r3, #0
 800b084:	da01      	bge.n	800b08a <_malloc_usable_size_r+0xe>
 800b086:	580b      	ldr	r3, [r1, r0]
 800b088:	18c0      	adds	r0, r0, r3
 800b08a:	4770      	bx	lr

0800b08c <_init>:
 800b08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08e:	46c0      	nop			; (mov r8, r8)
 800b090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b092:	bc08      	pop	{r3}
 800b094:	469e      	mov	lr, r3
 800b096:	4770      	bx	lr

0800b098 <_fini>:
 800b098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09a:	46c0      	nop			; (mov r8, r8)
 800b09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b09e:	bc08      	pop	{r3}
 800b0a0:	469e      	mov	lr, r3
 800b0a2:	4770      	bx	lr
